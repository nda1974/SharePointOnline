{"version":3,"sources":["webparts/handbog/Services/SPSearchService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,uCAAoJ;AACpJ,+BAAiC;AAEjC;IAII,yBAAmB,cAA+B;QAC9C,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC;QAE/B,oCAAoC;QACpC,kCAAkC;QAClC,kCAAkC;QAClC,8BAA8B;QAC9B,iCAAiC;QAKjC,4BAA4B;QAC5B,IAAM,eAAe,GAAG,IAAI,2BAAe,EAAE,CAAC;QAC9C,kBAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QAElC,qDAAqD;QACrD,sCAAsC;QACtC,oIAAoI;QACpI,iBAAK,CAAC;YACF,EAAE,EAAE;gBACA,OAAO,EAAE;oBACL,MAAM,EAAE,oCAAoC;iBAC/C;aACJ;YACD,WAAW,EAAE,IAAI,CAAC,QAAQ;SAC7B,CAAC,CAAC;IACP,CAAC;IAID,mGAAmG;IAClF,gCAAM,GAAnB,UAAoB,SAAgB,EAAC,iBAA0B,EAAC,UAAiB;;;;;;wBAG7E,OAAO,CAAC,GAAG,CAAC,aAAa,GAAK,UAAU,CAAC,CAAC;wBAC1C,EAAE,CAAC,CAAC,UAAU,IAAG,WAAW,CAAC,CAAC,CAAC;4BAC3B,MAAM,gBAAC;wBACX,CAAC;wBAGG,WAAW,GAAgB,EAAE,CAAC;wBAC9B,cAAc,GAAa,EAAE,CAAC;wBAE9B,sBAAsB,GAAU,EAAE,CAAA;wBAClC,mBAAmB,GAAQ,EAAE,CAAC;wBAC9B,uBAAuB,GAAQ,EAAE,CAAC;wBAElC,gBAAgB,GAAU,CAAC,OAAO,EAAC,QAAQ,EAAC,eAAe,EAAC,MAAM,EAAC,mBAAmB,CAAC,CAAC;wBAG5F,MAAM,CAAC,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;4BAC/B,KAAK,MAAM;gCACP,gBAAgB,GAAC,CAAC,OAAO,EAAC,QAAQ,EAAC,cAAc,EAAC,MAAM,EAAC,mBAAmB,CAAC,CAAC;gCAC9E,mBAAmB,GAAG,YAAY,CAAC;gCACnC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAA;gCACrC,KAAK,CAAC;4BACN,KAAK,KAAK;gCACV,gBAAgB,GAAC,CAAC,OAAO,EAAC,QAAQ,EAAC,aAAa,EAAC,MAAM,EAAC,mBAAmB,CAAC,CAAC;gCAC7E,mBAAmB,GAAG,WAAW,CAAC;gCAClC,uBAAuB,GAAE,mBAAmB,CAAC;gCAC7C,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAA;gCACrC,KAAK,CAAC;4BACN,KAAK,MAAM;gCACX,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAA;gCACjC,gBAAgB,GAAC,CAAC,OAAO,EAAC,QAAQ,EAAC,cAAc,EAAC,MAAM,EAAC,mBAAmB,CAAC,CAAC;gCAC9E,mBAAmB,GAAG,YAAY,CAAC;gCACvC,KAAK,CAAC;4BAEV;gCACI,KAAK,CAAC;wBAEd,CAAC;wBAEG,EAAE,GAAU,EAAE,CAAC;wBACnB,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,IAAE,CAAC,CAAC,CAAC,CAAC;4BAC9B,WAAW,CAAC,SAAS,GAAC,4BAA4B,GAAG,SAAS,GAAG,GAAG,GAAE,oBAAoB,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;4BACxH,WAAW,CAAC,SAAS,GAAC,cAAc,GAAC,mBAAmB,GAAC,OAAO,GAAG,SAAS,GAAG,GAAG,GAAE,qBAAqB,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;4BAGvI,2HAA2H;4BAC3H,8HAA8H;4BAC9H,6HAA6H;4BAC7H,4BAA4B;4BAC5B,4EAA4E;4BAE5E,0FAA0F;4BAC1F,6FAA6F;wBACjG,CAAC;wBACD,IAAI,CACJ,CAAC;4BACG,WAAW,CAAC,SAAS,GAAC,4BAA4B,GAAG,SAAS,CAAC;4BAC/D,WAAW,CAAC,SAAS,GAAC,cAAc,GAAC,mBAAmB,GAAC,OAAO,GAAG,SAAS,CAAC;4BAC7E,uEAAuE;4BACvE,yEAAyE;wBAE7E,CAAC;wBAED,wEAAwE;wBAExE,WAAW,CAAC,gBAAgB,GAAC,gBAAgB,CAAC;wBAC9C,2HAA2H;wBAC3H,4CAA4C;wBAC5C,WAAW,CAAC,QAAQ,GAAC,mBAAmB,CAAC;wBACzC,WAAW,CAAC,QAAQ,GAAC,uBAAuB,CAAC;wBAKnC,qBAAM,mBAAG,CAAC,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,EAAA;;wBAApC,CAAC,GAAG,SAAgC;wBAIpC,gBAAgB,GAA6B,EAAE,CAAC;wBAClD,iBAAiB,GAAwB,EAAE,CAAC;wBAG5C,OAAO,GAAmB;4BAC5B,eAAe,EAAG,EAAE;4BACpB,iBAAiB,EAAE,EAAE;4BACrB,SAAS,EAAE,CAAC;yBACf,CAAC;6BACI,CAAC,CAAC,gBAAgB,CAAC,kBAAkB,EAArC,wBAAqC;wBAI1B,qBAAM,CAAC,CAAC,OAAO,CAAC,CAAC,EAAC,EAAE,CAAC,EAAA;;wBAA1B,EAAE,GAAG,SAAqB;wBAC1B,UAAU,GAAG,EAAE,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC;wBACjF,qBAAqB,GAAG,EAAE,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,iBAAiB,CAAC;wBAE/E,cAAc,GAAG,qBAAqB,GAAG,qBAAqB,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;wBAEtF,UAAU,CAAC,GAAG,CAAC,UAAC,GAAG;4BAEf,IAAM,EAAE,GAAG,IAAI,OAAO,CAAgB,UAAC,SAAS,EAAE,QAAQ;gCAEtD,gCAAgC;gCAChC,kIAAkI;gCAClI,IAAI,MAAM,GAAkB,EAAE,CAAC;gCAE/B,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI;oCACf,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;gCAClC,CAAC,CAAC,CAAC;gCACH,SAAS,CAAC,MAAM,CAAC,CAAC;4BACtB,CAAC,CAAC,CAAC;4BAEH,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;4BAC1B,4CAA4C;wBAEhD,CAAC,CAAC,CAAC;wBACH,6CAA6C;wBAC7C,cAAc,CAAC,GAAG,CAAC,UAAC,OAAW;4BAE7B,IAAI,MAAM,GAAuB,EAAE,CAAC;4BACpC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,IAAI;gCAErB,MAAM,CAAC,IAAI,CAAC;oCACV,mDAAmD;oCACnD,eAAe,EAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;oCAC5C,8GAA8G;oCAC9G,cAAc,EAAG,IAAI,CAAC,cAAc;oCACpC,eAAe,EAAE,IAAI,CAAC,eAAe;oCACrC,yGAAyG;oCACzG,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,6CAA6C;iCACpF,CAAC,CAAC;4BACP,CAAC,CAAC,CAAC;4BAEH,iBAAiB,CAAC,IAAI,CAAC;gCACrB,wCAAwC;gCACtC,UAAU,EAAE,OAAO,CAAC,IAAI;gCACxB,MAAM,EAAE,MAAM;6BACjB,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;;4BAEoC,qBAAM,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAA;;wBAAtE,eAAe,GAAoB,SAAmC;wBAC5E,OAAO,CAAC,eAAe,GAAG,eAAe,CAAC;wBAC1C,OAAO,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;wBAC9C,sBAAO,OAAO,EAAC;;;;KAEtB;IAED;;;OAGG;IACY,2BAAW,GAA1B,UAA2B,UAAkB;QAEzC,IAAM,UAAU,GAAG,iNAAiN,CAAC;QACrO,IAAM,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAE7C,IAAI,iBAAiB,GAAG,UAAU,CAAC;QAEnC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACV,OAAO,CAAC,GAAG,CAAC,UAAA,KAAK;gBACb,iBAAiB,GAAG,iBAAiB,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YACrF,CAAC,CAAC,CAAC;QACP,CAAC;QAED,MAAM,CAAC,iBAAiB,CAAC;IAC7B,CAAC;IAGL,sBAAC;AAAD,CA9MA,AA8MC,IAAA","file":"webparts/handbog/Services/SPSearchService.js","sourcesContent":["import { IWebPartContext } from \"@microsoft/sp-webpart-base\";\r\nimport {ISearchResult, ISearchResults, IRefinementResult, IRefinementValue, IRefinementFilter} from '../ISearchResults'\r\nimport pnp, { ConsoleListener, Logger, LogLevel, SearchQuery, SearchQueryBuilder, SearchResults, setup, Web, Sort, SortDirection } from \"sp-pnp-js\";\r\nimport * as moment from \"moment\";\r\nimport { SearchProperty } from 'sp-pnp-js/lib/sharepoint/search';\r\nexport default class SPSearchService{\r\n    private _context: IWebPartContext;\r\n\r\n\r\n    public constructor(webPartContext: IWebPartContext) {\r\n        this._context = webPartContext;\r\n\r\n        //refinablestring00 = AnsvarCategory\r\n        //refinablestring01 = HundCategory\r\n        //refinablestring02 = BaadCategory\r\n        //refinablestring03 = BaadArea\r\n        //refinablestring04 = BilCategory\r\n\r\n\r\n\r\n\r\n        // Setup the PnP JS instance\r\n        const consoleListener = new ConsoleListener();\r\n        Logger.subscribe(consoleListener);\r\n\r\n        // To limit the payload size, we set odata=nometadata\r\n        // We just need to get list items here\r\n        // We also set the SPFx context accordingly (https://github.com/SharePoint/PnP-JS-Core/wiki/Using-sp-pnp-js-in-SharePoint-Framework)\r\n        setup({\r\n            sp: {\r\n                headers: {\r\n                    Accept: \"application/json; odata=nometadata\",\r\n                },\r\n            },\r\n            spfxContext: this._context,\r\n        });\r\n    }\r\n\r\n\r\n\r\n    // public static async search(queryText:string,refinementFilters:string[]):Promise<ISearchResults>{\r\n        public async search(queryText:string,refinementFilters:string[],manualType:string):Promise<ISearchResults>{\r\n            \r\n            \r\n            console.log('manualType '  +  manualType);\r\n            if (manualType== 'undefined') {\r\n                return;\r\n            }\r\n            \r\n\r\n            let searchQuery: SearchQuery = {};\r\n            let sortedRefiners: string[] = [];\r\n            \r\n            let selectPropertyCategory:string = \"\"\r\n            let filterOnContentType:string=\"\";\r\n            let refinersMappedProerties:string=\"\";\r\n\r\n            let selectProperties:string[]=['Title','Author','IndboCategory','Path','RefinableString02'];\r\n\r\n\r\n            switch (manualType.toUpperCase()) {\r\n                case \"BAAD\":\r\n                    selectProperties=['Title','Author','BaadCategory','Path','RefinableString02'];\r\n                    filterOnContentType = \"BaadManual\";\r\n                    console.log(manualType.toUpperCase())\r\n                    break;\r\n                    case \"BIL\":\r\n                    selectProperties=['Title','Author','BilCategory','Path','RefinableString04'];\r\n                    filterOnContentType = \"BilManual\";\r\n                    refinersMappedProerties= \"refinablestring04\";\r\n                    console.log(manualType.toUpperCase())\r\n                    break;\r\n                    case \"HUND\":\r\n                    console.log(manualType.toUpperCase())\r\n                        selectProperties=['Title','Author','HundCategory','Path','RefinableString02'];\r\n                        filterOnContentType = \"HundManual\";\r\n                    break;\r\n            \r\n                default:\r\n                    break;\r\n                    \r\n            }\r\n            // let selectProperties:string[]=['Title','Author','AnsvarCategory','Path'];\r\n            let rf:string[]=[];\r\n            if (refinementFilters.length==1) {\r\n                searchQuery.Querytext=\"ContentType:LB Manual AND \" + queryText + \" \" +\"LBManualCategory:'\" + refinementFilters[0] + \"'\";\r\n                searchQuery.Querytext=\"ContentType:\"+filterOnContentType+\" AND \" + queryText + \" \" +\"RefinableString04:'\" + refinementFilters[0] + \"'\";\r\n\r\n                \r\n                //searchQuery.Querytext=\"ContentType:IndboManual AND \" + queryText + \" \" +\"IndboCategory:\\\"\" + refinementFilters[0] + \"\\\"\";\r\n                // searchQuery.Querytext=\"ContentType:AnsvarManual AND \" + queryText + \" \" +\"AnsvarKategori:\\\"\" + refinementFilters[0] + \"\\\"\";\r\n                // searchQuery.Querytext=\"ContentType:IndboManual AND \" + queryText + \" \" + \"IndboCategory=('Vilkårenes+afsnit+8.+Hærværk')\";\r\n                // let myFilter:string[]=[];\r\n                // myFilter.push(\"RefinableString02:equals('\" + refinementFilters[0] + \"')\")\r\n                \r\n                // searchQuery.RefinementFilters=[\"IndboCategory:equals('Vilkårenes afsnit 8. Hærværk')\"];\r\n                // searchQuery.RefinementFilters=[\"LBManualCategory:equals('\" + refinementFilters[0] + \"')\"];\r\n            }\r\n            else\r\n            {\r\n                searchQuery.Querytext=\"ContentType:LB Manual AND \" + queryText;\r\n                searchQuery.Querytext=\"ContentType:\"+filterOnContentType+\" AND \" + queryText;    \r\n                //searchQuery.Querytext=\"ContentType:IndboManual AND \" + queryText;    \r\n                // searchQuery.Querytext=\"ContentType:AnsvarManual AND \" + queryText;    \r\n                \r\n            }\r\n            \r\n            // searchQuery.RefinementFilters=[\"LBManualCategory:equals('Diverse')\"];\r\n            \r\n            searchQuery.SelectProperties=selectProperties;\r\n            // searchQuery.Querytext=\"ContentType:LB Manual AND \" + queryText + \" \" +\"LBManualCategory:'\" + refinementFilters[0] + \"'\";\r\n            // searchQuery.Refiners=\"RefinableString01\";\r\n            searchQuery.Refiners=\"RefinableString02\";\r\n            searchQuery.Refiners=refinersMappedProerties;\r\n            // searchQuery.Refiners=\"RefinableString00\";\r\n            \r\n            \r\n            \r\n            const r = await pnp.sp.search(searchQuery);\r\n\r\n\r\n            \r\n            const allItemsPromises: Promise<ISearchResult>[] = [];\r\n            let refinementResults: IRefinementResult[] = [];\r\n            \r\n            // const allItemsPromises: Promise<ISearchResult>[] = [];\r\n            let results: ISearchResults = {\r\n              RelevantResults : [],\r\n              RefinementResults: [],\r\n              TotalRows: 0,\r\n          };\r\n            if (r.RawSearchResults.PrimaryQueryResult) {\r\n                            \r\n                // Be careful, there was an issue with paging calculation under 2.0.8 version of sp-pnp-js library\r\n                // More info https://github.com/SharePoint/PnP-JS-Core/issues/535\r\n                const r2 = await r.getPage(1,10);\r\n                const resultRows = r2.RawSearchResults.PrimaryQueryResult.RelevantResults.Table.Rows;\r\n                let refinementResultsRows = r2.RawSearchResults.PrimaryQueryResult.RefinementResults;\r\n        \r\n                const refinementRows = refinementResultsRows ? refinementResultsRows[\"Refiners\"] : [];\r\n        \r\n                resultRows.map((elt) => {\r\n        \r\n                    const p1 = new Promise<ISearchResult>((resolvep1, rejectp1) => {\r\n                    \r\n                        // Build item result dynamically\r\n                        // We can't type the response here because search results are by definition too heterogeneous so we treat them as key-value object\r\n                        let result: ISearchResult = {};\r\n        \r\n                        elt.Cells.map((item) => {\r\n                            result[item.Key] = item.Value;\r\n                        });\r\n                        resolvep1(result);\r\n                    });\r\n        \r\n                    allItemsPromises.push(p1);    \r\n                    // Resolve all the promises once to get news\r\n                                \r\n                });\r\n                // Map refinement results                    \r\n                refinementRows.map((refiner:any) => {\r\n                  \r\n                  let values: IRefinementValue[] = [];\r\n                  refiner.Entries.map((item) => {\r\n                      \r\n                      values.push({\r\n                        //   RefinementCount: (Number)item.RefinementCount,\r\n                        RefinementCount:Number(item.RefinementCount),\r\n                        // RefinementName:  this._formatDate(item.RefinementName), //This value will appear in the selected filter bar\r\n                        RefinementName:  item.RefinementName,\r\n                        RefinementToken: item.RefinementToken,\r\n                        // RefinementValue: this._formatDate(item.RefinementValue), // This value will appear in the filter panel\r\n                        RefinementValue: item.RefinementValue // This value will appear in the filter panel\r\n                      });\r\n                  });\r\n        \r\n                  refinementResults.push({\r\n                    //   FilterName: refiner.RefinementName,\r\n                      FilterName: refiner.Name,\r\n                      Values: values,\r\n                  });\r\n              });\r\n            }\r\n            const relevantResults: ISearchResult[] = await Promise.all(allItemsPromises);\r\n            results.RelevantResults = relevantResults;\r\n            results.RefinementResults = refinementResults;\r\n            return results;\r\n          \r\n    }\r\n    \r\n    /**\r\n     * Find and eeplace ISO 8601 dates in the string by a friendly value\r\n     * @param inputValue The string to format\r\n     */\r\n    private static _formatDate(inputValue: string): string {\r\n        \r\n        const iso8061rgx = /(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/g;\r\n        const matches = inputValue.match(iso8061rgx);\r\n\r\n        let updatedInputValue = inputValue;\r\n\r\n        if (matches) {\r\n            matches.map(match => {\r\n                updatedInputValue = updatedInputValue.replace(match, moment(match).format(\"LL\"));\r\n            });\r\n        }\r\n\r\n        return updatedInputValue;        \r\n    }\r\n    \r\n  \r\n}\r\n\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}