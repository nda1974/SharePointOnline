"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
var child_process = require("child_process");
/**
 * @public
 */
var VersionControl = (function () {
    function VersionControl() {
    }
    VersionControl.getChangedFolders = function (targetBranch) {
        var branchName = targetBranch ? targetBranch : 'origin/master';
        var output = child_process.execSync("git diff " + branchName + "... --dirstat=files,0")
            .toString();
        return output.split('\n').map(function (s) {
            if (s) {
                var delimiterIndex = s.indexOf('%');
                if (delimiterIndex > 0 && delimiterIndex + 1 < s.length) {
                    return s.substring(delimiterIndex + 1).trim();
                }
            }
            return undefined;
        });
    };
    VersionControl.getChangedFiles = function (prefix, targetBranch) {
        var branchName = targetBranch ? targetBranch : 'origin/master';
        var output = child_process
            .execSync("git diff " + branchName + "... --name-only --diff-filter=A")
            .toString();
        var regex = prefix ? new RegExp("^" + prefix, 'i') : undefined;
        return output.split('\n').map(function (s) {
            if (s) {
                var trimmedLine = s.trim();
                if (trimmedLine.match(regex)) {
                    return trimmedLine;
                }
            }
            return undefined;
        }).filter(function (s) {
            return s && s.length > 0;
        });
    };
    /**
     * Gets the remote master branch that maps to the provided repository url.
     * This method is used by 'Rush change' to find the default remote branch to compare against.
     * If repository url is not provided or if there is no match, returns the default remote
     * master branch 'origin/master'.
     * If there are more than one matches, returns the first remote's master branch.
     *
     * @param repositoryUrl - repository url
     */
    VersionControl.getRemoteMasterBranch = function (repositoryUrl) {
        var defaultRemote = 'origin';
        var defaultMaster = 'origin/master';
        var useDefault = false;
        var matchingRemotes = [];
        if (!repositoryUrl) {
            useDefault = true;
        }
        else {
            var output = child_process
                .execSync("git remote")
                .toString();
            matchingRemotes = output.split('\n').filter(function (remoteName) {
                if (remoteName) {
                    var remoteUrl = child_process.execSync("git remote get-url " + remoteName)
                        .toString()
                        .trim();
                    if (remoteName === defaultRemote && remoteUrl === repositoryUrl) {
                        useDefault = true;
                    }
                    return remoteUrl === repositoryUrl;
                }
                return false;
            });
        }
        if (useDefault) {
            return defaultMaster;
        }
        else if (matchingRemotes.length > 0) {
            if (matchingRemotes.length > 1) {
                console.log("More than one remotes match the repository url. Use the first remote.");
            }
            return matchingRemotes[0] + "/master";
        }
        // For backward-compatible
        return defaultMaster;
    };
    VersionControl.hasUncommittedChanges = function () {
        return VersionControl.getUncommittedChanges().length > 0;
    };
    /**
     * The list of files changed but not commited
     */
    VersionControl.getUncommittedChanges = function () {
        var changes = [];
        changes.push.apply(changes, VersionControl._getUntrackedChanges());
        changes.push.apply(changes, VersionControl._getDiffOnHEAD());
        return changes.filter(function (change) {
            return change.trim().length > 0;
        });
    };
    VersionControl._getUntrackedChanges = function () {
        var output = child_process
            .execSync("git ls-files --exclude-standard --others")
            .toString();
        return output.trim().split('\n');
    };
    VersionControl._getDiffOnHEAD = function () {
        var output = child_process
            .execSync("git diff HEAD --name-only")
            .toString();
        return output.trim().split('\n');
    };
    return VersionControl;
}());
exports.default = VersionControl;

//# sourceMappingURL=VersionControl.js.map
