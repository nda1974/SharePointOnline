{"version":3,"sources":["utilities/VersionControl.ts"],"names":[],"mappings":"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","file":"utilities/VersionControl.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as child_process from 'child_process';\r\n\r\n/**\r\n * @public\r\n */\r\nexport default class VersionControl {\r\n  public static getChangedFolders(targetBranch?: string): string[] {\r\n    const branchName: string = targetBranch ? targetBranch : 'origin/master';\r\n    const output: string = child_process.execSync(`git diff ${branchName}... --dirstat=files,0`)\r\n      .toString();\r\n    return output.split('\\n').map(s => {\r\n      if (s) {\r\n        const delimiterIndex: number = s.indexOf('%');\r\n        if (delimiterIndex > 0 && delimiterIndex + 1 < s.length) {\r\n          return s.substring(delimiterIndex + 1).trim();\r\n        }\r\n      }\r\n      return undefined;\r\n    });\r\n  }\r\n\r\n  public static getChangedFiles(prefix?: string, targetBranch?: string): string[] {\r\n    const branchName: string = targetBranch ? targetBranch : 'origin/master';\r\n    const output: string = child_process\r\n      .execSync(`git diff ${branchName}... --name-only --diff-filter=A`)\r\n      .toString();\r\n    const regex: RegExp = prefix ? new RegExp(`^${prefix}`, 'i') : undefined;\r\n    return output.split('\\n').map(s => {\r\n      if (s) {\r\n        const trimmedLine: string = s.trim();\r\n        if (trimmedLine.match(regex)) {\r\n          return trimmedLine;\r\n        }\r\n      }\r\n      return undefined;\r\n    }).filter(s => {\r\n      return s && s.length > 0;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the remote master branch that maps to the provided repository url.\r\n   * This method is used by 'Rush change' to find the default remote branch to compare against.\r\n   * If repository url is not provided or if there is no match, returns the default remote\r\n   * master branch 'origin/master'.\r\n   * If there are more than one matches, returns the first remote's master branch.\r\n   *\r\n   * @param repositoryUrl - repository url\r\n   */\r\n  public static getRemoteMasterBranch(repositoryUrl?: string): string {\r\n    const defaultRemote: string = 'origin';\r\n    const defaultMaster: string = 'origin/master';\r\n    let useDefault: boolean = false;\r\n    let matchingRemotes: string[] = [];\r\n\r\n    if (!repositoryUrl) {\r\n      useDefault = true;\r\n    } else {\r\n      const output: string = child_process\r\n      .execSync(`git remote`)\r\n      .toString();\r\n      matchingRemotes = output.split('\\n').filter(remoteName => {\r\n        if (remoteName) {\r\n          const remoteUrl: string = child_process.execSync(`git remote get-url ${remoteName}`)\r\n            .toString()\r\n            .trim();\r\n          if (remoteName === defaultRemote && remoteUrl === repositoryUrl) {\r\n            useDefault = true;\r\n          }\r\n          return remoteUrl === repositoryUrl;\r\n        }\r\n        return false;\r\n      });\r\n    }\r\n\r\n    if (useDefault) {\r\n      return defaultMaster;\r\n    } else if (matchingRemotes.length > 0) {\r\n      if (matchingRemotes.length > 1) {\r\n        console.log(`More than one remotes match the repository url. Use the first remote.`);\r\n      }\r\n      return `${matchingRemotes[0]}/master`;\r\n    }\r\n    // For backward-compatible\r\n    return defaultMaster;\r\n  }\r\n\r\n  public static hasUncommittedChanges(): boolean {\r\n    return VersionControl.getUncommittedChanges().length > 0;\r\n  }\r\n\r\n  /**\r\n   * The list of files changed but not commited\r\n   */\r\n  public static getUncommittedChanges(): ReadonlyArray<string> {\r\n    const changes: string[] = [];\r\n    changes.push(...VersionControl._getUntrackedChanges());\r\n    changes.push(...VersionControl._getDiffOnHEAD());\r\n\r\n    return changes.filter(change => {\r\n      return change.trim().length > 0;\r\n    });\r\n  }\r\n\r\n  private static _getUntrackedChanges(): string[] {\r\n    const output: string = child_process\r\n      .execSync(`git ls-files --exclude-standard --others`)\r\n      .toString();\r\n    return output.trim().split('\\n');\r\n  }\r\n\r\n  private static _getDiffOnHEAD(): string[] {\r\n    const output: string = child_process\r\n      .execSync(`git diff HEAD --name-only`)\r\n      .toString();\r\n    return output.trim().split('\\n');\r\n  }\r\n}"],"sourceRoot":"..\\..\\src"}