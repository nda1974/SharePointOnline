{"version":3,"sources":["data/VersionPolicyConfiguration.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,2BAA6B;AAC7B,8BAAgC;AAChC,kEAAoE;AAEpE,iDAA0D;AAyB1D;;GAEG;AACH;IAKE,oCAA2B,aAAqB;QAArB,kBAAa,GAAb,aAAa,CAAQ;QAC9C,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAAyB,CAAC;QACzD,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACI,qDAAgB,GAAvB,UAAwB,UAAkB;QACxC,IAAM,MAAM,GAAkB,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACpE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,MAAM,IAAI,KAAK,CAAC,4CAA2C,UAAU,MAAI,CAAC,CAAC;QAC7E,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAKD,sBAAW,uDAAe;QAH1B;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;QAC/B,CAAC;;;OAAA;IAED;;;;;;;OAOG;IACI,yCAAI,GAAX,UAAY,iBAA0B,EACpC,QAAmB,EACnB,UAAmB,EACnB,YAAsB;QAEtB,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACtB,IAAM,MAAM,GAAkB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;YAC1E,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YACpC,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,aAAa;gBACzC,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;oBAClB,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;gBAC3C,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QACD,IAAM,iBAAiB,GAAyB,EAAE,CAAC;QACnD,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,aAAa;YACzC,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,4BAAQ,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACvD,CAAC;IACH,CAAC;IAEO,8CAAS,GAAjB;QAAA,iBAaC;QAZC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC;QACT,CAAC;QACD,IAAM,iBAAiB,GAAyB,4BAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,EACzF,0BAA0B,CAAC,WAAW,CAAC,CAAC;QAE1C,iBAAiB,CAAC,OAAO,CAAC,UAAA,UAAU;YAClC,IAAM,MAAM,GAAkB,6BAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC7D,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACX,KAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YACvD,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IA5Ec,sCAAW,GAAe,8BAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,iCAAiC,CAAC,CAAC,CAAC;IA6ExH,iCAAC;CA9ED,AA8EC,IAAA;AA9EY,gEAA0B","file":"data/VersionPolicyConfiguration.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as fsx from 'fs-extra';\r\nimport { JsonFile, JsonSchema } from '@microsoft/node-core-library';\r\n\r\nimport { VersionPolicy, BumpType } from './VersionPolicy';\r\n\r\n/**\r\n * @alpha\r\n */\r\nexport interface IVersionPolicyJson {\r\n  policyName: string;\r\n  definitionName: string;\r\n}\r\n\r\n/**\r\n * @alpha\r\n */\r\nexport interface ILockStepVersionJson extends IVersionPolicyJson {\r\n  version: string;\r\n  nextBump: string;\r\n}\r\n\r\n/**\r\n * @alpha\r\n */\r\nexport interface IIndividualVersionJson extends IVersionPolicyJson {\r\n  lockedMajor?: number;\r\n}\r\n\r\n/**\r\n * @alpha\r\n */\r\nexport class VersionPolicyConfiguration {\r\n  private static _jsonSchema: JsonSchema = JsonSchema.fromFile(path.join(__dirname, '../version-policies.schema.json'));\r\n\r\n  private _versionPolicies: Map<string, VersionPolicy>;\r\n\r\n  public constructor(private _jsonFileName: string) {\r\n    this._versionPolicies = new Map<string, VersionPolicy>();\r\n    this._loadFile();\r\n  }\r\n\r\n  /**\r\n   * Gets the version policy by its name.\r\n   * Throws error if the version policy is not found.\r\n   * @param policyName - Name of the version policy\r\n   */\r\n  public getVersionPolicy(policyName: string): VersionPolicy {\r\n    const policy: VersionPolicy = this._versionPolicies.get(policyName);\r\n    if (!policy) {\r\n      throw new Error(`Failed to find version policy by name \\'${policyName}\\'`);\r\n    }\r\n    return policy;\r\n  }\r\n\r\n  /**\r\n   * Gets all the version policies\r\n   */\r\n  public get versionPolicies(): Map<string, VersionPolicy> {\r\n    return this._versionPolicies;\r\n  }\r\n\r\n  /**\r\n   * Bumps up versions for the specified version policy or all version policies\r\n   *\r\n   * @param versionPolicyName - version policy name\r\n   * @param bumpType - bump type to override what policy has defined.\r\n   * @param identifier - prerelease identifier to override what policy has defined.\r\n   * @param shouldCommit - should save to disk\r\n   */\r\n  public bump(versionPolicyName?: string,\r\n    bumpType?: BumpType,\r\n    identifier?: string,\r\n    shouldCommit?: boolean\r\n  ): void {\r\n    if (versionPolicyName) {\r\n      const policy: VersionPolicy = this.versionPolicies.get(versionPolicyName);\r\n      if (policy) {\r\n        policy.bump(bumpType, identifier);\r\n      }\r\n    } else {\r\n      this.versionPolicies.forEach((versionPolicy) => {\r\n        if (versionPolicy) {\r\n          versionPolicy.bump(bumpType, identifier);\r\n        }\r\n      });\r\n    }\r\n    const versionPolicyJson: IVersionPolicyJson[] = [];\r\n    this.versionPolicies.forEach((versionPolicy) => {\r\n      versionPolicyJson.push(versionPolicy.json);\r\n    });\r\n    if (shouldCommit) {\r\n      JsonFile.save(versionPolicyJson, this._jsonFileName);\r\n    }\r\n  }\r\n\r\n  private _loadFile(): void {\r\n    if (!fsx.existsSync(this._jsonFileName)) {\r\n      return;\r\n    }\r\n    const versionPolicyJson: IVersionPolicyJson[] = JsonFile.loadAndValidate(this._jsonFileName,\r\n      VersionPolicyConfiguration._jsonSchema);\r\n\r\n    versionPolicyJson.forEach(policyJson => {\r\n      const policy: VersionPolicy = VersionPolicy.load(policyJson);\r\n      if (policy) {\r\n        this._versionPolicies.set(policy.policyName, policy);\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}