"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fsx = require("fs-extra");
var node_core_library_1 = require("@microsoft/node-core-library");
var VersionPolicy_1 = require("./VersionPolicy");
/**
 * @alpha
 */
var VersionPolicyConfiguration = (function () {
    function VersionPolicyConfiguration(_jsonFileName) {
        this._jsonFileName = _jsonFileName;
        this._versionPolicies = new Map();
        this._loadFile();
    }
    /**
     * Gets the version policy by its name.
     * Throws error if the version policy is not found.
     * @param policyName - Name of the version policy
     */
    VersionPolicyConfiguration.prototype.getVersionPolicy = function (policyName) {
        var policy = this._versionPolicies.get(policyName);
        if (!policy) {
            throw new Error("Failed to find version policy by name '" + policyName + "'");
        }
        return policy;
    };
    Object.defineProperty(VersionPolicyConfiguration.prototype, "versionPolicies", {
        /**
         * Gets all the version policies
         */
        get: function () {
            return this._versionPolicies;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Bumps up versions for the specified version policy or all version policies
     *
     * @param versionPolicyName - version policy name
     * @param bumpType - bump type to override what policy has defined.
     * @param identifier - prerelease identifier to override what policy has defined.
     * @param shouldCommit - should save to disk
     */
    VersionPolicyConfiguration.prototype.bump = function (versionPolicyName, bumpType, identifier, shouldCommit) {
        if (versionPolicyName) {
            var policy = this.versionPolicies.get(versionPolicyName);
            if (policy) {
                policy.bump(bumpType, identifier);
            }
        }
        else {
            this.versionPolicies.forEach(function (versionPolicy) {
                if (versionPolicy) {
                    versionPolicy.bump(bumpType, identifier);
                }
            });
        }
        var versionPolicyJson = [];
        this.versionPolicies.forEach(function (versionPolicy) {
            versionPolicyJson.push(versionPolicy.json);
        });
        if (shouldCommit) {
            node_core_library_1.JsonFile.save(versionPolicyJson, this._jsonFileName);
        }
    };
    VersionPolicyConfiguration.prototype._loadFile = function () {
        var _this = this;
        if (!fsx.existsSync(this._jsonFileName)) {
            return;
        }
        var versionPolicyJson = node_core_library_1.JsonFile.loadAndValidate(this._jsonFileName, VersionPolicyConfiguration._jsonSchema);
        versionPolicyJson.forEach(function (policyJson) {
            var policy = VersionPolicy_1.VersionPolicy.load(policyJson);
            if (policy) {
                _this._versionPolicies.set(policy.policyName, policy);
            }
        });
    };
    VersionPolicyConfiguration._jsonSchema = node_core_library_1.JsonSchema.fromFile(path.join(__dirname, '../version-policies.schema.json'));
    return VersionPolicyConfiguration;
}());
exports.VersionPolicyConfiguration = VersionPolicyConfiguration;

//# sourceMappingURL=VersionPolicyConfiguration.js.map
