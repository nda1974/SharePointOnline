{"version":3,"sources":["data/VersionPolicy.ts"],"names":[],"mappings":"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","file":"data/VersionPolicy.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { cloneDeep } from 'lodash';\r\nimport * as semver from 'semver';\r\n\r\nimport {\r\n  IVersionPolicyJson,\r\n  ILockStepVersionJson,\r\n  IIndividualVersionJson\r\n} from './VersionPolicyConfiguration';\r\n\r\nimport IPackageJson from '../utilities/IPackageJson';\r\n\r\n/**\r\n * Type of version bumps\r\n * @alpha\r\n */\r\nexport enum BumpType {\r\n  // No version bump\r\n  'none',\r\n  // Prerelease version bump\r\n  'prerelease',\r\n  // Patch version bump\r\n  'patch',\r\n  // Preminor version bump\r\n  'preminor',\r\n  // Minor version bump\r\n  'minor',\r\n  // Major version bump\r\n  'major'\r\n}\r\n\r\n/**\r\n * Version policy base type names\r\n * @alpha\r\n */\r\nexport enum VersionPolicyDefinitionName {\r\n  'lockStepVersion',\r\n  'individualVersion'\r\n}\r\n\r\n/**\r\n * This is the base class for version policy which controls how versions get bumped.\r\n * @alpha\r\n */\r\nexport abstract class VersionPolicy {\r\n  private _policyName: string;\r\n  private _definitionName: VersionPolicyDefinitionName;\r\n\r\n  /**\r\n   * Loads from version policy json\r\n   *\r\n   * @param versionPolicyJson - version policy Json\r\n   */\r\n  public static load(versionPolicyJson: IVersionPolicyJson): VersionPolicy {\r\n    const definition: VersionPolicyDefinitionName = VersionPolicyDefinitionName[versionPolicyJson.definitionName];\r\n    if (definition === VersionPolicyDefinitionName.lockStepVersion) {\r\n       // tslint:disable-next-line:no-use-before-declare\r\n      return new LockStepVersionPolicy(versionPolicyJson as ILockStepVersionJson);\r\n    } else if (definition === VersionPolicyDefinitionName.individualVersion) {\r\n      // tslint:disable-next-line:no-use-before-declare\r\n      return new IndividualVersionPolicy(versionPolicyJson as IIndividualVersionJson);\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  constructor(versionPolicyJson: IVersionPolicyJson) {\r\n    this._policyName = versionPolicyJson.policyName;\r\n    this._definitionName = VersionPolicyDefinitionName[versionPolicyJson.definitionName];\r\n  }\r\n\r\n  /**\r\n   * Version policy name\r\n   */\r\n  public get policyName(): string {\r\n    return this._policyName;\r\n  }\r\n\r\n  /**\r\n   * Version policy definition name\r\n   */\r\n  public get definitionName(): VersionPolicyDefinitionName {\r\n    return this._definitionName;\r\n  }\r\n\r\n  /**\r\n   * Returns an updated package json that satisfies the policy.\r\n   *\r\n   * @param project - package json\r\n   */\r\n  public abstract ensure(project: IPackageJson): IPackageJson | undefined;\r\n\r\n  /**\r\n   * Bumps version based on the policy\r\n   *\r\n   * @param bumpType - (optional) override bump type\r\n   * @param identifier - (optional) override prerelease Id\r\n   */\r\n  public abstract bump(bumpType?: BumpType, identifier?: string): void;\r\n\r\n  /**\r\n   * Serialized json for the policy\r\n   */\r\n  public abstract get json(): IVersionPolicyJson;\r\n\r\n  /**\r\n   * Validates the specified version and throws if the version does not satisfy the policy.\r\n   *\r\n   * @param versionString - version string\r\n   * @param packageName - package name\r\n   */\r\n  public abstract validate(versionString: string, packageName: string): void;\r\n}\r\n\r\n/**\r\n * This policy indicates all related projects should use the same version.\r\n * @alpha\r\n */\r\nexport class LockStepVersionPolicy extends VersionPolicy {\r\n  private _version: semver.SemVer;\r\n  // nextBump is probably not needed. It can be prerelease only.\r\n  // Other types of bumps can be passed in as a parameter to bump method, so can identifier.\r\n  private _nextBump: BumpType;\r\n\r\n  constructor(versionPolicyJson: ILockStepVersionJson) {\r\n    super(versionPolicyJson);\r\n    this._version = new semver.SemVer(versionPolicyJson.version);\r\n    this._nextBump = BumpType[versionPolicyJson.nextBump];\r\n  }\r\n\r\n  /**\r\n   * The value of the lockstep version\r\n   */\r\n  public get version(): semver.SemVer {\r\n    return this._version;\r\n  }\r\n\r\n  /**\r\n   * The type of bump for next bump.\r\n   */\r\n  public get nextBump(): BumpType {\r\n    return this._nextBump;\r\n  }\r\n\r\n  /**\r\n   * Serialized json for this policy\r\n   */\r\n  public get json(): ILockStepVersionJson {\r\n    return {\r\n      policyName: this.policyName,\r\n      definitionName: VersionPolicyDefinitionName[this.definitionName],\r\n      version: this.version.format(),\r\n      nextBump: BumpType[this.nextBump]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns an updated package json that satisfies the version policy.\r\n   *\r\n   * @param project - input package json\r\n   */\r\n  public ensure(project: IPackageJson): IPackageJson | undefined {\r\n    const packageVersion: semver.SemVer = new semver.SemVer(project.version);\r\n    const compareResult: number = packageVersion.compare(this._version);\r\n    if (compareResult === 0) {\r\n      return undefined;\r\n    } else if (compareResult > 0) {\r\n      const errorMessage: string = `Version ${project.version} in package ${project.name}`\r\n        + ` is higher than locked version ${this._version.format()}.`;\r\n      throw new Error(errorMessage);\r\n    }\r\n    return this._updatePackageVersion(project, this._version);\r\n  }\r\n\r\n  /**\r\n   * Bumps the version of the lockstep policy\r\n   *\r\n   * @param bumpType - Overwrite bump type in version-policy.json with the provided value.\r\n   * @param identifier - Prerelease identifier if bump type is prerelease.\r\n   */\r\n  public bump(bumpType?: BumpType, identifier?: string): void {\r\n    this.version.inc(this._getReleaseType(bumpType || this.nextBump), identifier);\r\n  }\r\n\r\n  /**\r\n   * Validates the specified version and throws if the version does not satisfy lockstep version.\r\n   *\r\n   * @param versionString - version string\r\n   * @param packageName - package name\r\n   */\r\n  public validate(versionString: string, packageName: string): void {\r\n    const versionToTest: semver.SemVer = new semver.SemVer(versionString, false);\r\n    if (this.version.compare(versionToTest) !== 0) {\r\n      throw new Error(`Invalid version ${versionString} in ${packageName}`);\r\n    }\r\n  }\r\n\r\n  private _updatePackageVersion(project: IPackageJson, newVersion: semver.SemVer): IPackageJson {\r\n    const updatedProject: IPackageJson = cloneDeep(project);\r\n    updatedProject.version = newVersion.format();\r\n    return updatedProject;\r\n  }\r\n\r\n  private _getReleaseType(bumpType: BumpType): semver.ReleaseType {\r\n    // Eventually we should just use ReleaseType and get rid of bump type.\r\n    return BumpType[bumpType] as semver.ReleaseType;\r\n  }\r\n}\r\n\r\n/**\r\n * This policy indicates all related projects get version bump driven by their own changes.\r\n * @alpha\r\n */\r\nexport class IndividualVersionPolicy extends VersionPolicy {\r\n  private _lockedMajor: number | undefined;\r\n\r\n  constructor(versionPolicyJson: IIndividualVersionJson) {\r\n    super(versionPolicyJson);\r\n    this._lockedMajor = versionPolicyJson.lockedMajor;\r\n  }\r\n\r\n  /**\r\n   * The major version that has been locked\r\n   */\r\n  public get lockedMajor(): number | undefined {\r\n    return this._lockedMajor;\r\n  }\r\n\r\n  /**\r\n   * Serialized json for this policy\r\n   */\r\n  public get json(): IIndividualVersionJson {\r\n    return {\r\n      policyName: this.policyName,\r\n      definitionName: VersionPolicyDefinitionName[this.definitionName],\r\n      lockedMajor: this.lockedMajor\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns an updated package json that satisfies the version policy.\r\n   *\r\n   * @param project - input package json\r\n   */\r\n  public ensure(project: IPackageJson): IPackageJson | undefined {\r\n    if (this.lockedMajor) {\r\n      const version: semver.SemVer = new semver.SemVer(project.version);\r\n      if (version.major < this._lockedMajor) {\r\n        const updatedProject: IPackageJson = cloneDeep(project);\r\n        updatedProject.version = `${this._lockedMajor}.0.0`;\r\n        return updatedProject;\r\n      } else if (version.major > this._lockedMajor) {\r\n        const errorMessage: string = `Version ${project.version} in package ${project.name}`\r\n          + ` is higher than locked major version ${this._lockedMajor}.`;\r\n        throw new Error(errorMessage);\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Bumps version.\r\n   * Individual version policy lets change files drive version bump. This method currently does not do anything.\r\n   *\r\n   * @param bumpType - bump type\r\n   * @param identifier - prerelease id\r\n   */\r\n  public bump(bumpType?: BumpType, identifier?: string): void {\r\n    // individual version policy lets change files drive version bump.\r\n  }\r\n\r\n  /**\r\n   * Validates the specified version and throws if the version does not satisfy the policy.\r\n   *\r\n   * @param versionString - version string\r\n   * @param packageName - package name\r\n   */\r\n  public validate(versionString: string, packageName: string): void {\r\n    const versionToTest: semver.SemVer = new semver.SemVer(versionString, false);\r\n    if (this._lockedMajor !== undefined) {\r\n      if (this._lockedMajor !== versionToTest.major) {\r\n        throw new Error(`Invalid major version ${versionString} in ${packageName}`);\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}