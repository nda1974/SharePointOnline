"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fsx = require("fs-extra");
var PackageJsonLookup_1 = require("./PackageJsonLookup");
/**
 * Implements a unit testing strategy that generates output files, and then
 * compares them against the expected input.  If the files are different, then
 * the test fails.
 *
 * @public
 */
var FileDiffTest = (function () {
    function FileDiffTest() {
    }
    /**
     * Clears the internal file cache.
     * @remarks
     * Call this method if changes have been made to the package.json files on disk.
     */
    FileDiffTest.clearCache = function () {
        this._packageJsonLookup.clearCache();
    };
    /**
     * Sets up a folder in the temp directory where the unit test should write its output files
     * to be diffed.  Any previous contents of the folder will be deleted.
     *
     * @param unitTestDirName - the "__dirname" variable, evaluated in the context of the unit test
     * @param testModule - the name of the class being unit tested; must contain only letters, numbers, and underscores.
     * @returns A fully qualified path of the folder where the unit test should write its output
     */
    FileDiffTest.prepareFolder = function (unitTestDirName, testModule) {
        var packageJsonFolderPath = this._packageJsonLookup.tryGetPackageFolder(unitTestDirName);
        if (packageJsonFolderPath === undefined) {
            throw new Error('Unable to find a package.json in any parent folder of ' + unitTestDirName);
        }
        if (!/^[a-zA-Z0-9_]+$/.test(testModule)) {
            throw new Error('Invalid test module name: ' + testModule);
        }
        var diffTestPath = path.join(packageJsonFolderPath, 'temp', 'diff-tests', testModule);
        fsx.mkdirsSync(diffTestPath);
        fsx.emptyDirSync(diffTestPath);
        return diffTestPath;
    };
    /**
     * Compares the contents of two files, and returns true if they are equivalent.
     * Note that these files are not normally edited by a human; the "equivalence"
     * comparison here is intended to ignore spurious changes that might be introduced
     * by a tool, e.g. Git newline normalization or an editor that strips
     * whitespace when saving.
     */
    FileDiffTest.assertEqual = function (actualFilePath, expectedFilePath) {
        var actualContent = fsx.readFileSync(actualFilePath).toString('utf8');
        var expectedContent = fsx.readFileSync(expectedFilePath).toString('utf8');
        // NOTE: "\s" also matches "\r" and "\n"
        var normalizedActual = FileDiffTest._getNormalizedContent(actualContent);
        var normalizedExpected = FileDiffTest._getNormalizedContent(expectedContent);
        if (normalizedActual !== normalizedExpected) {
            throw new Error('The test output file does not match the expected input:\n'
                + actualFilePath);
        }
    };
    FileDiffTest._getNormalizedContent = function (s) {
        return s.replace(/\r\n/g, '\n').replace(/\r/g, '') // convert to Unix-style newlines
            .replace(/\s+\n/g, '\n') // strip spaces from end of line
            .replace(/\n+$/g, ''); // strip newlines from end of file
    };
    FileDiffTest._packageJsonLookup = new PackageJsonLookup_1.PackageJsonLookup();
    return FileDiffTest;
}());
exports.FileDiffTest = FileDiffTest;

//# sourceMappingURL=FileDiffTest.js.map
