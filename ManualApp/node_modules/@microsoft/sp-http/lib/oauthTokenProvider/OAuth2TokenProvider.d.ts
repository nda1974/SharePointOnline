import { ServiceKey, ServiceScope } from '@microsoft/sp-core-library';
/**
 * This interface represents the object returned from a successful request
 * to the Azure AD for an OAuth2 token.
 * @alpha
 */
export interface IOAuth2Token {
    /**
     * The message returned from Azure AD when a token is successfully retrieved.
     */
    message: string;
    /**
     * The OAuth2 Bearer token used for making fetch requests to other services.
     * https://tools.ietf.org/html/rfc6750
     */
    token: string;
}
/**
 * This class allows a developer to obtain OAuth2 tokens.
 *
 * OAuth2 tokens are used to authenticate the user from the SharePoint page
 * to other services such as PowerBI, Sway, Exchange, Yammer, etc.
 * @alpha
 * @remarks OAuth2TokenProvider is replacing the /_api.SP.OAuth.Token/Acquire endpoint
 * for authentication with ADAL.js. At some point in the near future, when Azure AD v2.0
 * can support the same scenarios as the original version, we will switch to MSAL.
 */
export default class OAuth2TokenProvider {
    /**
     * The service key for OAuth2TokenProvider.
     */
    static readonly serviceKey: ServiceKey<OAuth2TokenProvider>;
    private static _authContext;
    private _azureInstanceUrl;
    private _azureTenantId;
    private _isInitialized;
    private _displayCallHandler;
    private _loadAndConfigureAdalJsModulePromise;
    private _loginUserPromise;
    constructor(serviceScope: ServiceScope);
    /**
     * The initialize function should be called before the application/components
     * have a chance to make a OAuth2TokenProvider request.
     */
    initialize(azureInstanceUrl: string, azureTenantId: string): void;
    /**
       * Fetches the oauth token for a resource if the user that's currently logged in has
       * access to that resource.
       *
       * The OAuth token SHOULD NOT be cached by the caller since it is already cached by the method
       * itself.
       *
       * An example of a resourceEndpoint would be https://sdfpilot.outlook.com
       *
       * @param resourceEndpoint - the resource for which the token should be obtained
       * @returns A promise that will be fullfiled with the token or that will reject
       *          with an error message
       */
    getOAuthToken(resourceEndpoint: string): Promise<IOAuth2Token>;
    private _acquireTokenPromise(resourceEndpoint);
    private _loadAndConfigureAdalJsModule();
    private _configureAdalJs(adalJsModule);
    /**
     * Calls _authContext.login() and wires up the displayCall callback.  Returns true if the
     * callback was called.
     */
    private _startLogin(showWindowCallback);
    private _loginUser();
    private _waitForWindowToClose(popupWindow, args);
}
