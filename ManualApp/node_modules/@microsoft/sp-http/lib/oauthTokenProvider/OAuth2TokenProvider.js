"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = require("@microsoft/sp-core-library");
var OAuth2Constants_1 = require("./OAuth2Constants");
var AdalErrorStrings_1 = require("./AdalErrorStrings");
var OAuth2TokenProvider = (function () {
    function OAuth2TokenProvider(serviceScope) {
        this._displayCallHandler = undefined;
        this._loadAndConfigureAdalJsModulePromise = undefined;
        this._loginUserPromise = undefined;
    }
    OAuth2TokenProvider.prototype.initialize = function (azureInstanceUrl, azureTenantId) {
        sp_core_library_1.Validate.isNonemptyString(azureInstanceUrl, 'azureInstanceUrl');
        sp_core_library_1.Validate.isNonemptyString(azureTenantId, 'azureTenantId');
        this._azureInstanceUrl = azureInstanceUrl;
        this._azureTenantId = azureTenantId;
        this._isInitialized = true;
    };
    OAuth2TokenProvider.prototype.getOAuthToken = function (resourceEndpoint) {
        var _this = this;
        if (!this._isInitialized) {
            return Promise.reject(new Error('This operation cannot be performed until the OAuth2TokenProvider is initialized.'));
        }
        if (!sp_core_library_1._SPFlight.isEnabled(375 )) {
            return Promise.reject(new Error('OAuth2TokenProvider is not supported.'));
        }
        return this._loginUser().then(function () { return _this._acquireTokenPromise(resourceEndpoint); });
    };
    OAuth2TokenProvider.prototype._acquireTokenPromise = function (resourceEndpoint) {
        return new Promise(function () {
            OAuth2TokenProvider._authContext.acquireToken(resourceEndpoint, function (message, token) {
                if (message === AdalErrorStrings_1.default.tokenRenewalFailureError) {
                    return Promise.reject(new Error(message));
                }
                return Promise.resolve({
                    message: message,
                    token: token
                });
            });
        });
    };
    OAuth2TokenProvider.prototype._loadAndConfigureAdalJsModule = function () {
        var _this = this;
        if (!this._loadAndConfigureAdalJsModulePromise) {
            this._loadAndConfigureAdalJsModulePromise = new Promise(function (resolve, reject) {
                try {
                    require.ensure(['adal-angular'], function (require) {
                        resolve(require('adal-angular'));
                    }, 'sp-http-adal');
                }
                catch (e) {
                    reject(e);
                }
            }).then(function (adalJsModule) {
                _this._configureAdalJs(adalJsModule);
                return adalJsModule;
            });
        }
        return this._loadAndConfigureAdalJsModulePromise;
    };
    OAuth2TokenProvider.prototype._configureAdalJs = function (adalJsModule) {
        var _this = this;
        var redirectUri = window.location.origin + '/_forms/singlesignon.aspx';
        OAuth2TokenProvider._authContext = adalJsModule.inject({
            clientId: OAuth2Constants_1.default.SPO_WEB_APP_PRINCIPAL_ID,
            redirectUri: redirectUri,
            instance: this._azureInstanceUrl + '/',
            tenant: this._azureTenantId,
            popUp: true,
            displayCall: function (urlNavigate) {
                if (_this._displayCallHandler) {
                    _this._displayCallHandler({
                        urlNavigate: urlNavigate,
                        redirectUri: redirectUri
                    });
                }
            }
        });
    };
    OAuth2TokenProvider.prototype._startLogin = function (showWindowCallback) {
        if (this._displayCallHandler) {
            return; 
        }
        this._displayCallHandler = function (args) {
            showWindowCallback(args);
        };
        OAuth2TokenProvider._authContext._loginInProgress = false;
        OAuth2TokenProvider._authContext.login();
        this._displayCallHandler = undefined;
        return;
    };
    OAuth2TokenProvider.prototype._loginUser = function () {
        var _this = this;
        if (this._loginUserPromise) {
            return this._loginUserPromise;
        }
        return this._loadAndConfigureAdalJsModule()
            .then(function (adalJsModule) {
            sp_core_library_1.Validate.isNotNullOrUndefined(OAuth2TokenProvider._authContext, 'AuthenticationContext');
            if (OAuth2TokenProvider._authContext.getCachedToken(OAuth2Constants_1.default.SPO_WEB_APP_PRINCIPAL_ID)) {
                OAuth2TokenProvider._authContext.getCachedUser();
                return; 
            }
            else {
                _this._startLogin(function (args) {
                    var popupWindow = window.open(args.urlNavigate, 'login', 'width=483, height=600');
                    if (!popupWindow) {
                        throw new Error('Failed to open pop-up window');
                    }
                    if (popupWindow.closed === undefined) {
                        throw new Error('This operation requires the popupWindow.closed property, which is not supported in this browser');
                    }
                    if (popupWindow.focus) {
                        popupWindow.focus();
                    }
                    _this._loginUserPromise = _this._waitForWindowToClose(popupWindow, args)
                        .then(function () {
                        _this._loginUserPromise = undefined;
                    }).catch(function (e) {
                        _this._loginUserPromise = undefined;
                        throw e;
                    });
                });
                if (!_this._loginUserPromise) {
                    throw new Error('Should be impossible');
                }
                return _this._loginUserPromise;
            }
        });
    };
    OAuth2TokenProvider.prototype._waitForWindowToClose = function (popupWindow, args) {
        return new Promise(function (resolve, reject) {
            var WINDOW_POLL_MS = 100;
            try {
                var pollTimer_1 = window.setInterval(function () {
                    if (popupWindow.closed) {
                        window.clearInterval(pollTimer_1);
                        reject(new Error('Window closed without authenticating'));
                        return;
                    }
                    if (popupWindow.document.URL.indexOf(args.redirectUri) !== -1) {
                        window.clearInterval(pollTimer_1);
                        OAuth2TokenProvider._authContext.handleWindowCallback(popupWindow.location.hash);
                        popupWindow.close();
                        resolve();
                        return;
                    }
                }, WINDOW_POLL_MS);
            }
            catch (e) {
                reject(e);
            }
        });
    };
    OAuth2TokenProvider.serviceKey = sp_core_library_1.ServiceKey.create('sp-http:OAuth2TokenProvider', OAuth2TokenProvider);
    return OAuth2TokenProvider;
}());
exports.default = OAuth2TokenProvider;
