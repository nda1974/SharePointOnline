"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_loader_1 = require("@microsoft/sp-loader");
var ExtensionManager_1 = require("../ExtensionManager");
var MockExtensions_1 = require("./MockExtensions");
var ExtensionContext_1 = require("../ExtensionContext");
var componentLoader = undefined;
var componentId = '44f689f3-e0a4-4d86-bafd-34abe5de845a';
var manifest = {
    id: componentId,
    alias: 'componentAlias'
};
function createExtensionManager(type) {
    var serviceScope = sp_core_library_1.ServiceScope.startNewRoot();
    serviceScope.finish();
    return new ExtensionManager_1.default(serviceScope, type);
}
function failTest(done, error) {
    if (error) {
        console.error(error.message);
    }
    chai_1.assert.fail();
    componentLoader.restore();
    done();
}
function successTest(done) {
    componentLoader.verify();
    componentLoader.restore();
    done();
}
describe('ExtensionManager', function () {
    beforeEach(function () {
        componentLoader = sinon.mock(sp_loader_1.SPComponentLoader);
    });
    it('createExtension works properly', function (done) {
        var extensionManager = createExtensionManager(MockExtensions_1.MockExtension);
        componentLoader.expects('tryGetManifestById').once().withArgs(componentId).returns(manifest);
        componentLoader.expects('loadComponent').once().withArgs(manifest).returns(new Promise(function (resolve) { return resolve({ default: MockExtensions_1.MockExtension }); }));
        try {
            var promise = extensionManager.createExtension(componentId, undefined, function (ecp) { return new ExtensionContext_1.default(ecp); });
            promise.then(function (loadedExtension) {
                chai_1.assert.instanceOf(loadedExtension, MockExtensions_1.MockExtension);
                successTest(done);
            }).catch(function (error) {
                failTest(done, error);
            });
        }
        catch (error) {
            failTest(done, error);
        }
    });
    it('createExtension fails with manifest not found', function (done) {
        var extensionManager = createExtensionManager(MockExtensions_1.MockExtension);
        componentLoader.expects('tryGetManifestById').once().withArgs(componentId).returns(undefined);
        try {
            var promise = extensionManager.createExtension(componentId, undefined, function (ecp) { return new ExtensionContext_1.default(ecp); });
            promise.then(function (loadedExtension) {
                failTest(done);
            }).catch(function (error) {
                successTest(done);
            });
        }
        catch (error) {
            failTest(done, error);
        }
    });
    it('createExtension fails if component does not have extensions', function (done) {
        var extensionManager = createExtensionManager(MockExtensions_1.MockExtension);
        componentLoader.expects('tryGetManifestById').once().withArgs(componentId).returns(manifest);
        componentLoader.expects('loadComponent').once().withArgs(manifest).returns(new Promise(function (resolve) { return resolve({ default: MockExtensions_1.MockNotExtension }); }));
        try {
            var promise = extensionManager.createExtension(componentId, undefined, function (ecp) { return new ExtensionContext_1.default(ecp); });
            promise.then(function (loadedExtension) {
                failTest(done);
            }).catch(function (error) {
                successTest(done);
            });
        }
        catch (error) {
            failTest(done, error);
        }
    });
    it('createExtension fails if component has a wrong type of extension', function (done) {
        var extensionManager = createExtensionManager(MockExtensions_1.MockExtension);
        componentLoader.expects('tryGetManifestById').once().withArgs(componentId).returns(manifest);
        componentLoader.expects('loadComponent').once().withArgs(manifest).returns(new Promise(function (resolve) { return resolve({ default: MockExtensions_1.MockExtension2 }); }));
        try {
            var promise = extensionManager.createExtension(componentId, undefined, function (ecp) { return new ExtensionContext_1.default(ecp); });
            promise.then(function (loadedExtension) {
                failTest(done);
            }).catch(function (error) {
                successTest(done);
            });
        }
        catch (error) {
            failTest(done, error);
        }
    });
    it('createExtension fails if extension onInit throws', function (done) {
        var extensionManager = createExtensionManager(MockExtensions_1.MockBadExtension);
        componentLoader.expects('tryGetManifestById').once().withArgs(componentId).returns(manifest);
        componentLoader.expects('loadComponent').once().withArgs(manifest).returns(new Promise(function (resolve) { return resolve({ default: MockExtensions_1.MockBadExtension }); }));
        try {
            var promise = extensionManager.createExtension(componentId, undefined, function (ecp) { return new ExtensionContext_1.default(ecp); });
            promise.then(function (loadedExtension) {
                failTest(done);
            }).catch(function (error) {
                console.log(error.message);
                successTest(done);
            });
        }
        catch (error) {
            failTest(done, error);
        }
    });
    it('createExtension fails if extension onInit rejects the promise', function (done) {
        var extensionManager = createExtensionManager(MockExtensions_1.MockBadExtensionAsync);
        componentLoader.expects('tryGetManifestById').once().withArgs(componentId).returns(manifest);
        componentLoader.expects('loadComponent').once().withArgs(manifest).returns(new Promise(function (resolve) { return resolve({ default: MockExtensions_1.MockBadExtensionAsync }); }));
        try {
            var promise = extensionManager.createExtension(componentId, undefined, function (ecp) { return new ExtensionContext_1.default(ecp); });
            promise.then(function (loadedExtension) {
                failTest(done);
            }).catch(function (error) {
                successTest(done);
            });
        }
        catch (error) {
            failTest(done, error);
        }
    });
    it('createExtension fails if loader fails to load', function (done) {
        var extensionManager = createExtensionManager(MockExtensions_1.MockExtension);
        componentLoader.expects('tryGetManifestById').once().withArgs(componentId).returns(manifest);
        componentLoader.expects('loadComponent').once().withArgs(manifest).returns(new Promise(function (resolve, reject) { return reject(new Error()); }));
        try {
            var promise = extensionManager.createExtension(componentId, undefined, function (ecp) { return new ExtensionContext_1.default(ecp); });
            promise.then(function (loadedExtension) {
                failTest(done);
            }).catch(function (error) {
                successTest(done);
            });
        }
        catch (error) {
            failTest(done, error);
        }
    });
    it('createExtension fails if loader throws a sync error', function (done) {
        var extensionManager = createExtensionManager(MockExtensions_1.MockExtension);
        componentLoader.expects('tryGetManifestById').once().withArgs(componentId).returns(manifest);
        componentLoader.expects('loadComponent').once().withArgs(manifest).throws(new Error());
        try {
            var promise = extensionManager.createExtension(componentId, undefined, function (ecp) { return new ExtensionContext_1.default(ecp); });
            promise.then(function (loadedExtension) {
                failTest(done);
            }).catch(function (error) {
                successTest(done);
            });
        }
        catch (error) {
            failTest(done, error);
        }
    });
});
