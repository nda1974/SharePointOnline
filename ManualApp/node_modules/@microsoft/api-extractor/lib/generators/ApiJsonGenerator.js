"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var os = require("os");
var path = require("path");
var ts = require("typescript");
var node_core_library_1 = require("@microsoft/node-core-library");
var AstItem_1 = require("../ast/AstItem");
var AstItemVisitor_1 = require("./AstItemVisitor");
var AstMember_1 = require("../ast/AstMember");
var ReleaseTag_1 = require("../aedoc/ReleaseTag");
var ApiJsonFile_1 = require("../api/ApiJsonFile");
/**
 * For a library such as "example-package", ApiFileGenerator generates the "example-package.api.json"
 * file which represents the API surface for that package.  This file should be published as part
 * of the library's NPM package.  API Extractor will read this file later when it is analyzing
 * another project that consumes the library.  (Otherwise, API Extractor would have to re-analyze all
 * the *.d.ts files, which would be bad because the compiler definitions might not be available for
 * a published package, or the results of the analysis might be different somehow.)  Documentation
 * tools such as api-documenter can also use the *.api.json files.
 *
 * @public
 */
var ApiJsonGenerator = (function (_super) {
    __extends(ApiJsonGenerator, _super);
    function ApiJsonGenerator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.jsonOutput = {};
        return _this;
    }
    Object.defineProperty(ApiJsonGenerator, "jsonSchema", {
        /**
         * The JSON schema for the *.api.json file format.
         */
        get: function () {
            if (!ApiJsonGenerator._jsonSchema) {
                ApiJsonGenerator._jsonSchema = node_core_library_1.JsonSchema.fromFile(path.join(__dirname, '../api/api-json.schema.json'));
            }
            return ApiJsonGenerator._jsonSchema;
        },
        enumerable: true,
        configurable: true
    });
    ApiJsonGenerator.prototype.writeJsonFile = function (reportFilename, extractor) {
        this.visit(extractor.package, this.jsonOutput);
        // Write the output before validating the schema, so we can debug it
        node_core_library_1.JsonFile.save(this.jsonOutput, reportFilename);
        // Validate that the output conforms to our JSON schema
        ApiJsonGenerator.jsonSchema.validateObjectWithCallback(this.jsonOutput, function (errorInfo) {
            var errorMessage = path.basename(reportFilename)
                + " does not conform to the expected schema -- please report this API Extractor bug:"
                + os.EOL + errorInfo.details;
            console.log(os.EOL + 'ERROR: ' + errorMessage + os.EOL + os.EOL);
            throw new Error(errorMessage);
        });
    };
    // @override
    ApiJsonGenerator.prototype.visit = function (astItem, refObject) {
        switch (astItem.documentation.releaseTag) {
            case ReleaseTag_1.ReleaseTag.None:
            case ReleaseTag_1.ReleaseTag.Beta:
            case ReleaseTag_1.ReleaseTag.Public:
                break;
            default:
                return; // skip @alpha and @internal definitions
        }
        _super.prototype.visit.call(this, astItem, refObject);
    };
    ApiJsonGenerator.prototype.visitAstStructuredType = function (astStructuredType, refObject) {
        if (!astStructuredType.supportedName) {
            return;
        }
        var kind = astStructuredType.kind === AstItem_1.AstItemKind.Class ? ApiJsonFile_1.default.convertKindToJson(AstItem_1.AstItemKind.Class) :
            astStructuredType.kind === AstItem_1.AstItemKind.Interface ?
                ApiJsonFile_1.default.convertKindToJson(AstItem_1.AstItemKind.Interface) : '';
        var structureNode = {
            kind: kind,
            extends: astStructuredType.extends || '',
            implements: astStructuredType.implements || '',
            typeParameters: astStructuredType.typeParameters || [],
            deprecatedMessage: astStructuredType.documentation.deprecatedMessage || [],
            summary: astStructuredType.documentation.summary || [],
            remarks: astStructuredType.documentation.remarks || [],
            isBeta: astStructuredType.documentation.releaseTag === ReleaseTag_1.ReleaseTag.Beta
        };
        refObject[astStructuredType.name] = structureNode;
        ApiJsonGenerator._methodCounter = 0;
        var members = astStructuredType.getSortedMemberItems();
        if (members && members.length) {
            var membersNode = {};
            structureNode[ApiJsonGenerator._MEMBERS_KEY] = membersNode;
            for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {
                var astItem = members_1[_i];
                this.visit(astItem, membersNode);
            }
        }
    };
    ApiJsonGenerator.prototype.visitAstEnum = function (astEnum, refObject) {
        if (!astEnum.supportedName) {
            return;
        }
        var valuesNode = {};
        var enumNode = {
            kind: ApiJsonFile_1.default.convertKindToJson(astEnum.kind),
            values: valuesNode,
            deprecatedMessage: astEnum.documentation.deprecatedMessage || [],
            summary: astEnum.documentation.summary || [],
            remarks: astEnum.documentation.remarks || [],
            isBeta: astEnum.documentation.releaseTag === ReleaseTag_1.ReleaseTag.Beta
        };
        refObject[astEnum.name] = enumNode;
        for (var _i = 0, _a = astEnum.getSortedMemberItems(); _i < _a.length; _i++) {
            var astItem = _a[_i];
            this.visit(astItem, valuesNode);
        }
    };
    ApiJsonGenerator.prototype.visitAstEnumValue = function (astEnumValue, refObject) {
        if (!astEnumValue.supportedName) {
            return;
        }
        var declaration = astEnumValue.getDeclaration();
        var firstToken = declaration ? declaration.getFirstToken() : undefined;
        var lastToken = declaration ? declaration.getLastToken() : undefined;
        var value = lastToken && lastToken !== firstToken ? lastToken.getText() : '';
        refObject[astEnumValue.name] = {
            kind: ApiJsonFile_1.default.convertKindToJson(astEnumValue.kind),
            value: value,
            deprecatedMessage: astEnumValue.documentation.deprecatedMessage || [],
            summary: astEnumValue.documentation.summary || [],
            remarks: astEnumValue.documentation.remarks || [],
            isBeta: astEnumValue.documentation.releaseTag === ReleaseTag_1.ReleaseTag.Beta
        };
    };
    ApiJsonGenerator.prototype.visitAstFunction = function (astFunction, refObject) {
        if (!astFunction.supportedName) {
            return;
        }
        for (var _i = 0, _a = astFunction.params; _i < _a.length; _i++) {
            var param = _a[_i];
            this.visitApiParam(param, astFunction.documentation.parameters[param.name]);
        }
        var returnValueNode = {
            type: astFunction.returnType,
            description: astFunction.documentation.returnsMessage
        };
        var newNode = {
            kind: ApiJsonFile_1.default.convertKindToJson(astFunction.kind),
            returnValue: returnValueNode,
            parameters: astFunction.documentation.parameters,
            deprecatedMessage: astFunction.documentation.deprecatedMessage || [],
            summary: astFunction.documentation.summary || [],
            remarks: astFunction.documentation.remarks || [],
            isBeta: astFunction.documentation.releaseTag === ReleaseTag_1.ReleaseTag.Beta
        };
        refObject[astFunction.name] = newNode;
    };
    ApiJsonGenerator.prototype.visitAstPackage = function (astPackage, refObject) {
        /* tslint:disable:no-string-literal */
        refObject['kind'] = ApiJsonFile_1.default.convertKindToJson(astPackage.kind);
        refObject['name'] = astPackage.name;
        refObject['summary'] = astPackage.documentation.summary;
        refObject['remarks'] = astPackage.documentation.remarks;
        /* tslint:enable:no-string-literal */
        var membersNode = {};
        refObject[ApiJsonGenerator._EXPORTS_KEY] = membersNode;
        for (var _i = 0, _a = astPackage.getSortedMemberItems(); _i < _a.length; _i++) {
            var astItem = _a[_i];
            this.visit(astItem, membersNode);
        }
    };
    ApiJsonGenerator.prototype.visitAstNamespace = function (astNamespace, refObject) {
        if (!astNamespace.supportedName) {
            return;
        }
        var membersNode = {};
        for (var _i = 0, _a = astNamespace.getSortedMemberItems(); _i < _a.length; _i++) {
            var astItem = _a[_i];
            this.visit(astItem, membersNode);
        }
        var newNode = {
            kind: ApiJsonFile_1.default.convertKindToJson(astNamespace.kind),
            deprecatedMessage: astNamespace.documentation.deprecatedMessage || [],
            summary: astNamespace.documentation.summary || [],
            remarks: astNamespace.documentation.remarks || [],
            isBeta: astNamespace.documentation.releaseTag === ReleaseTag_1.ReleaseTag.Beta,
            exports: membersNode
        };
        refObject[astNamespace.name] = newNode;
    };
    ApiJsonGenerator.prototype.visitAstMember = function (astMember, refObject) {
        if (!astMember.supportedName) {
            return;
        }
        refObject[astMember.name] = 'astMember-' + astMember.getDeclaration().kind;
    };
    ApiJsonGenerator.prototype.visitAstProperty = function (astProperty, refObject) {
        if (!astProperty.supportedName) {
            return;
        }
        if (astProperty.getDeclaration().kind === ts.SyntaxKind.SetAccessor) {
            return;
        }
        var newNode = {
            kind: ApiJsonFile_1.default.convertKindToJson(astProperty.kind),
            isOptional: !!astProperty.isOptional,
            isReadOnly: !!astProperty.isReadOnly,
            isStatic: !!astProperty.isStatic,
            type: astProperty.type,
            deprecatedMessage: astProperty.documentation.deprecatedMessage || [],
            summary: astProperty.documentation.summary || [],
            remarks: astProperty.documentation.remarks || [],
            isBeta: astProperty.documentation.releaseTag === ReleaseTag_1.ReleaseTag.Beta
        };
        refObject[astProperty.name] = newNode;
    };
    ApiJsonGenerator.prototype.visitAstModuleVariable = function (astModuleVariable, refObject) {
        var newNode = {
            kind: ApiJsonFile_1.default.convertKindToJson(astModuleVariable.kind),
            type: astModuleVariable.type,
            value: astModuleVariable.value,
            deprecatedMessage: astModuleVariable.documentation.deprecatedMessage || [],
            summary: astModuleVariable.documentation.summary || [],
            remarks: astModuleVariable.documentation.remarks || [],
            isBeta: astModuleVariable.documentation.releaseTag === ReleaseTag_1.ReleaseTag.Beta
        };
        refObject[astModuleVariable.name] = newNode;
    };
    ApiJsonGenerator.prototype.visitAstMethod = function (astMethod, refObject) {
        if (!astMethod.supportedName) {
            return;
        }
        for (var _i = 0, _a = astMethod.params; _i < _a.length; _i++) {
            var param = _a[_i];
            this.visitApiParam(param, astMethod.documentation.parameters[param.name]);
        }
        var newNode;
        if (astMethod.name === '__constructor') {
            newNode = {
                kind: ApiJsonFile_1.default.convertKindToJson(AstItem_1.AstItemKind.Constructor),
                signature: astMethod.getDeclarationLine(),
                parameters: astMethod.documentation.parameters,
                deprecatedMessage: astMethod.documentation.deprecatedMessage || [],
                summary: astMethod.documentation.summary || [],
                remarks: astMethod.documentation.remarks || []
            };
        }
        else {
            var returnValueNode = {
                type: astMethod.returnType,
                description: astMethod.documentation.returnsMessage
            };
            newNode = {
                kind: ApiJsonFile_1.default.convertKindToJson(astMethod.kind),
                signature: astMethod.getDeclarationLine(),
                accessModifier: astMethod.accessModifier ? AstMember_1.ApiAccessModifier[astMethod.accessModifier].toLowerCase() : '',
                isOptional: !!astMethod.isOptional,
                isStatic: !!astMethod.isStatic,
                returnValue: returnValueNode,
                parameters: astMethod.documentation.parameters,
                deprecatedMessage: astMethod.documentation.deprecatedMessage || [],
                summary: astMethod.documentation.summary || [],
                remarks: astMethod.documentation.remarks || [],
                isBeta: astMethod.documentation.releaseTag === ReleaseTag_1.ReleaseTag.Beta
            };
        }
        refObject[astMethod.name] = newNode;
    };
    ApiJsonGenerator.prototype.visitApiParam = function (astParam, refObject) {
        if (!astParam.supportedName) {
            return;
        }
        if (refObject) {
            refObject.isOptional = astParam.isOptional;
            refObject.isSpread = astParam.isSpread;
            refObject.type = astParam.type;
        }
    };
    ApiJsonGenerator._methodCounter = 0;
    ApiJsonGenerator._MEMBERS_KEY = 'members';
    ApiJsonGenerator._EXPORTS_KEY = 'exports';
    ApiJsonGenerator._jsonSchema = undefined;
    return ApiJsonGenerator;
}(AstItemVisitor_1.default));
exports.default = ApiJsonGenerator;

//# sourceMappingURL=ApiJsonGenerator.js.map
