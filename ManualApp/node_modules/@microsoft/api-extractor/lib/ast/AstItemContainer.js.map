{"version":3,"sources":["ast/AstItemContainer.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;AAE3D,qCAAqD;AAErD;;;IAGI;AACJ;IAAwC,oCAAO;IAG7C,0BAAY,OAAwB;QAApC,YACE,kBAAM,OAAO,CAAC,SACf;QAJO,kBAAY,GAAyB,IAAI,GAAG,EAAmB,CAAC;;IAIxE,CAAC;IAED;;;;OAIG;IACI,wCAAa,GAApB,UAAqB,UAAkB;QACrC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACI,+CAAoB,GAA3B;QACE,IAAM,QAAQ,GAAc,EAAE,CAAC;QAC/B,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,OAAgB;YACzC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,QAAQ;aACZ,IAAI,CAAC,UAAC,CAAU,EAAE,CAAU,IAAK,OAAA,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,EAA5B,CAA4B,CAAC,CAAC;IACpE,CAAC;IAED;;OAEG;IACI,wDAA6B,GAApC;QACE,iBAAM,6BAA6B,WAAE,CAAC;QAEtC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,OAAO;YAChC,OAAO,CAAC,6BAA6B,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACO,wCAAa,GAAvB,UAAwB,OAAgB;QACtC,EAAE,CAAC,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC;YACpC,IAAI,CAAC,aAAa,CAAI,OAAO,CAAC,IAAI,qCAAkC,CAAC,CAAC;QACxE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC9B,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC7C,OAAO,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC;IACH,CAAC;IACH,uBAAC;AAAD,CApDA,AAoDC,CApDuC,iBAAO,GAoD9C;AAED,kBAAe,gBAAgB,CAAC","file":"ast/AstItemContainer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport AstItem, { IAstItemOptions } from './AstItem';\r\n\r\n/**\r\n  * This is an abstract base class for AstPackage, AstEnum, and AstStructuredType,\r\n  * which all act as containers for other AstItem definitions.\r\n  */\r\nabstract class AstItemContainer extends AstItem {\r\n  private _memberItems: Map<string, AstItem> = new Map<string, AstItem>();\r\n\r\n  constructor(options: IAstItemOptions) {\r\n    super(options);\r\n  }\r\n\r\n  /**\r\n   * Find a member in this namespace by name and return it if found.\r\n   *\r\n   * @param memberName - the name of the exported AstItem\r\n   */\r\n  public getMemberItem(memberName: string): AstItem {\r\n    return this._memberItems.get(memberName);\r\n  }\r\n\r\n  /**\r\n   * Return a list of the child items for this container, sorted alphabetically.\r\n   */\r\n  public getSortedMemberItems(): AstItem[] {\r\n    const astItems: AstItem[] = [];\r\n    this._memberItems.forEach((astItem: AstItem) => {\r\n      astItems.push(astItem);\r\n    });\r\n\r\n    return astItems\r\n      .sort((a: AstItem, b: AstItem) => a.name.localeCompare(b.name));\r\n  }\r\n\r\n  /**\r\n   * @virtual\r\n   */\r\n  public visitTypeReferencesForAstItem(): void {\r\n    super.visitTypeReferencesForAstItem();\r\n\r\n    this._memberItems.forEach((astItem) => {\r\n      astItem.visitTypeReferencesForAstItem();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add a child item to the container.\r\n   */\r\n  protected addMemberItem(astItem: AstItem): void {\r\n    if (astItem.hasAnyIncompleteTypes()) {\r\n      this.reportWarning(`${astItem.name} has incomplete type information`);\r\n    } else {\r\n      this.innerItems.push(astItem);\r\n      this._memberItems.set(astItem.name, astItem);\r\n      astItem.notifyAddedToContainer(this);\r\n    }\r\n  }\r\n}\r\n\r\nexport default AstItemContainer;\r\n"],"sourceRoot":"..\\..\\src"}