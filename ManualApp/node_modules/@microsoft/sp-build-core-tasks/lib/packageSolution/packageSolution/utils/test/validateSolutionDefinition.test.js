"use strict";
/// <reference types="mocha" />
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var colors = require("colors");
var validateSolutionDefinition_1 = require("../validateSolutionDefinition");
var numWarnings = 0;
function warn(msg) {
    console.log(colors.yellow(msg));
    numWarnings++;
}
function getBaseSolutionDefinition(skipFeatureDeployment) {
    return {
        solution: {
            name: 'foo',
            id: '123',
            skipFeatureDeployment: skipFeatureDeployment,
            features: [
                {
                    title: 'foo',
                    id: '123',
                    description: 'foo',
                    components: [],
                    assets: {
                        elementFiles: [],
                        elementManifests: [],
                        upgradeActions: []
                    }
                }
            ]
        }
    };
}
function addComponent(type, options) {
    options.solution.features[0].components.push({
        name: 'foobar',
        description: 'foobar',
        id: Date.now().toString(),
        requiresCustomScript: false,
        componentDefinition: undefined,
        manifest: {
            componentType: type,
            alias: 'foo' + type
        } // tslint:disable-line:no-any
    });
}
function addFeatureXml(features) {
    features.files.push({
        xml: 'foobar',
        filename: 'foo.xml'
    });
}
function addCustomAsset(options) {
    options.solution.features[0].assets.elementFiles.push('elementFiles.xml');
    options.solution.features[0].assets.elementManifests.push('elementManifests.xml');
    options.solution.features[0].assets.upgradeActions.push('upgradeActions.xml');
}
describe('validateSolutionDefinition', function () {
    beforeEach(function () {
        numWarnings = 0;
    });
    describe('skipFeatureDeployment === true', function () {
        describe('has web part', function () {
            it('throws when feature xml present', function () {
                var options = getBaseSolutionDefinition(true);
                var customFeatures = {
                    files: [],
                    customFeatureFilepath: []
                };
                addFeatureXml(customFeatures);
                addComponent('WebPart', options);
                chai_1.assert.isFalse(validateSolutionDefinition_1.validateSolutionDefinition(options, customFeatures, warn));
                chai_1.assert.equal(numWarnings, 1);
            });
            it('throws when custom asset present', function () {
                var options = getBaseSolutionDefinition(true);
                var customFeatures = {
                    files: [],
                    customFeatureFilepath: []
                };
                addCustomAsset(options);
                addComponent('WebPart', options);
                chai_1.assert.isFalse(validateSolutionDefinition_1.validateSolutionDefinition(options, customFeatures, warn));
                chai_1.assert.equal(numWarnings, 1);
            });
            it('validates if no feature xml or custom asset present', function () {
                var options = getBaseSolutionDefinition(true);
                var customFeatures = {
                    files: [],
                    customFeatureFilepath: []
                };
                addComponent('WebPart', options);
                chai_1.assert.isTrue(validateSolutionDefinition_1.validateSolutionDefinition(options, customFeatures, warn));
                chai_1.assert.equal(numWarnings, 0);
            });
        });
        describe('has extension', function () {
            it('always warns', function () {
                var options = getBaseSolutionDefinition(true);
                var customFeatures = {
                    files: [],
                    customFeatureFilepath: []
                };
                addComponent('Extension', options);
                chai_1.assert.isFalse(validateSolutionDefinition_1.validateSolutionDefinition(options, customFeatures, warn));
                chai_1.assert.equal(numWarnings, 1);
                addFeatureXml(customFeatures);
                chai_1.assert.isFalse(validateSolutionDefinition_1.validateSolutionDefinition(options, customFeatures, warn));
                chai_1.assert.equal(numWarnings, 3);
                addCustomAsset(options);
                chai_1.assert.isFalse(validateSolutionDefinition_1.validateSolutionDefinition(options, customFeatures, warn));
                chai_1.assert.equal(numWarnings, 5);
            });
        });
    });
    describe('skipFeatureDeployment === false', function () {
        it('validates even if webparts, extensions, feature xml, and custom assets are present', function () {
            var options = getBaseSolutionDefinition(false);
            var customFeatures = {
                files: [],
                customFeatureFilepath: []
            };
            addComponent('Extension', options);
            addComponent('WebPart', options);
            addCustomAsset(options);
            addFeatureXml(customFeatures);
            chai_1.assert.equal(numWarnings, 0);
            chai_1.assert.isTrue(validateSolutionDefinition_1.validateSolutionDefinition(options, customFeatures, warn));
        });
    });
});

//# sourceMappingURL=validateSolutionDefinition.test.js.map
