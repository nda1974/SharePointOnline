{"version":3,"sources":["packageSolution/packageSolution/utils/test/validateSolutionDefinition.test.ts"],"names":[],"mappings":"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","file":"packageSolution/packageSolution/utils/test/validateSolutionDefinition.test.js","sourcesContent":["/// <reference types=\"mocha\" />\r\n\r\nimport { assert } from 'chai';\r\nimport * as colors from 'colors';\r\nimport { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';\r\n\r\nimport { validateSolutionDefinition } from '../validateSolutionDefinition';\r\n\r\nimport { ICustomFeatures } from '../readCustomFeatures';\r\nimport { IPackageSolutionTaskConfig } from '../../../PackageSolutionTask';\r\n\r\nlet numWarnings: number = 0;\r\nfunction warn(msg: string): void {\r\n  console.log(colors.yellow(msg));\r\n  numWarnings++;\r\n}\r\n\r\nfunction getBaseSolutionDefinition(skipFeatureDeployment: boolean): IPackageSolutionTaskConfig {\r\n  return {\r\n    solution: {\r\n      name: 'foo',\r\n      id: '123',\r\n      skipFeatureDeployment,\r\n      features: [\r\n        {\r\n          title: 'foo',\r\n          id: '123',\r\n          description: 'foo',\r\n          components: [ ],\r\n          assets: {\r\n            elementFiles: [],\r\n            elementManifests: [],\r\n            upgradeActions: []\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  };\r\n}\r\n\r\nfunction addComponent(type: 'WebPart' | 'Extension', options: IPackageSolutionTaskConfig): void {\r\n  options.solution.features[0].components.push({\r\n    name: 'foobar',\r\n    description: 'foobar',\r\n    id: Date.now().toString(),\r\n    requiresCustomScript: false,\r\n    componentDefinition: undefined,\r\n    manifest: {\r\n      componentType: type,\r\n      alias: 'foo' + type\r\n    } as any as IClientSideComponentManifest // tslint:disable-line:no-any\r\n  });\r\n}\r\n\r\nfunction addFeatureXml(features: ICustomFeatures): void {\r\n  features.files.push({\r\n    xml: 'foobar',\r\n    filename: 'foo.xml'\r\n  });\r\n}\r\n\r\nfunction addCustomAsset(options: IPackageSolutionTaskConfig): void {\r\n  options.solution.features[0].assets.elementFiles.push('elementFiles.xml');\r\n  options.solution.features[0].assets.elementManifests.push('elementManifests.xml');\r\n  options.solution.features[0].assets.upgradeActions.push('upgradeActions.xml');\r\n}\r\n\r\ndescribe('validateSolutionDefinition', () => {\r\n  beforeEach(() => {\r\n    numWarnings = 0;\r\n  });\r\n\r\n  describe('skipFeatureDeployment === true', () => {\r\n    describe('has web part', () => {\r\n\r\n      it('throws when feature xml present', () => {\r\n        const options: IPackageSolutionTaskConfig = getBaseSolutionDefinition(true);\r\n        const customFeatures: ICustomFeatures = {\r\n          files: [],\r\n          customFeatureFilepath: []\r\n        };\r\n        addFeatureXml(customFeatures);\r\n        addComponent('WebPart', options);\r\n\r\n        assert.isFalse(validateSolutionDefinition(options, customFeatures, warn));\r\n        assert.equal(numWarnings, 1);\r\n      });\r\n\r\n      it('throws when custom asset present', () => {\r\n        const options: IPackageSolutionTaskConfig = getBaseSolutionDefinition(true);\r\n        const customFeatures: ICustomFeatures = {\r\n          files: [],\r\n          customFeatureFilepath: []\r\n        };\r\n        addCustomAsset(options);\r\n        addComponent('WebPart', options);\r\n\r\n        assert.isFalse(validateSolutionDefinition(options, customFeatures, warn));\r\n        assert.equal(numWarnings, 1);\r\n      });\r\n\r\n      it('validates if no feature xml or custom asset present', () => {\r\n        const options: IPackageSolutionTaskConfig = getBaseSolutionDefinition(true);\r\n        const customFeatures: ICustomFeatures = {\r\n          files: [],\r\n          customFeatureFilepath: []\r\n        };\r\n        addComponent('WebPart', options);\r\n\r\n        assert.isTrue(validateSolutionDefinition(options, customFeatures, warn));\r\n        assert.equal(numWarnings, 0);\r\n      });\r\n    });\r\n\r\n    describe('has extension', () => {\r\n      it('always warns', () => {\r\n        const options: IPackageSolutionTaskConfig = getBaseSolutionDefinition(true);\r\n        const customFeatures: ICustomFeatures = {\r\n          files: [],\r\n          customFeatureFilepath: []\r\n        };\r\n\r\n        addComponent('Extension', options);\r\n        assert.isFalse(validateSolutionDefinition(options, customFeatures, warn));\r\n        assert.equal(numWarnings, 1);\r\n\r\n        addFeatureXml(customFeatures);\r\n        assert.isFalse(validateSolutionDefinition(options, customFeatures, warn));\r\n        assert.equal(numWarnings, 3);\r\n\r\n        addCustomAsset(options);\r\n        assert.isFalse(validateSolutionDefinition(options, customFeatures, warn));\r\n        assert.equal(numWarnings, 5);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('skipFeatureDeployment === false', () => {\r\n    it('validates even if webparts, extensions, feature xml, and custom assets are present', () => {\r\n      const options: IPackageSolutionTaskConfig = getBaseSolutionDefinition(false);\r\n        const customFeatures: ICustomFeatures = {\r\n          files: [],\r\n          customFeatureFilepath: []\r\n        };\r\n        addComponent('Extension', options);\r\n        addComponent('WebPart', options);\r\n        addCustomAsset(options);\r\n        addFeatureXml(customFeatures);\r\n\r\n        assert.equal(numWarnings, 0);\r\n        assert.isTrue(validateSolutionDefinition(options, customFeatures, warn));\r\n    });\r\n  });\r\n});"],"sourceRoot":"..\\..\\..\\..\\..\\src"}