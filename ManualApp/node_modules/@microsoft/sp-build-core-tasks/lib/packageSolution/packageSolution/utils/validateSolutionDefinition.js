"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gulp_core_build_1 = require("@microsoft/gulp-core-build");
/**
 * Checks that a solution definition is valid
 */
function validateSolutionDefinition(options, customFeatures, logWarning) {
    if (logWarning === void 0) { logWarning = gulp_core_build_1.warn; }
    if (options.solution.skipFeatureDeployment) {
        var hasWarning_1 = false;
        // iterate each feature, counting the customAssets. If there is an Extension, log a warning
        var customAssetFiles = options.solution.features.map(function (feature) {
            feature.components.forEach(function (component) {
                if (component.manifest.componentType === 'Extension') {
                    logWarning(component.manifest.alias + ": Admins can make this solution available to all sites in the"
                        + " organization, but extensions won\u2019t automatically appear. SharePoint Framework extensions must"
                        + " be specifically associated to sites, lists, and fields programmatically to be visible to site users.");
                    hasWarning_1 = true;
                }
            });
            return feature.assets.elementFiles.length
                + feature.assets.elementManifests.length
                + feature.assets.upgradeActions.length;
        }).reduce(function (prev, cur) { return cur + prev; });
        var hasFeatureXml = !!(customAssetFiles + customFeatures.files.length);
        // if there is feature XML or Custom Assets, we have encountered a serious error
        if (hasFeatureXml) {
            logWarning("Admins can make this solution available to all sites immediately, but the solution also contains"
                + " feature.xml elements for provisioning. Feature.xml elements are not automatically applied unless the"
                + " solution is explicitly installed on a site.");
            hasWarning_1 = true;
        }
        return !hasWarning_1;
    }
    return true;
}
exports.validateSolutionDefinition = validateSolutionDefinition;

//# sourceMappingURL=validateSolutionDefinition.js.map
