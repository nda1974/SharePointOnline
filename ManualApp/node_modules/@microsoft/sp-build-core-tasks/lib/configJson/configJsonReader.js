"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var node_core_library_1 = require("@microsoft/node-core-library");
var config_v2_1 = require("./interfaces/config-v2");
var V1_SCHEMA = node_core_library_1.JsonSchema.fromFile(path.join(__dirname, 'schemas', 'config.1.0.schema.json'));
var V2_SCHEMA = node_core_library_1.JsonSchema.fromFile(path.join(__dirname, 'schemas', 'config.2.0.schema.json'));
exports.defaultConfigPath = path.join(process.cwd(), 'config', 'config.json');
/**
 * Read a V1 config file and translate it to the latest schema.
 */
function _tryV1(filename, fileMetadata) {
    var result = {
        missingFile: false,
        version: '1.0',
        isLatestVersion: false
    };
    try {
        var v1Config = node_core_library_1.JsonFile.loadAndValidate(filename, V1_SCHEMA);
        var configData = {
            '$schema': config_v2_1.configJsonSchemaUrl,
            version: '2.0',
            bundles: {},
            localizedResources: v1Config.localizedResources,
            externals: v1Config.externals
        };
        if (v1Config.entries) {
            for (var _i = 0, _a = v1Config.entries; _i < _a.length; _i++) {
                var entry = _a[_i];
                var name_1 = path.basename(entry.outputPath, path.extname(entry.outputPath));
                configData.bundles[name_1] = {
                    components: [{
                            entrypoint: entry.entry,
                            manifest: entry.manifest
                        }]
                };
            }
        }
        if (configData.localizedResources) {
            for (var _b = 0, _c = Object.getOwnPropertyNames(configData.localizedResources); _b < _c.length; _b++) {
                var resourceName = _c[_b];
                var resourcePath = configData.localizedResources[resourceName];
                configData.localizedResources[resourceName] = path.posix.join('lib', resourcePath);
            }
        }
        result.configData = configData;
    }
    catch (error) {
        if (!fileMetadata.version) {
            result.readError = error;
        }
        else {
            // Failed to validate, not the right version
            return undefined;
        }
    }
    return result;
}
/**
 * Read a V2 config file. This is currently the latest config version
 */
function _tryV2(filename, fileMetadata) {
    var result = {
        missingFile: false,
        version: '2.0',
        isLatestVersion: true
    };
    try {
        var configData = node_core_library_1.JsonFile.loadAndValidate(filename, V2_SCHEMA);
        result.configData = configData;
    }
    catch (error) {
        if (fileMetadata.version === result.version) {
            result.readError = error;
        }
        else {
            // Failed to validate, not the right version
            return undefined;
        }
    }
    return result;
}
var _parseFunctions = [
    _tryV2,
    _tryV1
];
function readConfigFile(// tslint:disable-line:export-name
    logVerbose, filename) {
    if (filename === void 0) { filename = exports.defaultConfigPath; }
    if (!fs.existsSync(filename)) {
        return {
            missingFile: true
        };
    }
    else {
        logVerbose("Found config file: " + path.basename(filename));
        var fileMetadata = void 0;
        try {
            // Read the file to detect basic metadata
            fileMetadata = node_core_library_1.JsonFile.load(filename);
        }
        catch (error) {
            return {
                missingFile: false,
                readError: error
            };
        }
        var result = undefined;
        for (var i = 0; i < _parseFunctions.length && !result; i++) {
            result = _parseFunctions[i](filename, fileMetadata);
        }
        return result || {
            missingFile: false,
            version: fileMetadata.version,
            isLatestVersion: false,
            readError: 'Unknown config.json file format.'
        };
    }
}
exports.readConfigFile = readConfigFile;
function readV1ConfigFile(// tslint:disable-line:export-name
    logVerbose, filename) {
    if (filename === void 0) { filename = exports.defaultConfigPath; }
    if (!fs.existsSync(filename)) {
        return {
            missingFile: true
        };
    }
    else {
        logVerbose("Found config file: " + path.basename(filename));
        var result = {
            missingFile: false,
            version: '1.0',
            isLatestVersion: false
        };
        try {
            var v1Config = node_core_library_1.JsonFile.loadAndValidate(filename, V1_SCHEMA);
            result.configData = v1Config;
        }
        catch (error) {
            result = {
                missingFile: false,
                version: result.version,
                isLatestVersion: false,
                readError: error
            };
        }
        return result;
    }
}
exports.readV1ConfigFile = readV1ConfigFile;

//# sourceMappingURL=configJsonReader.js.map
