{"version":3,"file":"Customizer.js","sourceRoot":"../src/","sources":["Customizer.tsx"],"names":[],"mappings":";;;IAkCA;;;;;;;;;;;OAWG;IACH;QAAgC,sCAAiD;QAW/E,kCAAkC;QAClC,oBAAY,KAAuB,EAAE,OAAY;YAAjD,YACE,kBAAM,KAAK,CAAC,SAGb;YADC,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;;QACtD,CAAC;QAEM,oCAAe,GAAtB;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;QAED,kCAAkC;QAC3B,8CAAyB,GAAhC,UAAiC,QAA0B,EAAE,UAAe;YAC1E,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;QAC9D,CAAC;QAEM,2BAAM,GAAb;YACE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC;QAEO,sCAAiB,GAAzB,UAA0B,KAAuB,EAAE,OAAyB;YAMpE,IAAA,mBAAqD,EAArD,mDAAqD,CAAW;YAChE,IAAA,0BAAyD,EAAzD,kDAAyD,CAAa;YAE5E,MAAM,CAAC;gBACL,aAAa,uBACR,wBAAwB,EACxB,yBAAyB,CAC7B;aACF,CAAC;QACJ,CAAC;QA7Ca,uBAAY,GAEtB;YACF,aAAa,EAAE,SAAS,CAAC,MAAM;SAChC,CAAC;QAEY,4BAAiB,GAE3B,UAAU,CAAC,YAAY,CAAC;QAsC9B,iBAAC;KAAA,AA/CD,CAAgC,6BAAa,GA+C5C;IA/CY,gCAAU","sourcesContent":["import * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport { BaseComponent } from './BaseComponent';\r\n\r\n/**\r\n * Settings interface.\r\n *\r\n * @internal\r\n */\r\nexport interface ISettings {\r\n  // tslint:disable-next-line:no-any\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Customizer component props.\r\n *\r\n * @public\r\n */\r\nexport interface ICustomizerProps {\r\n  componentRef?: () => void;\r\n\r\n  settings: ISettings;\r\n}\r\n\r\n/**\r\n * Customizer component state.\r\n *\r\n * @internal\r\n */\r\nexport interface ICustomizerState {\r\n  injectedProps?: ISettings;\r\n}\r\n\r\n/**\r\n * The Customizer component allows for default props to be mixed into components which\r\n * are decorated with the customizable() decorator. This enables injection scenarios like:\r\n *\r\n * 1. render svg icons instead of the icon font within all buttons\r\n * 2. inject a custom theme object into a component\r\n *\r\n * Props are provided via the settings prop, which should be a json map which contains 1 or more\r\n * name/value pairs representing injectable props.\r\n *\r\n * @public\r\n */\r\nexport class Customizer extends BaseComponent<ICustomizerProps, ICustomizerState> {\r\n  public static contextTypes: {\r\n    injectedProps: PropTypes.Requireable<{}>;\r\n  } = {\r\n    injectedProps: PropTypes.object\r\n  };\r\n\r\n  public static childContextTypes: {\r\n    injectedProps: PropTypes.Requireable<{}>;\r\n  } = Customizer.contextTypes;\r\n\r\n  // tslint:disable-next-line:no-any\r\n  constructor(props: ICustomizerProps, context: any) {\r\n    super(props);\r\n\r\n    this.state = this._getInjectedProps(props, context);\r\n  }\r\n\r\n  public getChildContext(): ICustomizerState {\r\n    return this.state;\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  public componentWillReceiveProps(newProps: ICustomizerProps, newContext: any): void {\r\n    this.setState(this._getInjectedProps(newProps, newContext));\r\n  }\r\n\r\n  public render(): React.ReactElement<{}> {\r\n    return React.Children.only(this.props.children);\r\n  }\r\n\r\n  private _getInjectedProps(props: ICustomizerProps, context: ICustomizerState): {\r\n    injectedProps: {\r\n      // tslint:disable-next-line:no-any\r\n      [x: string]: any;\r\n    };\r\n  } {\r\n    let { settings: injectedPropsFromSettings = {} as ISettings } = props;\r\n    let { injectedProps: injectedPropsFromContext = {} as ISettings } = context;\r\n\r\n    return {\r\n      injectedProps: {\r\n        ...injectedPropsFromContext,\r\n        ...injectedPropsFromSettings\r\n      }\r\n    };\r\n  }\r\n}\r\n"]}