{"version":3,"file":"Panel.Props.js","sourceRoot":"../src/","sources":["components/Panel/Panel.Props.ts"],"names":[],"mappings":";;;IA0JA,IAAY,SAoFX;IApFD,WAAY,SAAS;QACnB;;;;;;;;WAQG;QACH,qDAAc,CAAA;QAEd;;;;;;;WAOG;QACH,2DAAiB,CAAA;QAEjB;;;;;;;WAOG;QACH,6DAAkB,CAAA;QAElB;;;;;;;WAOG;QACH,6CAAU,CAAA;QAEV;;;;;;;;WAQG;QACH,2CAAS,CAAA;QAET;;;;;;;;WAQG;QACH,qDAAc,CAAA;QAEd;;;;;;;;WAQG;QACH,qDAAc,CAAA;QAEd;;;;;;;WAOG;QACH,6CAAU,CAAA;IACZ,CAAC,EApFW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAoFpB","sourcesContent":["import * as React from 'react';\nimport { Panel } from './Panel';\nimport { IRenderFunction } from '../../Utilities';\nimport { ILayerProps } from '../../Layer';\n\nexport interface IPanel {\n  /**\n   * Forces the panel to open.\n   */\n  open: () => void;\n\n  /**\n   * Forces the panel to dismiss.\n   */\n  dismiss: () => void;\n}\nexport interface IPanelProps extends React.Props<Panel> {\n  /**\n   * Optional callback to access the IPanel interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: IPanel) => void;\n\n  /**\n  * Whether the panel is displayed.\n  * @default false\n  */\n  isOpen?: boolean;\n\n  /**\n  * Has the close button visible.\n  * @default true\n  */\n  hasCloseButton?: boolean;\n\n  /**\n  * Whether the panel can be light dismissed.\n  * @default false\n  */\n  isLightDismiss?: boolean;\n\n  /**\n  * Whether the panel uses a modal overlay or not\n  * @default true\n  */\n  isBlocking?: boolean;\n\n  /**\n   * Determines if content should stretch to fill available space putting footer at the bottom of the page\n   * @default false\n   */\n  isFooterAtBottom?: boolean;\n\n  /**\n  * Header text for the Panel.\n  * @default \"\"\n  */\n  headerText?: string;\n\n  /**\n  * A callback function for when the panel is closed, before the animation completes.\n  */\n  onDismiss?: () => void;\n\n  /**\n   * A callback function which is called after the Panel is dismissed and the animation is complete.\n   */\n  onDismissed?: () => void;\n\n  /**\n  * Additional styling options.\n  */\n  className?: string;\n\n  /**\n  * Type of the panel.\n  * @default PanelType.smallFixedRight\n  */\n  type?: PanelType;\n\n  /**\n  * Custom panel width, used only when type is set to PanelType.custom.\n  */\n  customWidth?: string;\n\n  /**\n   * Aria label on close button\n   */\n  closeButtonAriaLabel?: string;\n\n  /**\n   * Optional parameter to provider the class name for header text\n   */\n  headerClassName?: string;\n\n  /**\n   * Sets the HTMLElement to focus on when exiting the FocusTrapZone.\n   * @default The element.target that triggered the Panel.\n   */\n  elementToFocusOnDismiss?: HTMLElement;\n\n  /**\n   * Indicates if this Panel will ignore keeping track of HTMLElement that activated the Zone.\n   * @default false\n   */\n  ignoreExternalFocusing?: boolean;\n\n  /**\n  * Indicates whether Panel should force focus inside the focus trap zone\n  * @default true\n  */\n  forceFocusInsideTrap?: boolean;\n\n  /**\n  * Indicates the selector for first focusable item\n  */\n  firstFocusableSelector?: string;\n\n  /**\n   * Optional props to pass to the Layer component hosting the panel.\n   */\n  layerProps?: ILayerProps;\n\n  /**\n   * Optional custom renderer navigation region. Replaces current close button.\n   */\n  onRenderNavigation?: IRenderFunction<IPanelProps>;\n\n  /**\n   * Optional custom renderer for header region. Replaces current title\n   */\n  onRenderHeader?: IRenderFunction<IPanelProps>;\n\n  /**\n   * Optional custom renderer for body region. Replaces any children passed into the component.\n   */\n  onRenderBody?: IRenderFunction<IPanelProps>;\n\n  /**\n   * Optional custom renderer for footer region. Replaces sticky footer.\n   */\n  onRenderFooter?: IRenderFunction<IPanelProps>;\n\n  /**\n   * Custom renderer for content in the sticky footer\n   */\n  onRenderFooterContent?: IRenderFunction<IPanelProps>;\n\n  /**\n   * Internal ID passed to render functions.\n   */\n  componentId?: string;\n}\n\nexport enum PanelType {\n  /**\n   * Renders the panel in 'small' mode, anchored to the far side (right in LTR mode), and has a fluid width.\n   * Only used on Small screen breakpoints.\n   * Small: 320-479px width (full screen), 16px Left/Right padding\n   * Medium: <unused>\n   * Large: <unused>\n   * XLarge: <unused>\n   * XXLarge: <unused>\n   */\n  smallFluid = 0,\n\n  /**\n   * Renders the panel in 'small' mode, anchored to the far side (right in LTR mode), and has a fixed width.\n   * Small: 272px width, 16px Left/Right padding\n   * Medium: 340px width, 16px Left/Right padding\n   * Large: 340px width, 32px Left/Right padding\n   * XLarge: 340px width, 32px Left/Right padding\n   * XXLarge: 340px width, 40px Left/Right padding\n   */\n  smallFixedFar = 1,\n\n  /**\n   * Renders the panel in 'small' mode, anchored to the near side (left in LTR mode), and has a fixed width.\n   * Small: 272px width, 16px Left/Right padding\n   * Medium: 272px width, 16px Left/Right padding\n   * Large: 272px width, 32px Left/Right padding\n   * XLarge: 272px width, 32px Left/Right padding\n   * XXLarge: 272px width, 32px Left/Right padding\n   */\n  smallFixedNear = 2,\n\n  /**\n   * Renders the panel in 'medium' mode, anchored to the far side (right in LTR mode).\n   * Small: <adapts to smallFluid>\n   * Medium: <adapts to smallFixedFar>\n   * Large: 48px fixed left margin, 32px Left/Right padding\n   * XLarge: 644px width, 32px Left/Right padding\n   * XXLarge: 643px width, 40px Left/Right padding\n   */\n  medium = 3,\n\n  /**\n   * Renders the panel in 'large' mode, anchored to the far side (right in LTR mode), and is fluid at XXX-Large breakpoint.\n   * Small: <adapts to smallFluid>\n   * Medium:  <adapts to smallFixedFar>\n   * Large: <adapts to medium>\n   * XLarge: 48px fixed left margin, 32px Left/Right padding\n   * XXLarge: 48px fixed left margin, 32px Left/Right padding\n   * XXXLarge: 48px fixed left margin, (no redlines for padding, assuming previous breakpoint)\n   */\n  large = 4,\n\n  /**\n   * Renders the panel in 'large' mode, anchored to the far side (right in LTR mode), and is fixed at XXX-Large breakpoint.\n   * Small: <adapts to smallFluid>\n   * Medium:  <adapts to smallFixedFar>\n   * Large: <adapts to medium>\n   * XLarge: 48px fixed left margin, 32px Left/Right padding\n   * XXLarge: 48px fixed left margin, 32px Left/Right padding\n   * XXXLarge: 940px width, (no redlines for padding, assuming previous breakpoint)\n   */\n  largeFixed = 5,\n\n  /**\n   * Renders the panel in 'extra large' mode, anchored to the far side (right in LTR mode).\n   * Small: <adapts to smallFluid>\n   * Medium: <adapts to smallFixedFar>\n   * Large: <adapts to medium>\n   * XLarge: <adapts to large>\n   * XXLarge: 176px fixed left margin, 40px Left/Right padding\n   * XXXLarge: 176px fixed left margin, 40px Left/Right padding\n   */\n  extraLarge = 6,\n\n  /**\n   * Renders the panel in 'custom' mode using customWidth, anchored to the far side (right in LTR mode).\n   * Small: <adapts to smallFluid>\n   * Medium: <adapts to smallFixedFar>\n   * Large: 48px fixed left margin, 32px Left/Right padding\n   * XLarge: 644px width, 32px Left/Right padding\n   * XXLarge: 643px width, 40px Left/Right padding\n   */\n  custom = 7\n}"]}