{"version":3,"file":"ThemePage.js","sourceRoot":"../src/","sources":["components/Theme/ThemePage.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { loadTheme, FontClassNames, ITheme, IPalette } from 'office-ui-fabric-react/lib/Styling';\nimport { Highlight } from '@uifabric/example-app-base';\nimport { defaultTheme } from './defaultTheme';\nimport { Callout } from 'office-ui-fabric-react/lib/Callout';\nimport { DetailsList, DetailsListLayoutMode as LayoutMode } from 'office-ui-fabric-react/lib/DetailsList';\nimport { SelectionMode } from 'office-ui-fabric-react/lib/Selection';\nimport { ColorPicker } from 'office-ui-fabric-react/lib/ColorPicker';\nimport './ThemePage.scss';\nconst ThemeCodeExample = require('!raw-loader!office-ui-fabric-react/src/components/Theme/examples/ThemeCode.Example.tsx');\n\nexport class ThemePage extends React.Component<any, any> {\n\n  public refs: {\n    [key: string]: React.ReactInstance;\n    list: DetailsList;\n  };\n\n  constructor() {\n    super();\n\n    this._onPickerDismiss = this._onPickerDismiss.bind(this);\n\n    this.state = {\n      colors: Object.keys(defaultTheme).map(variableName => ({\n        key: variableName,\n        name: variableName,\n        value: (defaultTheme as any)[variableName],\n        description: '',\n        colorPickerProps: null\n      }))\n    };\n  }\n\n  public render() {\n    let { colors, colorPickerProps } = this.state;\n\n    return (\n      <div className='Themes'>\n        <h1 className={ FontClassNames.xxLarge }>Themes</h1>\n        <p>The entire color pallete of the controls are themeable. We provide a set of sensible defaults, but you can override all colors individually.</p>\n        <p>To override the themes, you need to call <span className='code'>loadTheme()</span> with the appropriate set of overrides:</p>\n\n        <Highlight className='typescript'>\n          { ThemeCodeExample }\n        </Highlight>\n\n        <h1 className={ FontClassNames.xLarge }>Define a theme</h1>\n        <div>\n          <DetailsList\n            ref='list'\n            items={ colors }\n            selectionMode={ SelectionMode.none }\n            layoutMode={ LayoutMode.fixedColumns }\n            columns={ [\n              {\n                key: 'name',\n                name: 'Name',\n                fieldName: 'name',\n                minWidth: 150,\n                maxWidth: 150\n              },\n              {\n                key: 'color',\n                name: 'Color',\n                fieldName: 'value',\n                minWidth: 200,\n                onRender: (item, index) => (\n                  <div className='ThemePage-colorSwatch' data-is-focusable='true' onClick={ this._onSwatchClicked.bind(this, item, index) }>\n                    <span className='ThemePage-swatch' style={ { backgroundColor: item.value } } />\n                    <span className='ThemePage-colorValue'>{ item.value }</span>\n                  </div>\n                )\n              },\n              {\n                key: 'desc',\n                name: 'Description',\n                fieldName: 'description',\n                minWidth: 90\n              }\n            ] }\n          />\n\n          { colorPickerProps && (\n            <Callout\n              isBeakVisible={ false }\n              gapSpace={ 10 }\n              targetElement={ colorPickerProps.targetElement }\n              onDismiss={ this._onPickerDismiss }>\n\n              <ColorPicker\n                color={ colorPickerProps.value }\n                onColorChanged={ this._onColorChanged.bind(this, colorPickerProps.index) }\n              />\n\n            </Callout>\n          ) }\n\n        </div>\n\n      </div>\n    );\n  }\n\n  private _onSwatchClicked(item: any, index: number, ev: React.MouseEvent<HTMLElement>) {\n    this.setState({\n      colorPickerProps: {\n        targetElement: (ev.currentTarget as HTMLElement).children[0],\n        value: item.value,\n        index: index\n      }\n    });\n  }\n\n  private _onColorChanged(index: number, newColor: string) {\n    let { colors } = this.state;\n    let color = colors[index];\n    let palette: Partial<IPalette> = {};\n\n    color.value = newColor;\n\n    for (let i = 0; i < colors.length; i++) {\n      let themeColor = colors[i];\n\n      (palette as any)[themeColor.key] = themeColor.value;\n    }\n\n    loadTheme({ palette });\n\n    // The theme has changed values, but color state is the same. Force an update on the list.\n    this.refs.list.forceUpdate();\n  }\n\n  private _onPickerDismiss() {\n    this.setState({\n      colorPickerProps: null\n    });\n  }\n\n}\n"]}