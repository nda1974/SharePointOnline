{"version":3,"file":"HoverCard.Props.js","sourceRoot":"../src/","sources":["components/HoverCard/HoverCard.Props.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { HoverCard } from './HoverCard';\nimport { IExpandingCardProps } from './ExpandingCard.Props';\nimport { IStyle } from '../../Styling';\n\nexport interface IHoverCard {\n\n}\n\n/**\n * HoverCard component props.\n */\nexport interface IHoverCardProps extends React.HTMLAttributes<HTMLDivElement | HoverCard> {\n  /**\n   * Optional callback to access the IHoverCardHost interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: IHoverCard) => void;\n\n  /**\n   * Additional properties to pass through for HoverCard, reference detail properties in IHoverCardProps\n   */\n  expandingCardProps?: IExpandingCardProps;\n\n  /**\n   * Whether or not to mark the container as described by the hover card.\n   * If not specified, the caller should mark as element as described by the hover card id.\n   */\n  setAriaDescribedBy?: boolean;\n\n  /**\n   * Length of compact card delay\n   * @default 500\n   */\n  cardOpenDelay?: number;\n\n  /**\n   * Length of card dismiss delay. A min number is necessary for pointer to hop between target and card\n   * @default 100\n   */\n  cardDismissDelay?: number;\n\n  /**\n   * Time in ms when expanded card should open after compact card\n   * @default 1500\n   */\n  expandedCardOpenDelay?: number;\n\n  /**\n   * If true disables Card dismiss upon mouse leave, so that card sticks around.\n   * @default false\n   */\n  sticky?: boolean;\n\n  /**\n   * Enables instant open of the full card upon click\n   * @default false\n   */\n  instantOpenOnClick?: boolean;\n\n  /**\n   * Custom styles for this component\n   */\n  styles?: IHoverCardStyles;\n\n  /**\n   * Optional target element to tag hover card on\n   */\n  target?: HTMLElement | string;\n\n  /**\n   * Callback when card becomes visible\n   */\n  onCardVisible?: () => void;\n\n  /**\n   * Callback when card hides\n   */\n  onCardHide?: () => void;\n}\n\nexport interface IHoverCardStyles {\n  /**\n   * Style for the host element in the default enabled, non-toggled state.\n   */\n  host?: IStyle;\n}\n"]}