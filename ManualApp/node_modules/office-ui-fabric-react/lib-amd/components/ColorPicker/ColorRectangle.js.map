{"version":3,"file":"ColorRectangle.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorRectangle.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  assign,\n  autobind,\n  css\n} from '../../Utilities';\nimport {\n  IColor,\n  MAX_COLOR_SATURATION,\n  MAX_COLOR_VALUE,\n  getFullColorString,\n  hsv2hex\n} from '../../utilities/color/colors';\nimport * as stylesImport from './ColorPicker.scss';\nconst styles: any = stylesImport;\n\nexport interface IColorRectangleProps {\n  componentRef?: () => void;\n  color: IColor;\n  minSize?: number;\n\n  onSVChanged?(s: number, v: number): void;\n}\n\nexport interface IColorPickerState {\n  isAdjusting?: boolean;\n  origin?: { x: number, y: number, color: IColor };\n  color?: IColor;\n  fullColorString?: string;\n}\n\nexport class ColorRectangle extends BaseComponent<IColorRectangleProps, IColorPickerState> {\n  public static defaultProps = {\n    minSize: 220\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance;\n    root: HTMLElement;\n  };\n\n  constructor(props: IColorRectangleProps) {\n    super(props);\n\n    let { color } = this.props;\n\n    this.state = {\n      isAdjusting: false,\n      origin: undefined,\n      color: color,\n      fullColorString: getFullColorString(color)\n    };\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n  }\n\n  public componentWillReceiveProps(newProps: IColorRectangleProps) {\n    let { color } = newProps;\n\n    this.setState({\n      color: color,\n      fullColorString: getFullColorString(color)\n    });\n  }\n\n  public render() {\n    let { minSize } = this.props;\n    let { color, fullColorString } = this.state;\n\n    return (\n      <div ref='root' className={ css('ms-ColorPicker-colorRect', styles.colorRect) } style={ { minWidth: minSize, minHeight: minSize, backgroundColor: fullColorString } } onMouseDown={ this._onMouseDown }>\n        <div className={ css('ms-ColorPicker-light', styles.light) } />\n        <div className={ css('ms-ColorPicker-dark', styles.dark) } />\n        <div className={ css('ms-ColorPicker-thumb', styles.thumb) } style={ { left: color!.s + '%', top: (MAX_COLOR_VALUE - color!.v) + '%', backgroundColor: color!.str } } />\n      </div>\n    );\n  }\n\n  @autobind\n  private _onMouseDown(ev: React.MouseEvent<HTMLElement>) {\n    this._events.on(window, 'mousemove', this._onMouseMove, true);\n    this._events.on(window, 'mouseup', this._onMouseUp, true);\n\n    this._onMouseMove(ev);\n  }\n\n  @autobind\n  private _onMouseMove(ev: React.MouseEvent<HTMLElement>) {\n    let { color, onSVChanged } = this.props;\n    let rectSize = this.refs.root.getBoundingClientRect();\n\n    let sPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n    let vPercentage = (ev.clientY - rectSize.top) / rectSize.height;\n\n    let newColor = assign({}, color, {\n      s: Math.min(MAX_COLOR_SATURATION, Math.max(0, sPercentage * MAX_COLOR_SATURATION)),\n      v: Math.min(MAX_COLOR_VALUE, Math.max(0, MAX_COLOR_VALUE - (vPercentage * MAX_COLOR_VALUE))),\n    });\n\n    newColor.hex = hsv2hex(newColor.h, newColor.s, newColor.v);\n    newColor.str = newColor.a === 100 ? '#' + newColor.hex : `rgba(${newColor.r}, ${newColor.g}, ${newColor.b}, ${newColor.a / 100})`;\n\n    this.setState({\n      isAdjusting: true,\n      color: newColor\n    });\n\n    if (onSVChanged) {\n      onSVChanged(newColor.s, newColor.v);\n    }\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  @autobind\n  private _onMouseUp(ev: React.MouseEvent<HTMLElement>) {\n    this._events.off();\n\n    this.setState({\n      isAdjusting: false,\n      origin: undefined\n    });\n  }\n\n}\n"]}