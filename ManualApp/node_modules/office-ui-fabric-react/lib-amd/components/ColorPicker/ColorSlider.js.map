{"version":3,"file":"ColorSlider.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorSlider.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  autobind,\n  css\n} from '../../Utilities';\nimport * as stylesImport from './ColorPicker.scss';\nconst styles: any = stylesImport;\n\nexport interface IColorSliderProps {\n  componentRef?: () => void;\n  minValue?: number;\n  maxValue?: number;\n  value?: number;\n  thumbColor?: string;\n  overlayStyle?: any;\n  onChanged?: (newValue: number) => void;\n\n  className?: string;\n  style?: any;\n}\n\nexport interface IColorSliderState {\n  isAdjusting?: boolean;\n  origin?: { x: number, originalValue: number };\n  currentValue?: number;\n}\n\nexport class ColorSlider extends BaseComponent<IColorSliderProps, IColorSliderState> {\n  public static defaultProps = {\n    minValue: 0,\n    maxValue: 100,\n    thumbColor: 'inherit',\n    value: 0\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance;\n    root: HTMLElement;\n  };\n\n  constructor(props: IColorSliderProps) {\n    super(props);\n\n    let { value } = this.props;\n\n    this.state = {\n      isAdjusting: false,\n      origin: undefined,\n      currentValue: value\n    };\n  }\n\n  public componentWillReceiveProps(newProps: IColorSliderProps) {\n    if (newProps && newProps.value) {\n      this.setState({ currentValue: newProps.value });\n    }\n  }\n\n  public render() {\n    let { className, minValue, maxValue, overlayStyle } = this.props;\n    let { currentValue, isAdjusting } = this.state;\n\n    let currentPercentage = 100 * (currentValue! - minValue!) / (maxValue! - minValue!);\n\n    return (\n      <div\n        ref='root'\n        className={ css(\n          'ms-ColorPicker-slider',\n          styles.slider,\n          className,\n          isAdjusting && 'is-adjusting'\n        ) }\n        onMouseDown={ this._onMouseDown }>\n        <div className={ css('ms-ColorPicker-sliderOverlay', styles.sliderOverlay) } style={ overlayStyle } />\n        <div className={ css('ms-ColorPicker-thumb is-slider', styles.thumb, styles.thumbIsSlider) } style={ { left: currentPercentage + '%' } } />\n      </div>\n    );\n  }\n\n  @autobind\n  private _onMouseDown(ev: React.MouseEvent<HTMLElement>) {\n    this._events.on(window, 'mousemove', this._onMouseMove, true);\n    this._events.on(window, 'mouseup', this._onMouseUp, true);\n\n    this._onMouseMove(ev);\n  }\n\n  @autobind\n  private _onMouseMove(ev: React.MouseEvent<HTMLElement>) {\n    let { onChanged, minValue, maxValue } = this.props;\n    let rectSize = this.refs.root.getBoundingClientRect();\n\n    let currentPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n    let newValue = Math.min(maxValue!, Math.max(minValue!, currentPercentage * maxValue!));\n\n    this.setState({\n      isAdjusting: true,\n      currentValue: newValue\n    });\n\n    if (onChanged) {\n      onChanged(newValue);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  @autobind\n  private _onMouseUp(ev: React.MouseEvent<HTMLElement>) {\n    this._events.off();\n\n    this.setState({\n      isAdjusting: false,\n      origin: undefined\n    });\n  }\n\n}\n"]}