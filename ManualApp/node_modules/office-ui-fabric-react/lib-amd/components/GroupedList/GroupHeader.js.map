{"version":3,"file":"GroupHeader.js","sourceRoot":"../src/","sources":["components/GroupedList/GroupHeader.tsx"],"names":[],"mappings":";;;IAcA,IAAM,MAAM,GAAQ,YAAY,CAAC;IAOjC;QAAiC,uCAAoD;QACnF,qBAAY,KAAyB;YAArC,YACE,kBAAM,KAAK,CAAC,SAMb;YAJC,KAAI,CAAC,KAAK,GAAG;gBACX,WAAW,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,IAAI,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAY;gBAC1E,gBAAgB,EAAE,KAAK;aACxB,CAAC;;QACJ,CAAC;QAEM,+CAAyB,GAAhC,UAAiC,QAAa;YAC5C,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnB,IAAI,YAAY,GAAG,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC;gBAC9C,IAAI,cAAc,GAAG,QAAQ,CAAC,WAAW,IAAI,QAAQ,CAAC,WAAW,CAAC,cAAc,CAAC;gBACjF,IAAI,iBAAiB,GAAG,CAAC,YAAY,IAAI,cAAc,IAAI,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAE1F,IAAI,CAAC,QAAQ,CAAC;oBACZ,WAAW,EAAE,YAAY;oBACzB,gBAAgB,EAAE,iBAAiB;iBACpC,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAEM,4BAAM,GAAb;YACM,IAAA,eASU,EARZ,gBAAK,EACL,0BAAU,EACV,sBAAQ,EACR,gCAAa,EACb,4BAAW,EACX,0BAAU,EACV,sBAAQ,EACR,gEAA6B,CAChB;YACX,IAAA,eAA8C,EAA5C,4BAAW,EAAE,sCAAgB,CAAgB;YAEnD,EAAE,CAAC,CAAC,6BAA6B,KAAK,SAAS,CAAC,CAAC,CAAC;gBAChD,6BAA6B,GAAG,IAAI,CAAC;YACvC,CAAC;YACD,IAAI,cAAc,GAAG,aAAa,KAAK,qBAAa,CAAC,QAAQ,CAAC;YAC9D,IAAI,uBAAuB,GAAG,cAAc,IAAI,CAAC,6BAA6B,IAAI,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;YACjH,IAAI,iBAAiB,GAAG,UAAU,IAAI,QAAQ,CAAC;YAE/C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;YACD,MAAM,CAAC,CACL,6BACE,SAAS,EAAG,eAAG,CAAC,gBAAgB,EAAE,MAAM,CAAC,IAAI;oBAC3C,GAAC,cAAc,GAAG,MAAM,CAAC,cAAc,IAAG,iBAAiB;wBAC3D,EACF,KAAK,EAAG,QAAQ,GAAG,EAAE,QAAQ,EAAE,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE,EACpD,OAAO,EAAG,IAAI,CAAC,cAAc,gBAChB,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,uBACtB,IAAI;gBAExB,oBAAC,qBAAS,IAAC,SAAS,EAAG,MAAM,CAAC,oBAAoB,EAAG,SAAS,EAAG,8BAAkB,CAAC,UAAU;oBAE1F,uBAAuB,GAAG,CAC1B,gCACE,IAAI,EAAC,QAAQ,EACb,SAAS,EAAG,eAAG,CAAC,sBAAsB,EAAE,MAAM,CAAC,KAAK,CAAC,2BAC7B,IAAI,EAC5B,OAAO,EAAG,IAAI,CAAC,yBAAyB;wBACxC,oBAAC,aAAK,IAAC,OAAO,EAAG,iBAAiB,GAAK,CAChC,CACV,GAAG,CAAC,aAAa,KAAK,qBAAa,CAAC,IAAI,GAAG,yBAAW,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;oBAG3E,yBAAW,CAAC,EAAE,KAAK,EAAE,UAAoB,EAAE,CAAC;oBAE9C,6BAAK,SAAS,EAAG,eAAG,CAAC,yBAAyB,EAAE,MAAM,CAAC,QAAQ,CAAC;wBAC9D,oBAAC,WAAI,IAAC,QAAQ,EAAC,KAAK,GAAG,CACnB;oBACN,gCACE,IAAI,EAAC,QAAQ,EACb,SAAS,EAAG,eAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,MAAM,CAAC,EACvD,OAAO,EAAG,IAAI,CAAC,iBAAiB;wBAChC,oBAAC,WAAI,IACH,SAAS,EAAG,eAAG,CACb,WAAW,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAC5D,EACD,QAAQ,EAAC,aAAa,GACtB,CACK;oBAET,6BAAK,SAAS,EAAG,eAAG,CAAC,sBAAsB,EAAE,MAAM,CAAC,KAAK,CAAC;wBACxD,kCAAQ,KAAK,CAAC,IAAI,CAAS;wBAO3B,8BAAM,SAAS,EAAG,MAAM,CAAC,WAAW;;4BAAM,KAAK,CAAC,KAAK;4BAAI,KAAK,CAAC,WAAW,IAAI,GAAG;gCAAU,CACvF;oBAEN,6BACE,SAAS,EAAG,eAAG,CACb,wBAAwB,EACxB,MAAM,CAAC,OAAO,EACd,gBAAgB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAC9D;wBAED,oBAAC,iBAAO,IAAC,KAAK,EAAG,WAAW,GAAK,CAC7B,CAEI,CACR,CACP,CAAC;;QACJ,CAAC;QAGO,uCAAiB,GAAzB,UAA0B,EAAiC;YACrD,IAAA,eAAwD,EAAtD,gBAAK,EAAE,sCAAgB,EAAE,kCAAc,CAAgB;YACvD,IAAA,oCAAW,CAAgB;YAEjC,IAAI,YAAY,GAAG,CAAC,WAAW,CAAC;YAChC,IAAI,iBAAiB,GAAG,CAAC,YAAY,IAAI,cAAc,IAAI,cAAc,CAAC,KAAM,CAAC,CAAC;YAElF,IAAI,CAAC,QAAQ,CAAC;gBACZ,WAAW,EAAE,YAAY;gBACzB,gBAAgB,EAAE,iBAA4B;aAC/C,CAAC,CAAC;YACH,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACrB,gBAAgB,CAAC,KAAM,CAAC,CAAC;YAC3B,CAAC;YAED,EAAE,CAAC,eAAe,EAAE,CAAC;YACrB,EAAE,CAAC,cAAc,EAAE,CAAC;QACtB,CAAC;QAGO,+CAAyB,GAAjC,UAAkC,EAAiC;YAC7D,IAAA,eAA2C,EAAzC,4CAAmB,EAAE,gBAAK,CAAgB;YAEhD,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBACxB,mBAAmB,CAAC,KAAM,CAAC,CAAC;YAC9B,CAAC;YAED,EAAE,CAAC,cAAc,EAAE,CAAC;YACpB,EAAE,CAAC,eAAe,EAAE,CAAC;QACvB,CAAC;QAGO,oCAAc,GAAtB;YACM,IAAA,eAA+D,EAA7D,gBAAK,EAAE,0CAAkB,EAAE,4CAAmB,CAAgB;YAEpE,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBACvB,kBAAkB,CAAC,KAAM,CAAC,CAAC;YAC7B,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBAC/B,mBAAmB,CAAC,KAAM,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC;QAxCD;YADC,oBAAQ;4DAkBR;QAGD;YADC,oBAAQ;oEAUR;QAGD;YADC,oBAAQ;yDASR;QACH,kBAAC;KAAA,AA1JD,CAAiC,yBAAa,GA0J7C;IA1JY,kCAAW","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  autobind,\n  css\n} from '../../Utilities';\nimport { IGroupDividerProps } from './GroupedList.Props';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport * as stylesImport from './GroupHeader.scss';\nconst styles: any = stylesImport;\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeader extends BaseComponent<IGroupDividerProps, IGroupHeaderState> {\n  constructor(props: IGroupDividerProps) {\n    super(props);\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false\n    };\n  }\n\n  public componentWillReceiveProps(newProps: any) {\n    if (newProps.group) {\n      let newCollapsed = newProps.group.isCollapsed;\n      let isGroupLoading = newProps.headerProps && newProps.headerProps.isGroupLoading;\n      let newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(newProps.group);\n\n      this.setState({\n        isCollapsed: newCollapsed,\n        isLoadingVisible: newLoadingVisible\n      });\n    }\n  }\n\n  public render(): JSX.Element | null {\n    let {\n      group,\n      groupLevel,\n      viewport,\n      selectionMode,\n      loadingText,\n      isSelected,\n      selected,\n      isCollapsedGroupSelectVisible\n    } = this.props;\n    let { isCollapsed, isLoadingVisible } = this.state;\n\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    let canSelectGroup = selectionMode === SelectionMode.multiple;\n    let isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    let currentlySelected = isSelected || selected;\n\n    if (!group) {\n      return null;\n    }\n    return (\n      <div\n        className={ css('ms-GroupHeader', styles.root, {\n          ['is-selected ' + styles.rootIsSelected]: currentlySelected\n        }) }\n        style={ viewport ? { minWidth: viewport.width } : {} }\n        onClick={ this._onHeaderClick }\n        aria-label={ group.ariaLabel || group.name }\n        data-is-focusable={ true } >\n\n        <FocusZone className={ styles.groupHeaderContainer } direction={ FocusZoneDirection.horizontal }>\n\n          { isSelectionCheckVisible ? (\n            <button\n              type='button'\n              className={ css('ms-GroupHeader-check', styles.check) }\n              data-selection-toggle={ true }\n              onClick={ this._onToggleSelectGroupClick } >\n              <Check checked={ currentlySelected } />\n            </button>\n          ) : (selectionMode !== SelectionMode.none ? GroupSpacer({ count: 1 }) : null)\n          }\n\n          { GroupSpacer({ count: groupLevel as number }) }\n\n          <div className={ css('ms-GroupHeader-dropIcon', styles.dropIcon) }>\n            <Icon iconName='Tag' />\n          </div>\n          <button\n            type='button'\n            className={ css('ms-GroupHeader-expand', styles.expand) }\n            onClick={ this._onToggleCollapse }>\n            <Icon\n              className={ css(\n                isCollapsed && ('is-collapsed ' + styles.expandIsCollapsed)\n              ) }\n              iconName='ChevronDown'\n            />\n          </button>\n\n          <div className={ css('ms-GroupHeader-title', styles.title) }>\n            <span>{ group.name }</span>\n            {\n              // hasMoreData flag is set when grouping is throttle by SPO server which in turn resorts to regular\n              // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n              // so far. That's the reasons we need to use \"+\" to show we might have more items than count\n              // indicates.\n            }\n            <span className={ styles.headerCount }>({ group.count }{ group.hasMoreData && '+' })</span>\n          </div>\n\n          <div\n            className={ css(\n              'ms-GroupHeader-loading',\n              styles.loading,\n              isLoadingVisible && ('is-loading ' + styles.loadingIsVisible)\n            ) }\n          >\n            <Spinner label={ loadingText } />\n          </div>\n\n        </FocusZone>\n      </div>\n    );\n  }\n\n  @autobind\n  private _onToggleCollapse(ev: React.MouseEvent<HTMLElement>) {\n    let { group, onToggleCollapse, isGroupLoading } = this.props;\n    let { isCollapsed } = this.state;\n\n    let newCollapsed = !isCollapsed;\n    let newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  }\n\n  @autobind\n  private _onToggleSelectGroupClick(ev: React.MouseEvent<HTMLElement>) {\n    let { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n\n  @autobind\n  private _onHeaderClick() {\n    let { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n  }\n}\n"]}