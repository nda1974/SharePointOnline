{"version":3,"file":"GroupedList.js","sourceRoot":"../src/","sources":["components/GroupedList/GroupedList.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  autobind,\n  assign,\n  css\n} from '../../Utilities';\nimport {\n  IGroupedList,\n  IGroupedListProps,\n  IGroup\n} from './GroupedList.Props';\nimport {\n  GroupedListSection\n} from './GroupedListSection';\nimport {\n  List\n} from '../../List';\nimport {\n  SelectionMode\n} from '../../utilities/selection/index';\nimport * as stylesImport from './GroupedList.scss';\nconst styles: any = stylesImport;\n\nexport interface IGroupedListState {\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  groups?: IGroup[];\n}\n\nexport class GroupedList extends BaseComponent<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {}\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance,\n    root: HTMLElement,\n    list: List\n  };\n\n  private _isSomeGroupExpanded: boolean;\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    this.state = {\n      lastWidth: 0,\n      groups: props.groups\n    };\n  }\n\n  public componentWillReceiveProps(newProps: IGroupedListProps) {\n    let {\n      groups,\n      selectionMode\n    } = this.props;\n    let shouldForceUpdates = false;\n\n    if (newProps.groups !== groups) {\n      this.setState({ groups: newProps.groups });\n      shouldForceUpdates = true;\n    }\n\n    if (newProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      this._forceListUpdates();\n    }\n  }\n\n  public render() {\n    let {\n      className,\n      usePageCache,\n      onShouldVirtualize\n    } = this.props;\n    let {\n      groups\n    } = this.state;\n\n    return (\n      <div\n        ref='root'\n        className={ css('ms-GroupedList', styles.root, className) }\n        data-automationid='GroupedList'\n        data-is-scrollable='false'\n        role='presentation'\n      >\n        { !groups ?\n          this._renderGroup(null, 0) : (\n            <List\n              ref='list'\n              items={ groups }\n              onRenderCell={ this._renderGroup }\n              getItemCountForPage={ () => 1 }\n              usePageCache = { usePageCache }\n              onShouldVirtualize = { onShouldVirtualize }\n            />\n          )\n        }\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean) {\n    let { groups } = this.state;\n    let { groupProps } = this.props;\n    let onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n        groups[groupIndex].isCollapsed = allCollapsed;\n      }\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  @autobind\n  private _renderGroup(group: any, groupIndex: number) {\n    let {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport\n    } = this.props;\n\n    // override group header/footer props as needed\n    let dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize\n    };\n\n    let headerProps = assign({}, groupProps!.headerProps, dividerProps);\n    let footerProps = assign({}, groupProps!.footerProps, dividerProps);\n    let groupNestingDepth = this._getGroupNestingDepth();\n\n    return (!group || group.count > 0) ? (\n      <GroupedListSection\n        ref={ 'group_' + groupIndex }\n        key={ this._getGroupKey(group, groupIndex) }\n        dragDropEvents={ dragDropEvents }\n        dragDropHelper={ dragDropHelper }\n        eventsToRegister={ eventsToRegister }\n        footerProps={ footerProps }\n        getGroupItemLimit={ groupProps && groupProps.getGroupItemLimit }\n        group={ group }\n        groupIndex={ groupIndex }\n        groupNestingDepth={ groupNestingDepth }\n        headerProps={ headerProps }\n        listProps={ listProps }\n        items={ items }\n        onRenderCell={ onRenderCell }\n        onRenderGroupHeader={ groupProps!.onRenderHeader }\n        onRenderGroupFooter={ groupProps!.onRenderFooter }\n        selectionMode={ selectionMode }\n        selection={ selection }\n        viewport={ viewport }\n      />\n    ) : null;\n  }\n\n  private _getGroupKey(group: IGroup, index: number): string {\n    return 'group-' + ((group && group.key) ? group.key : String(index));\n  }\n\n  private _getGroupNestingDepth(): number {\n    let { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  @autobind\n  private _onToggleCollapse(group: IGroup) {\n    let { groupProps } = this.props;\n    let onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  }\n\n  @autobind\n  private _onToggleSelectGroup(group: IGroup) {\n    if (group) {\n      this.props.selection!.toggleRangeSelected(group.startIndex, group.count);\n    }\n  }\n\n  private _forceListUpdates(groups?: IGroup[]) {\n    groups = groups || this.state.groups;\n\n    let groupCount = groups ? groups.length : 1;\n\n    if (this.refs.list) {\n      this.refs.list.forceUpdate();\n\n      for (let i = 0; i < groupCount; i++) {\n        let group = this.refs.list.refs['group_' + String(i)] as GroupedListSection;\n        if (group) {\n          group.forceListUpdate();\n        }\n      }\n    } else {\n      let group = this.refs['group_' + String(0)] as GroupedListSection;\n      if (group) {\n        group.forceListUpdate();\n      }\n    }\n  }\n\n  @autobind\n  private _onToggleSummarize(group: IGroup) {\n    let { groupProps } = this.props;\n    let onToggleSummarize = groupProps && groupProps.footerProps && groupProps.footerProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  }\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\n    return !!(groups && groups.some(group => group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed));\n  }\n\n  private _updateIsSomeGroupExpanded() {\n    let { groups } = this.state;\n    let { onGroupExpandStateChanged } = this.props;\n\n    let newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n"]}