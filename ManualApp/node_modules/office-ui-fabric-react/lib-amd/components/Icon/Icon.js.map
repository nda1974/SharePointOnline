{"version":3,"file":"Icon.js","sourceRoot":"../src/","sources":["components/Icon/Icon.tsx"],"names":[],"mappings":";;;IAca,QAAA,IAAI,GAAG,UAAC,KAAiB;QAElC,IAAA,2BAAS,EACT,2BAAS,EACT,2BAAoB,EACpB,yBAAQ,CACC;QACX,IAAI,MAAM,GAAG,uBAAS,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;QAEhD,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,KAAK,qBAAQ,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,KAAK,qBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YAC3E,IAAI,kBAAkB,GAAG,eAAG,CAC1B,SAAS,EACT,wBAAwB,EACxB,MAAM,CAAC,IAAI,EACX,MAAM,CAAC,cAAc,EACrB,SAAS,CACV,CAAC;YAEF,MAAM,CAAC,CACL,6BAAK,SAAS,EACZ,eAAG,CACD,kBAAkB,EAClB,MAAM,CAAC,IAAI,CACZ;gBAED,oBAAC,aAAK,uBAAM,KAAK,CAAC,UAAiB,EAAK,CACpC,CACP,CAAC;QACJ,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,cAAc,GAAG,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YAE3F,MAAM,CAAC,CACL,0DACe,SAAS,IACjB,CAAC,SAAS,GAAG,EAAE,GAAG;gBACrB,IAAI,EAAE,cAAc;gBACpB,aAAa,EAAE,IAAI;gBACnB,gBAAgB,EAAE,QAAQ;aAC3B,CAAC,EACG,0BAAc,CAAC,KAAK,EAAE,iCAAqB,CAAC,IACjD,SAAS,EACP,eAAG,CACD,SAAS,EACT,MAAM,CAAC,IAAI,EACX,KAAK,CAAC,SAAS,CAChB,KAEA,mBAAiB,CAAC,cAAc,CAAC,CAClC,CACL,CAAC;QACJ,CAAC;IACH,CAAC,CAAC","sourcesContent":["/* tslint:disable */\nimport * as React from 'react';\n/* tslint:enable */\n\nimport { IIconProps, IconType } from './Icon.Props';\nimport { Image } from '../Image/Image';\nimport {\n  css,\n  getNativeProps,\n  htmlElementProperties\n} from '../../Utilities';\nimport { IconCodes } from '../../Styling';\nimport { getStyles } from './Icon.styles';\n\nexport const Icon = (props: IIconProps): JSX.Element => {\n  let {\n    ariaLabel,\n    className,\n    styles: customStyles,\n    iconName\n   } = props;\n  let styles = getStyles(undefined, customStyles);\n\n  if (props.iconType === IconType.image || props.iconType === IconType.Image) {\n    let containerClassName = css(\n      'ms-Icon',\n      'ms-Icon-imageContainer',\n      styles.root,\n      styles.imageContainer,\n      className\n    );\n\n    return (\n      <div className={\n        css(\n          containerClassName,\n          styles.root\n        ) }\n      >\n        <Image { ...props.imageProps as any } />\n      </div>\n    );\n  } else {\n    let iconMemberName = iconName ? iconName.charAt(0).toLowerCase() + iconName.substr(1) : '';\n\n    return (\n      <i\n        aria-label={ ariaLabel }\n        { ...(ariaLabel ? {} : {\n          role: 'presentation',\n          'aria-hidden': true,\n          'data-icon-name': iconName,\n        }) }\n        { ...getNativeProps(props, htmlElementProperties) }\n        className={\n          css(\n            'ms-Icon',\n            styles.root,\n            props.className\n          ) }\n      >\n        { (IconCodes as any)[iconMemberName] }\n      </i>\n    );\n  }\n};\n"]}