{"version":3,"file":"Tooltip.Props.js","sourceRoot":"../src/","sources":["components/Tooltip/Tooltip.Props.ts"],"names":[],"mappings":";;;IAiEA,IAAY,YAGX;IAHD,WAAY,YAAY;QACtB,+CAAQ,CAAA;QACR,mDAAU,CAAA;IACZ,CAAC,EAHW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAGvB","sourcesContent":["import * as React from 'react';\nimport { Tooltip } from './Tooltip';\nimport { ICalloutProps } from '../../Callout';\nimport { IRenderFunction } from '../../Utilities';\nimport { DirectionalHint } from '../../common/DirectionalHint';\n\nexport interface ITooltip {\n\n}\n\n/**\n * Tooltip component props.\n */\nexport interface ITooltipProps extends React.HTMLAttributes<HTMLDivElement | Tooltip> {\n  /**\n   * Optional callback to access the ITooltip interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: ITooltip) => void;\n\n  /**\n   * Properties to pass through for Callout, reference detail properties in ICalloutProps\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   *  String to be passed to the tooltip\n   */\n  content?: string;\n\n  /**\n   *  Render function to populate content area\n   */\n  onRenderContent?: IRenderFunction<ITooltipProps>;\n\n  /**\n   * Length of delay. Can be set to zero if you do not want a delay.\n   * @default medium\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * Max width of tooltip\n   * @default 364px\n   */\n  maxWidth?: string | null;\n\n  /**\n   * Element to anchor the Tooltip to.\n   */\n  targetElement?: HTMLElement;\n\n  /**\n   * Indicator of how the tooltip should be anchored to its targetElement.\n   * @default DirectionalHint.topCenter\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * How the element should be positioned in RTL layouts.\n   * If not specified, a mirror of `directionalHint` will be used instead\n   */\n  directionalHintForRTL?: DirectionalHint;\n}\n\nexport enum TooltipDelay {\n  zero = 0,\n  medium = 1\n}"]}