{"version":3,"file":"TooltipHost.Props.js","sourceRoot":"../src/","sources":["components/Tooltip/TooltipHost.Props.ts"],"names":[],"mappings":";;;IAUA,IAAY,mBAMX;IAND,WAAY,mBAAmB;QAC7B,6DAA6D;QAC7D,iEAAM,CAAA;QAEN,iEAAiE;QACjE,6DAAI,CAAA;IACN,CAAC,EANW,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAM9B","sourcesContent":["import * as React from 'react';\nimport { TooltipHost } from './TooltipHost';\nimport { TooltipDelay, ITooltipProps } from './Tooltip.Props';\nimport { ICalloutProps } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\n\nexport interface ITooltipHost {\n\n}\n\nexport enum TooltipOverflowMode {\n  /** Only show tooltip if parent DOM element is overflowing */\n  Parent,\n\n  /** Only show tooltip if tooltip host's content is overflowing */\n  Self\n}\n\n/**\n * Tooltip component props.\n */\nexport interface ITooltipHostProps extends React.HTMLAttributes<HTMLDivElement | TooltipHost> {\n  /**\n   * Optional callback to access the ITooltipHost interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: ITooltipHost) => void;\n\n  /**\n   * Additional properties to pass through for Callout, reference detail properties in ICalloutProps\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   * Additional properties to pass through for Tooltip, reference detail properties in ITooltipProps\n   */\n  tooltipProps?: ITooltipProps;\n\n  /**\n   * Whether or not to mark the container as described by the tooltip.\n   * If not specified, the caller should mark as element as described by the tooltip id.\n   */\n  setAriaDescribedBy?: boolean;\n\n  /**\n   * Length of delay\n   * @default medium\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * String to be passed to the tooltip\n   */\n  content?: string;\n\n  /**\n   * Indicator of how the tooltip should be anchored to its targetElement.\n   * @default DirectionalHint.topCenter\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * How the element should be positioned in RTL layouts.\n   * If not specified, a mirror of `directionalHint` will be used instead\n   */\n  directionalHintForRTL?: DirectionalHint;\n\n  /**\n   * Only show if there is overflow. If set, the tooltip hosts observes  and only shows the tooltip if this element has overflow.\n   * It also uses the parent as target element for the tooltip.\n   */\n  overflowMode?: TooltipOverflowMode;\n\n  /**\n   * Optional class name to apply to tooltip host.\n   */\n  hostClassName?: string;\n\n  /**\n   * Notifies when tooltip becomes visible or hidden, whatever the trigger was.\n   */\n  onTooltipToggle?(isTooltipVisible: boolean): void;\n}\n"]}