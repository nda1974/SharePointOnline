{"version":3,"file":"TooltipHost.js","sourceRoot":"../src/","sources":["components/Tooltip/TooltipHost.tsx"],"names":[],"mappings":";;;IAkBA,IAAM,MAAM,GAAQ,YAAY,CAAC;IAMjC;QAAiC,uCAAmD;QAQlF,cAAc;QACd,qBAAY,KAAwB;YAApC,YACE,kBAAM,KAAK,CAAC,SAKb;YAHC,KAAI,CAAC,KAAK,GAAG;gBACX,gBAAgB,EAAE,KAAK;aACxB,CAAC;;QACJ,CAAC;QAED,SAAS;QACF,4BAAM,GAAb;YACQ,IAAA,eAWQ,EAVZ,8BAAY,EACZ,8BAAY,EACZ,oBAAO,EACP,sBAAQ,EACR,oCAAe,EACf,gDAAqB,EACrB,gBAAK,EACL,UAAE,EACF,0BAAyB,EAAzB,8CAAyB,EACzB,gCAAa,CACA;YACP,IAAA,8CAAgB,CAAgB;YACxC,IAAM,SAAS,GAAG,EAAE,IAAI,iBAAK,CAAC,SAAS,CAAC,CAAC;YACzC,MAAM,CAAC,CACL,8CACE,SAAS,EAAG,eAAG,CAAC,gBAAgB,EAAE,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,EAC7D,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IACjC,EAAE,cAAc,EAAE,IAAI,CAAC,oBAAoB,EAAE,EAC7C,EAAE,aAAa,EAAE,IAAI,CAAC,oBAAoB,EAAE,IACjD,YAAY,EAAG,IAAI,CAAC,oBAAoB,EACxC,YAAY,EAAG,IAAI,CAAC,oBAAoB,sBACrB,kBAAkB,IAAI,gBAAgB,IAAI,OAAO,GAAG,SAAS,GAAG,SAAS;gBAE1F,QAAQ;gBACR,gBAAgB,IAAI,CACpB,oBAAC,iBAAO,qBACN,EAAE,EAAG,SAAS,EACd,KAAK,EAAG,KAAK,EACb,OAAO,EAAG,OAAO,EACjB,aAAa,EAAG,IAAI,CAAC,iBAAiB,EAAE,EACxC,eAAe,EAAG,eAAe,EACjC,qBAAqB,EAAG,qBAAqB,EAC7C,YAAY,EAAG,kBAAM,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,wBAAwB,EAAE,CAAC,IAC5E,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAa,CAAC,EACzC,YAAY,EAET,CACX,CACG,CACP,CAAC;QACJ,CAAC;QAEO,uCAAiB,GAAzB;YACU,IAAA,sCAAY,CAAgB;YAEpC,2GAA2G;YAC3G,sDAAsD;YACtD,EAAE,CAAC,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBACrB,KAAK,uCAAmB,CAAC,MAAM;wBAC7B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,aAAc,CAAC;oBAE1C,KAAK,uCAAmB,CAAC,IAAI;wBAC3B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;gBAC7B,CAAC;YACH,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC3B,CAAC;QAED,eAAe;QAEP,0CAAoB,GAA5B,UAA6B,EAAO;YAC1B,IAAA,sCAAY,CAAgB;YAEpC,EAAE,CAAC,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC/B,IAAM,eAAe,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACjD,EAAE,CAAC,CAAC,eAAe,IAAI,CAAC,uBAAW,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;oBACrD,MAAM,CAAC;gBACT,CAAC;YACH,CAAC;YAED,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC;QAED,eAAe;QAEP,0CAAoB,GAA5B,UAA6B,EAAO;YAClC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;QAED,eAAe;QAEP,8CAAwB,GAAhC;YACE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;QAEO,oCAAc,GAAtB,UAAuB,gBAAyB;YAAhD,iBAKC;YAJC,IAAI,CAAC,QAAQ,CACX,EAAE,gBAAgB,kBAAA,EAAE,EACpB,cAAM,OAAA,KAAI,CAAC,KAAK,CAAC,eAAe;gBAC9B,KAAI,CAAC,KAAK,CAAC,eAAe,CAAC,KAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EADnD,CACmD,CAAC,CAAC;QAC/D,CAAC;QA/Ga,wBAAY,GAAG;YAC3B,KAAK,EAAE,4BAAY,CAAC,MAAM;SAC3B,CAAC;QA+EF;YADC,oBAAQ;+DAYR;QAID;YADC,oBAAQ;+DAGR;QAID;YADC,oBAAQ;mEAGR;QAQH,kBAAC;KAAA,AAjHD,CAAiC,yBAAa,GAiH7C;IAjHY,kCAAW","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport * as React from 'react';\n/* tslint:enable:no-unused-variable */\nimport {\n  BaseComponent,\n  autobind,\n  css,\n  divProperties,\n  getNativeProps,\n  getId,\n  assign,\n  hasOverflow\n} from '../../Utilities';\nimport { ITooltipHostProps, TooltipOverflowMode } from './TooltipHost.Props';\nimport { Tooltip } from './Tooltip';\nimport { TooltipDelay } from './Tooltip.Props';\n\nimport * as stylesImport from './TooltipHost.scss';\nconst styles: any = stylesImport;\n\nexport interface ITooltipHostState {\n  isTooltipVisible: boolean;\n}\n\nexport class TooltipHost extends BaseComponent<ITooltipHostProps, ITooltipHostState> {\n  public static defaultProps = {\n    delay: TooltipDelay.medium\n  };\n\n  // The wrapping div that gets the hover events\n  private _tooltipHost: HTMLElement;\n\n  // Constructor\n  constructor(props: ITooltipHostProps) {\n    super(props);\n\n    this.state = {\n      isTooltipVisible: false\n    };\n  }\n\n  // Render\n  public render() {\n    const {\n      calloutProps,\n      tooltipProps,\n      content,\n      children,\n      directionalHint,\n      directionalHintForRTL,\n      delay,\n      id,\n      setAriaDescribedBy = true,\n      hostClassName\n    } = this.props;\n    const { isTooltipVisible } = this.state;\n    const tooltipId = id || getId('tooltip');\n    return (\n      <div\n        className={ css('ms-TooltipHost', styles.host, hostClassName) }\n        ref={ this._resolveRef('_tooltipHost') }\n        { ...{ onFocusCapture: this._onTooltipMouseEnter } }\n        { ...{ onBlurCapture: this._onTooltipMouseLeave } }\n        onMouseEnter={ this._onTooltipMouseEnter }\n        onMouseLeave={ this._onTooltipMouseLeave }\n        aria-describedby={ setAriaDescribedBy && isTooltipVisible && content ? tooltipId : undefined }\n      >\n        { children }\n        { isTooltipVisible && (\n          <Tooltip\n            id={ tooltipId }\n            delay={ delay }\n            content={ content }\n            targetElement={ this._getTargetElement() }\n            directionalHint={ directionalHint }\n            directionalHintForRTL={ directionalHintForRTL }\n            calloutProps={ assign(calloutProps, { onDismiss: this._onTooltipCallOutDismiss }) }\n            { ...getNativeProps(this.props, divProperties) }\n            { ...tooltipProps }\n          >\n          </Tooltip>\n        ) }\n      </div>\n    );\n  }\n\n  private _getTargetElement(): HTMLElement {\n    const { overflowMode } = this.props;\n\n    // Select target element based on overflow mode. For parent mode, you want to position the tooltip relative\n    // to the parent element, otherwise it might look off.\n    if (overflowMode !== undefined) {\n      switch (overflowMode) {\n        case TooltipOverflowMode.Parent:\n          return this._tooltipHost.parentElement!;\n\n        case TooltipOverflowMode.Self:\n          return this._tooltipHost;\n      }\n    }\n\n    return this._tooltipHost;\n  }\n\n  // Show Tooltip\n  @autobind\n  private _onTooltipMouseEnter(ev: any) {\n    const { overflowMode } = this.props;\n\n    if (overflowMode !== undefined) {\n      const overflowElement = this._getTargetElement();\n      if (overflowElement && !hasOverflow(overflowElement)) {\n        return;\n      }\n    }\n\n    this._toggleTooltip(true);\n  }\n\n  // Hide Tooltip\n  @autobind\n  private _onTooltipMouseLeave(ev: any) {\n    this._toggleTooltip(false);\n  }\n\n  // Hide Tooltip\n  @autobind\n  private _onTooltipCallOutDismiss() {\n    this._toggleTooltip(false);\n  }\n\n  private _toggleTooltip(isTooltipVisible: boolean) {\n    this.setState(\n      { isTooltipVisible },\n      () => this.props.onTooltipToggle &&\n        this.props.onTooltipToggle(this.state.isTooltipVisible));\n  }\n}\n"]}