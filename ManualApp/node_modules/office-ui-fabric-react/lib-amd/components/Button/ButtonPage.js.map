{"version":3,"file":"ButtonPage.js","sourceRoot":"../src/","sources":["components/Button/ButtonPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ExampleCard,\n  IComponentDemoPageProps,\n  ComponentPage,\n  PropertiesTableSet\n} from '@uifabric/example-app-base';\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\nimport { ButtonDefaultExample } from './examples/Button.Default.Example';\nimport { ButtonContextualMenuExample } from './examples/Button.ContextualMenu.Example';\nimport { ButtonPrimaryExample } from './examples/Button.Primary.Example';\nimport { ButtonCompoundExample } from './examples/Button.Compound.Example';\nimport { ButtonActionExample } from './examples/Button.Action.Example';\nimport { ButtonCommandBarExample } from './examples/Button.CommandBar.Example';\nimport { ButtonIconExample } from './examples/Button.Icon.Example';\nimport { ButtonAnchorExample } from './examples/Button.Anchor.Example';\nimport { ButtonScreenReaderExample } from './examples/Button.ScreenReader.Example';\nimport { ButtonSwapExample } from './examples/Button.Swap.Example';\nimport { ButtonSplitExample, ButtonSplitCustomExample } from './examples/Button.Split.Example';\nimport './examples/Button.Basic.Example.scss';\nimport { Link } from '../../Link';\n\nconst ButtonDefaultExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Default.Example.tsx') as string;\nconst ButtonPrimaryExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Primary.Example.tsx') as string;\nconst ButtonCompoundExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Compound.Example.tsx') as string;\nconst ButtonActionExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Action.Example.tsx') as string;\nconst ButtonCommandBarExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.CommandBar.Example.tsx') as string;\nconst ButtonIconExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Icon.Example.tsx') as string;\nconst ButtonAnchorExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Anchor.Example.tsx') as string;\nconst ButtonScreenReaderExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.ScreenReader.Example.tsx') as string;\nconst ButtonContextualMenuExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.ContextualMenu.Example.tsx') as string;\nconst ButtonSwapExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Swap.Example.tsx') as string;\nconst ButtonSplitExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Split.Example.tsx') as string;\nconst ButtonSplitCustomExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Split.Example.tsx') as string;\n\nexport interface IButtonDemoPageState {\n  areButtonsDisabled?: boolean;\n  areButtonsChecked?: boolean;\n}\n\nexport class ButtonPage extends React.Component<IComponentDemoPageProps, IButtonDemoPageState> {\n  constructor() {\n    super();\n    this.state = {\n      areButtonsDisabled: false,\n      areButtonsChecked: false\n    };\n  }\n\n  public render() {\n    return (\n      <ComponentPage\n        title='Button'\n        componentName='ButtonExample'\n        exampleCards={\n          <div>\n            <Checkbox label='Disable buttons' checked={ this.state.areButtonsDisabled } onChange={ this._onDisabledChanged.bind(this) } />\n            <Checkbox label='Mark as checked' checked={ this.state.areButtonsChecked } onChange={ this._onToggledChanged.bind(this) } />\n            <ExampleCard title='Default Button' code={ ButtonDefaultExampleCode }>\n              <ButtonDefaultExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\n            </ExampleCard>\n            <ExampleCard title='Primary Button' code={ ButtonPrimaryExampleCode }>\n              <ButtonPrimaryExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\n            </ExampleCard>\n            <ExampleCard title='Compound Button' code={ ButtonCompoundExampleCode }>\n              <ButtonCompoundExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\n            </ExampleCard>\n            <ExampleCard title='Command Bar Button' code={ ButtonCommandBarExampleCode }>\n              <ButtonCommandBarExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\n            </ExampleCard>\n            <ExampleCard title='Action Button' code={ ButtonActionExampleCode }>\n              <ButtonActionExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\n            </ExampleCard>\n            <ExampleCard title='Icon Button' code={ ButtonIconExampleCode }>\n              <ButtonIconExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\n            </ExampleCard>\n            <ExampleCard title='Contextual Menu Button' code={ ButtonContextualMenuExampleCode }>\n              <ButtonContextualMenuExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\n            </ExampleCard>\n            <ExampleCard title='Button Like Anchor' code={ ButtonAnchorExampleCode }>\n              <ButtonAnchorExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\n            </ExampleCard>\n            <ExampleCard title='Button with Aria Description for Screen Reader' code={ ButtonScreenReaderExampleCode }>\n              <ButtonScreenReaderExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\n            </ExampleCard>\n            <ExampleCard title='Button Swap with Focus State' code={ ButtonSwapExampleCode }>\n              <ButtonSwapExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\n            </ExampleCard>\n            <ExampleCard title='SplitButton' code={ ButtonSplitExampleCode }>\n              <ButtonSplitExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\n            </ExampleCard>\n            <ExampleCard title='' code={ ButtonSplitExampleCode }>\n              <ButtonSplitCustomExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\n            </ExampleCard>\n          </div>\n        }\n        propertiesTables={\n          <div>\n            <PropertiesTableSet\n              sources={ [\n                require<string>('!raw-loader!office-ui-fabric-react/src/components/Button/Button.Props.ts')\n              ] }\n            />\n            <p>Besides the above properties, the <code>Button</code> component accepts all properties that the React <code>button</code> and <code>a</code> components accept.</p>\n          </div>\n        }\n        overview={\n          <div>\n            <p>Buttons are best used to enable a user to commit a change or complete steps in a task. They are typically found inside forms, dialogs, panels or pages. An example of their usage is confirming the deletion of a file in a confirmation dialog.</p>\n            <p>When considering their place in a layout, contemplate the order in which a user will flow through the UI. As an example, in a form, the individual will need to read and interact with the form fields before submiting the form. Therefore, as a general rule, the button should be placed at the bottom of the UI container (a dialog, panel, or page) which holds the related UI elements.</p>\n            <p>While buttons can technically be used to navigate a user to another part of the experience, this is not recommended unless that navigation is part of an action or their flow.</p>\n            <p>Note that both iconProps and menuIconProps take <Link href='#/examples/icon'>IIconProps</Link> to specify name and type.</p>\n          </div>\n        }\n        related={\n          <a href='https://dev.office.com/fabric-js/Components/Button/Button.html'>Fabric JS</a>\n        }\n        bestPractices={\n          <div></div>\n        }\n        dos={\n          <div>\n            <ul>\n              <li>Make sure the label conveys a clear purpose of the button to the user.</li>\n              <li>Button labels must describe the action the button will perform and should include a verb. Use concise, specific, self-explanatory labels, usually a single word.</li>\n              <li>Buttons should always include a noun if there is any room for interpretation about what the verb operates on.</li>\n              <li>Consider the affect localization will have on the button and what will happen to components around it.</li>\n              <li>If the button’s label content is dynamic, consider how the button will resize and what will happen to components around it.</li>\n              <li>Use only a single line of text in the label of the button.</li>\n              <li>Expose only one or two buttons to the user at a time, for example, \"Accept\" and \"Cancel\". If you need to expose more actions to the user, consider using checkboxes or radio buttons from which the user can select actions, with a single command button to trigger those actions.</li>\n              <li>Show only one primary button that inherits theme color at rest state. In the event there are more than two buttons with equal priority, all buttons should have neutral backgrounds.</li>\n              <li>\"Submit\", \"OK\", and \"Apply\" buttons should always be styled as primary buttons. When \"Reset\" or \"Cancel\" buttons appear alongside one of the above, they should be styled as secondary buttons.</li>\n              <li>Default buttons should always perform safe operations. For example, a default button should never delete.</li>\n              <li>Use task buttons to cause actions that complete a task or cause a transitional task. Do not use buttons to toggle other UX in the same context. For example, a button may be used to open an interface area but should not be used to open an additional set of components in the same interface.</li>\n            </ul>\n          </div>\n        }\n        donts={\n          <div>\n            <ul>\n              <li>Don't use generic labels like \"Ok,\" especially in the case of an error; errors are never \"Ok.\"</li>\n              <li>Don’t place the default focus on a button that destroys data. Instead, place the default focus on the button that performs the \"safe act\" and retains the content (i.e. \"Save\") or cancels the action (i.e. \"Cancel\").</li>\n              <li>Don’t use a button to navigate to another place, use a link instead. The exception is in a wizard where \"Back\" and \"Next\" buttons may be used.</li>\n              <li>Don’t put too much text in a button - try to keep the length of your text to a minimum.</li>\n              <li>Don't put anything other than text in a button.</li>\n            </ul>\n          </div>\n        }\n        isHeaderVisible={ this.props.isHeaderVisible }>\n      </ComponentPage>\n    );\n  }\n\n  private _onDisabledChanged(ev: React.MouseEvent<HTMLElement>, disabled: boolean) {\n    this.setState({\n      areButtonsDisabled: disabled\n    });\n  }\n\n  private _onToggledChanged(ev: React.MouseEvent<HTMLElement>, toggled: boolean) {\n    this.setState({\n      areButtonsChecked: toggled\n    });\n  }\n}\n"]}