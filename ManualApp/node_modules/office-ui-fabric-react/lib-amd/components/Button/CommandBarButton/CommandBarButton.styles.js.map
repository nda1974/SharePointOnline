{"version":3,"file":"CommandBarButton.styles.js","sourceRoot":"../src/","sources":["components/Button/CommandBarButton/CommandBarButton.styles.ts"],"names":[],"mappings":";;;IAaa,QAAA,SAAS,GAAG,2BAAe,CAAC,UACvC,KAAa,EACb,YAA4B,EAC5B,UAAmB,EACnB,UAAmB;QAEnB,IAAI,gBAAgB,GAAkB,6BAAmB,CAAC,KAAK,CAAC,CAAC;QACjE,IAAI,qBAAqB,GAAkB,8BAAoB,CAAC,KAAK,CAAC,CAAC;QACvE,IAAI,mBAAmB,GAAkB;YACvC,IAAI,EAAE;gBACJ,QAAQ,EAAE,MAAM;gBAChB,eAAe,EAAE,KAAK,CAAC,OAAO,CAAC,cAAc;gBAC7C,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,cAAc;gBACnC,OAAO,EAAE,OAAO;aACjB;YAED,WAAW,EAAE;gBACX,eAAe,EAAE,KAAK,CAAC,OAAO,CAAC,YAAY;gBAC3C,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,WAAW;gBAChC,IAAI,EAAE;oBACJ,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,SAAS;iBAC/B;aACF;YAED,WAAW,EAAE;gBACX,eAAe,EAAE,KAAK,CAAC,OAAO,CAAC,oBAAoB;gBACnD,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK;gBAC1B,IAAI,EAAE;oBACJ,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,SAAS;iBAC/B;aACF;YAED,WAAW,EAAE;gBACX,eAAe,EAAE,KAAK,CAAC,OAAO,CAAC,oBAAoB;gBACnD,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK;gBAC1B,IAAI,EAAE;oBACJ,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,WAAW;iBACjC;aACF;YAED,YAAY,EAAE;gBACZ,eAAe,EAAE,KAAK,CAAC,OAAO,CAAC,oBAAoB;gBACnD,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK;gBAC1B,IAAI,EAAE;oBACJ,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,SAAS;iBAC/B;aACF;YAED,kBAAkB,EAAE;gBAClB,eAAe,EAAE,KAAK,CAAC,OAAO,CAAC,iBAAiB;gBAChD,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK;aAC3B;YAED,KAAK,EAAE;gBACL,UAAU,EAAE,QAAQ,CAAC,8BAA8B;aACpD;YAED,IAAI,EAAE;gBACJ,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,YAAY;aAClC;YAED,QAAQ,EAAE;gBACR,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,gBAAgB;aACtC;SAEF,CAAC;QAEF,MAAM,CAAC,wBAAc,CAAC,gBAAgB,EAAE,mBAAmB,EAAE,qBAAqB,EAAE,YAAY,CAAE,CAAC;IACrG,CAAC,CAAC,CAAC","sourcesContent":["import { IButtonStyles } from '../Button.Props';\nimport {\n  ITheme,\n  mergeStyleSets\n} from '../../../Styling';\nimport { memoizeFunction } from '../../../Utilities';\nimport {\n  getStyles as getBaseButtonStyles\n} from '../BaseButton.styles';\nimport {\n  getStyles as getSplitButtonStyles\n} from '../SplitButton/SplitButton.styles';\n\nexport const getStyles = memoizeFunction((\n  theme: ITheme,\n  customStyles?: IButtonStyles,\n  focusInset?: string,\n  focusColor?: string\n): IButtonStyles => {\n  let baseButtonStyles: IButtonStyles = getBaseButtonStyles(theme);\n  let baseSplitButtonStyles: IButtonStyles = getSplitButtonStyles(theme);\n  let commandButtonStyles: IButtonStyles = {\n    root: {\n      minWidth: '40px',\n      backgroundColor: theme.palette.neutralLighter,\n      color: theme.palette.neutralPrimary,\n      padding: '0 4px'\n    },\n\n    rootHovered: {\n      backgroundColor: theme.palette.neutralLight,\n      color: theme.palette.neutralDark,\n      icon: {\n        color: theme.palette.themeDark\n      }\n    },\n\n    rootPressed: {\n      backgroundColor: theme.palette.neutralQuaternaryAlt,\n      color: theme.palette.black,\n      icon: {\n        color: theme.palette.themeDark\n      }\n    },\n\n    rootChecked: {\n      backgroundColor: theme.palette.neutralQuaternaryAlt,\n      color: theme.palette.black,\n      icon: {\n        color: theme.palette.themeDarker\n      }\n    },\n\n    rootExpanded: {\n      backgroundColor: theme.palette.neutralQuaternaryAlt,\n      color: theme.palette.black,\n      icon: {\n        color: theme.palette.themeDark\n      }\n    },\n\n    rootCheckedHovered: {\n      backgroundColor: theme.palette.neutralQuaternary,\n      color: theme.palette.black,\n    },\n\n    label: {\n      fontWeight: 'normal' // theme.fontWeights.semibold,\n    },\n\n    icon: {\n      color: theme.palette.themeDarkAlt\n    },\n\n    menuIcon: {\n      color: theme.palette.neutralSecondary\n    }\n\n  };\n\n  return mergeStyleSets(baseButtonStyles, commandButtonStyles, baseSplitButtonStyles, customStyles)!;\n});"]}