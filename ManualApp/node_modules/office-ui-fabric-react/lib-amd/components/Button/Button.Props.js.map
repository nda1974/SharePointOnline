{"version":3,"file":"Button.Props.js","sourceRoot":"../src/","sources":["components/Button/Button.Props.ts"],"names":[],"mappings":";;;IAgLA,IAAY,WAKX;IALD,WAAY,WAAW;QACrB,wBAAwB;QACxB,iDAAU,CAAA;QACV,mBAAmB;QACnB,iDAAU,CAAA;IACZ,CAAC,EALW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAKtB;IAED,IAAY,UAQX;IARD,WAAY,UAAU;QACpB,+CAAU,CAAA;QACV,iDAAW,CAAA;QACX,2CAAQ,CAAA;QACR,mDAAY,CAAA;QACZ,iDAAW,CAAA;QACX,2CAAQ,CAAA;QACR,iDAAW,CAAA;IACb,CAAC,EARW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAQrB","sourcesContent":["import * as React from 'react';\nimport { BaseButton } from './BaseButton';\nimport { Button } from './Button';\nimport { IRenderFunction } from '../../Utilities';\nimport { IContextualMenuProps } from '../../ContextualMenu';\nimport { IIconProps, IconName } from '../../Icon';\nimport { IStyle, ITheme } from '../../Styling';\n\nexport interface IButton {\n  /**\n   * Sets focus to the button.\n   */\n  focus: () => void;\n}\n\nexport interface IButtonProps extends React.AllHTMLAttributes<HTMLAnchorElement | HTMLButtonElement | BaseButton | Button> {\n  /**\n   * Optional callback to access the IButton interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: IButton) => void;\n\n  /**\n   * If provided, this component will be rendered as an anchor.\n   * @default ElementType.anchor\n   */\n  href?: string;\n\n  /**\n   * Unique id to identify the item. Typically a duplicate of key value.\n   */\n  uniqueId?: string | number;\n\n  /**\n   * Whether the button is disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Custom styling for individual elements within the button DOM.\n   */\n  styles?: IButtonStyles;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Whether the button is checked\n   */\n  checked?: boolean;\n\n  /**\n   * If provided, additional class name to provide on the root element.\n   */\n  className?: string;\n\n  /**\n   * The aria label of the button for the benefit of screen readers.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Detailed description of the button for the benefit of screen readers.\n   *\n   * Besides the compound button, other button types will need more information provided to screen reader.\n   */\n  ariaDescription?: string;\n\n  /**\n  * Text to render button label. If text is supplied, it will override any string in button children. Other children components will be passed through after the text.\n  */\n  text?: string;\n\n  /**\n   * The props for the icon shown in the button.\n   */\n  iconProps?: IIconProps;\n\n  /**\n   * Props for button menu. Providing this will default to showing the menu icon. See menuIconProps for overriding\n   * how the default icon looks. Providing this in addition of onClick and setting the split property to true will render a SplitButton.\n   */\n  menuProps?: IContextualMenuProps;\n\n  /**\n   * If set to true, and if menuProps and onClick are provided, the button will render as a SplitButton. Defaults to false.\n   */\n  split?: boolean;\n\n  /**\n   * The props for the icon shown when providing a menu dropdown.\n   */\n  menuIconProps?: IIconProps;\n\n  /**\n   * Custom render function for the icon\n   */\n  onRenderIcon?: IRenderFunction<IButtonProps>;\n\n  /**\n   * Custom render function for the label text.\n   */\n  onRenderText?: IRenderFunction<IButtonProps>;\n\n  /**\n   * Custom render function for the desciption text.\n   */\n  onRenderDescription?: IRenderFunction<IButtonProps>;\n\n  /**\n   * Custom render function for the aria description element.\n   */\n  onRenderAriaDescription?: IRenderFunction<IButtonProps>;\n\n  /**\n   * Custom render function for rendering the button children.\n   */\n  onRenderChildren?: IRenderFunction<IButtonProps>;\n\n  /**\n   * Custom render function for button menu icon\n   */\n  onRenderMenuIcon?: IRenderFunction<IButtonProps>;\n\n  /**\n  * Custom render function for button menu\n  */\n  onRenderMenu?: IRenderFunction<IContextualMenuProps>;\n\n  /**\n   * Description of the action this button takes.\n   * Only used for compound buttons\n   */\n  description?: string;\n\n  /**\n   * Deprecated at v1.2.3, to be removed at >= v2.0.0. Use specific button component instead\n   * @defaultvalue ButtonType.default\n   * @deprecated\n   */\n\n  buttonType?: ButtonType;\n\n  /**\n   * Deprecated at v0.56.2, to be removed at >= v1.0.0. Just pass in button props instead;\n   * they will be mixed into the button/anchor element rendered by the component.\n   * @deprecated\n   */\n  rootProps?: React.ButtonHTMLAttributes<HTMLButtonElement> | React.AnchorHTMLAttributes<HTMLAnchorElement>;\n\n  /**\n   * Deprecated on 4/15/2017, use iconProps={ { iconName: 'Emoji2' } }.\n   * @deprecated\n   */\n  icon?: string;\n\n  /**\n   * Deprecated on 4/15/2017, use menuIconProps={ { iconName: 'Emoji2' } }.\n   * @deprecated\n   */\n  menuIconName?: IconName | string | null;\n\n  /**\n   * Deprecated on 5/26/2016, use checked.\n   * @deprecated\n   */\n  toggled?: boolean;\n\n  /**\n * Any custom data the developer wishes to associate with the menu item.\n */\n  data?: any;\n}\n\nexport enum ElementType {\n  /** <button> element. */\n  button = 0,\n  /** <a> element. */\n  anchor = 1\n}\n\nexport enum ButtonType {\n  normal = 0,\n  primary = 1,\n  hero = 2,\n  compound = 3,\n  command = 4,\n  icon = 5,\n  default = 6\n}\n\nexport interface IButtonStyles {\n  /**\n   * Style for the root element in the default enabled, non-toggled state.\n   */\n  root?: IStyle;\n\n  /**\n   * Style override for the root element in a checked state, layered on top of the root style.\n   */\n  rootChecked?: IStyle;\n\n  /**\n   * Style override for the root element in a disabled state, layered on top of the root style.\n   */\n  rootDisabled?: IStyle;\n\n  /**\n   * Style override applied to the root on hover in the default, enabled, non-toggled state.\n   */\n  rootHovered?: IStyle;\n\n  /**\n   * Style override applied to the root on hover in the default, enabled, non-toggled state.\n   */\n  rootFocused?: IStyle;\n\n  /**\n   * Style override applied to the root on pressed in the default, enabled, non-toggled state.\n   */\n  rootPressed?: IStyle;\n\n  /**\n   * Style override applied to the root on when menu is expanded in the default, enabled, non-toggled state.\n   */\n  rootExpanded?: IStyle;\n\n  /**\n   * Style override applied to the root on hover in a checked, enabled state\n   */\n  rootCheckedHovered?: IStyle;\n\n  /**\n   * Style override applied to the root on pressed in a checked, enabled state\n   */\n  rootCheckedPressed?: IStyle;\n\n  /**\n  * Style override applied to the root on hover in a checked, disabled state\n  */\n  rootCheckedDisabled?: IStyle;\n\n  /**\n   * Style for the flexbox container within the root element.\n   */\n  flexContainer?: IStyle;\n\n  /**\n   * Style for the icon on the near side of the label.\n   */\n  icon?: IStyle;\n\n  /**\n   * Style for the icon on the near side of the label on hover.\n   */\n  iconHovered?: IStyle;\n\n  /**\n   * Style for the icon on the near side of the label when pressed.\n   */\n  iconPressed?: IStyle;\n\n  /**\n   * Style for the icon on the near side of the label when expanded.\n   */\n  iconExpanded?: IStyle;\n\n  /**\n   * Style override for the icon when the button is disabled.\n   */\n  iconDisabled?: IStyle;\n\n  /**\n   * Style override for the icon when the button is checked.\n   */\n  iconChecked?: IStyle;\n\n  /**\n   * Style for the text content of the button.\n   */\n  label?: IStyle;\n\n  /**\n   * Style override for the text content when the button is disabled.\n   */\n  labelDisabled?: IStyle;\n\n  /**\n   * Style override for the text content when the button is checked.\n   */\n  labelChecked?: IStyle;\n\n  /**\n   * Style for the menu chevron.\n   */\n  menuIcon?: IStyle;\n\n  /**\n   * Style override for the menu chevron when the button is disabled.\n   */\n  menuIconDisabled?: IStyle;\n\n  /**\n   * Style override for the menu chevron when the button is checked.\n   */\n  menuIconChecked?: IStyle;\n\n  /**\n   * Style for the description text if applicable (for compound buttons.)\n   */\n  description?: IStyle;\n\n  /**\n   * Style override for the description text when the button is hovered.\n   */\n  descriptionHovered?: IStyle;\n\n  /**\n   * Style for the description text when the button is pressed.\n   */\n  descriptionPressed?: IStyle;\n\n  /**\n   * Style override for the description text when the button is disabled.\n   */\n  descriptionDisabled?: IStyle;\n\n  /**\n   * Style override for the description text when the button is checked.\n   */\n  descriptionChecked?: IStyle;\n\n  /**\n   * Style override for the screen reader text.\n   */\n  screenReaderText?: IStyle;\n\n  /**\n     * Style override for the container div around a SplitButton element\n     */\n  splitButtonContainer?: IStyle;\n\n  /**\n   * Style override for the container div around a SplitButton element in a disabled state\n   */\n  splitButtonContainerDisabled?: IStyle;\n\n  /**\n   * Style override for the SplitButton menu button\n   */\n  splitButtonMenuButton?: IStyle;\n\n  /**\n   * Style override for the SplitButton menu button element in a disabled state.\n   */\n  splitButtonMenuButtonDisabled?: IStyle;\n\n  /**\n   * Style override for the SplitButton menu button element in a checked state\n   */\n  splitButtonMenuButtonChecked?: IStyle;\n\n  /**\n   * Style override for the SplitButton menu button element in an expanded state\n   */\n  splitButtonMenuButtonExpanded?: IStyle;\n\n  /**\n   * Style override for the SplitButton menu icon element\n   */\n  splitButtonMenuIcon?: IStyle;\n\n  /**\n   * Style override for the SplitButton menu icon element in a disabled state\n   */\n  splitButtonMenuIconDisabled?: IStyle;\n\n  /**\n   * Style override for the SplitButton FlexContainer.\n   */\n  splitButtonFlexContainer?: IStyle;\n}"]}