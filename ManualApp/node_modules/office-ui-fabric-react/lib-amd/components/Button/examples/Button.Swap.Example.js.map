{"version":3,"file":"Button.Swap.Example.js","sourceRoot":"../src/","sources":["components/Button/examples/Button.Swap.Example.tsx"],"names":[],"mappings":";;;IAaA;QAAuC,6CAAsD;QAI3F;YAAA,YACE,iBAAO,SAOR;YALC,KAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,KAAI,CAAC,KAAK,GAAG;gBACX,SAAS,EAAE,IAAI;aAChB,CAAC;;QACJ,CAAC;QAEM,+CAAmB,GAA1B,UAA2B,SAAuB,EAAE,SAAkC;YACpF,+CAA+C;YAC/C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,aAAa,KAAK,IAAI,CAAC,SAAS,CAAC;QAC5D,CAAC;QAEM,8CAAkB,GAAzB,UAA0B,SAAuB,EAAE,SAAkC;YACnF,oDAAoD;YACpD,mEAAmE;YACnE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,aAAa,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC/D,IAAI,CAAC,SAAU,CAAC,KAAK,EAAE,CAAC;YAC1B,CAAC;QACH,CAAC;QAEM,kCAAM,GAAb;YACQ,IAAA,gCAAS,CAAgB;YAC3B,IAAA,eAAkC,EAAhC,sBAAQ,EAAE,oBAAO,CAAgB;YACvC,IAAI,IAAI,GAAG,MAAM,CAAC;YAElB,mCAAmC;YACnC,IAAI,MAAM,GAAG,SAAS;kBAClB,oBAAC,sBAAa,IACd,GAAG,EAAG,IAAI,CAAC,aAAa,EACxB,QAAQ,EAAG,QAAQ,EACnB,OAAO,EAAG,OAAO,EACjB,OAAO,EAAG,IAAI,CAAC,QAAQ,IACrB,IAAI,CACQ;kBACd,oBAAC,sBAAa,IACd,GAAG,EAAG,IAAI,CAAC,aAAa,EACxB,QAAQ,EAAG,QAAQ,EACnB,OAAO,EAAG,OAAO,EACjB,OAAO,EAAG,IAAI,CAAC,QAAQ,IACrB,IAAI,CACQ,CAAC;YAEnB,MAAM,CAAC,CACL,6BAAK,SAAS,EAAC,wBAAwB;gBACrC,oBAAC,aAAK,qCAAmC;gBACvC,MAAM,CACJ,CACP,CAAC;QACJ,CAAC;QAGO,yCAAa,GAArB,UAAsB,GAAQ;YAC5B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAgB,CAAC;QAC5D,CAAC;QAGO,oCAAQ,GAAhB;YACE,kCAAkC;YAClC,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;QACtD,CAAC;QARD;YADC,oBAAQ;8DAGR;QAGD;YADC,oBAAQ;yDAIR;QACH,wBAAC;KAAA,AAnED,CAAuC,KAAK,CAAC,SAAS,GAmErD;IAnEY,8CAAiB","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport {\n  autobind\n} from 'office-ui-fabric-react/lib/Utilities';\nimport { DefaultButton, PrimaryButton, IButtonProps } from 'office-ui-fabric-react/lib/Button';\nimport { Label } from 'office-ui-fabric-react/lib/Label';\n\nexport interface IButtonSwapExampleState {\n  isPrimary: boolean;\n}\n\nexport class ButtonSwapExample extends React.Component<IButtonProps, IButtonSwapExampleState> {\n  private buttonRef: HTMLElement | null;\n  private hasFocus: boolean;\n\n  public constructor() {\n    super();\n\n    this.hasFocus = false;\n    this.buttonRef = null;\n    this.state = {\n      isPrimary: true\n    };\n  }\n\n  public componentWillUpdate(nextProps: IButtonProps, nextState: IButtonSwapExampleState): void {\n    // check to see if our button element has focus\n    this.hasFocus = document.activeElement === this.buttonRef;\n  }\n\n  public componentDidUpdate(prevProps: IButtonProps, prevState: IButtonSwapExampleState): void {\n    // if our button previously had focus but we lost it\n    // because we switched the control type, we need to set focus again\n    if (this.hasFocus && document.activeElement !== this.buttonRef) {\n      this.buttonRef!.focus();\n    }\n  }\n\n  public render() {\n    let { isPrimary } = this.state;\n    let { disabled, checked } = this.props;\n    let text = 'Swap';\n\n    // determine which button to render\n    let button = isPrimary\n      ? <PrimaryButton\n        ref={ this._setButtonRef }\n        disabled={ disabled }\n        checked={ checked }\n        onClick={ this._onClick }>\n        { text }\n      </PrimaryButton>\n      : <DefaultButton\n        ref={ this._setButtonRef }\n        disabled={ disabled }\n        checked={ checked }\n        onClick={ this._onClick }>\n        { text }\n      </DefaultButton>;\n\n    return (\n      <div className='ms-BasicButtonsExample'>\n        <Label>Click to swap button types</Label>\n        { button }\n      </div>\n    );\n  }\n\n  @autobind\n  private _setButtonRef(ref: any): void {\n    this.buttonRef = ReactDOM.findDOMNode(ref) as HTMLElement;\n  }\n\n  @autobind\n  private _onClick(): void {\n    // change the button type on click\n    this.setState({ isPrimary: !this.state.isPrimary });\n  }\n}"]}