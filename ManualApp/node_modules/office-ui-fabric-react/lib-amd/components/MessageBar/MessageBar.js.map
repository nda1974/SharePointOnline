{"version":3,"file":"MessageBar.js","sourceRoot":"../src/","sources":["components/MessageBar/MessageBar.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  DelayedRender,\n  css,\n  getId\n} from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { IMessageBarProps, MessageBarType } from './MessageBar.Props';\nimport * as stylesImport from './MessageBar.scss';\nconst styles: any = stylesImport;\n\nexport interface IMessageBarState {\n  labelId?: string;\n  showContent?: boolean;\n}\n\nexport class MessageBar extends BaseComponent<IMessageBarProps, IMessageBarState> {\n\n  public static defaultProps: IMessageBarProps = {\n    messageBarType: MessageBarType.info,\n    onDismiss: undefined,\n    isMultiline: true,\n  };\n\n  private ICON_MAP = {\n    [MessageBarType.info]: 'Info',\n    [MessageBarType.warning]: 'Info',\n    [MessageBarType.error]: 'ErrorBadge',\n    [MessageBarType.blocked]: 'Blocked',\n    [MessageBarType.remove]: 'Blocked', // TODO remove deprecated value at >= 1.0.0\n    [MessageBarType.severeWarning]: 'Warning',\n    [MessageBarType.success]: 'Completed'\n  };\n\n  constructor(props: IMessageBarProps) {\n    super(props);\n\n    this.state = {\n      labelId: getId('MessageBar'),\n      showContent: false\n    };\n  }\n\n  public render(): JSX.Element {\n    let { isMultiline } = this.props;\n\n    return isMultiline ? this._renderMultiLine() : this._renderSingleLine();\n  }\n\n  private _getActionsDiv(): JSX.Element | null {\n    if (this.props.actions) {\n      return <div className={ this.props.isMultiline ?\n        ('ms-MessageBar-actions ' + styles.actions) :\n        ('ms-MessageBar-actionsOneline ' + styles.actionsOneline) }>\n        { this.props.actions }\n      </div>;\n    }\n    return null;\n  }\n\n  private _getClassName(): string {\n    return css(this.props.className, 'ms-MessageBar', styles.root, {\n      ['ms-MessageBar ' + styles.root]: this.props.messageBarType === MessageBarType.info,\n      ['ms-MessageBar--error ' + styles.rootIsError]: this.props.messageBarType === MessageBarType.error,\n      ['ms-MessageBar--blocked ' + styles.rootIsBlocked]: (this.props.messageBarType === MessageBarType.blocked) ||\n      (this.props.messageBarType === MessageBarType.remove), // TODO remove deprecated value at >= 1.0.0\n      ['ms-MessageBar--severeWarning ' + styles.rootIsSevereWarning]: this.props.messageBarType === MessageBarType.severeWarning,\n      ['ms-MessageBar--success ' + styles.rootIsSuccess]: this.props.messageBarType === MessageBarType.success,\n      ['ms-MessageBar--warning ' + styles.rootIsWarning]: this.props.messageBarType === MessageBarType.warning\n    });\n  }\n\n  private _getDismissDiv(): JSX.Element | null {\n    if (this.props.onDismiss) {\n      return (\n        <IconButton\n          disabled={ false }\n          className={ css('ms-MessageBar-dismissal', styles.dismissal) }\n          onClick={ this.props.onDismiss }\n          iconProps={ { iconName: 'Cancel' } }\n          ariaLabel={ this.props.dismissButtonAriaLabel }\n        />\n      );\n    }\n    return null;\n  }\n\n  private _getDismissOneLine(): JSX.Element | null {\n    if (this.props.onDismiss) {\n      return (\n        <div className={ css('ms-MessageBar-dismissOneline', styles.dismissOneline) }>\n          { this._getDismissDiv() }\n        </div>\n      );\n    }\n    return null;\n  }\n\n  private _getIconSpan(): JSX.Element {\n    return (\n      <div className={ css('ms-MessageBar-icon', styles.icon) }>\n        <Icon iconName={ this.ICON_MAP[this.props.messageBarType!] } />\n      </div>\n    );\n  }\n\n  private _getInnerTextClassName(): string {\n    return this.props.onDismiss || this.props.actions ?\n      'ms-MessageBar-innerTextPadding ' + styles.innerTextPadding : 'ms-MessageBar-innerText ' + styles.innerText;\n  }\n\n  private _renderMultiLine(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    return (\n      <div\n        className={\n          css(this._getClassName(),\n            'ms-MessageBar-multiline',\n            styles.multiline,\n            this.props.onDismiss && styles.dismissalMultiline,\n            this.props.actions && styles.actionableMultiline\n          )\n        }\n        role='status'\n        aria-live={ this._getAnnouncementPriority() }>\n        <div className={ css(styles.content, 'ms-MessageBar-content') }>\n          { this._getIconSpan() }\n          { this._renderInnerText() }\n          { this._getDismissDiv() }\n        </div>\n        { this._getActionsDiv() }\n      </div >\n    );\n  }\n\n  private _renderSingleLine(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    return (\n      <div className={\n        css(this._getClassName(),\n          'ms-MessageBar-singleline',\n          styles.singleline,\n          this.props.onDismiss && 'ms-MessageBar-dismissalOneline ' + styles.rootIsOneline,\n          this.props.actions && styles.actionableOneline\n        )\n      } >\n        <div className={ css(styles.content, 'ms-MessageBar-content') }>\n          { this._getIconSpan() }\n          { this._renderInnerText() }\n          { this._getDismissOneLine() }\n        </div>\n        { this._getActionsDiv() }\n      </div >\n    );\n  }\n\n  private _renderInnerText(): JSX.Element {\n    return (\n      <div className={ css('ms-MessageBar-text', styles.text) } id={ this.state.labelId }>\n        <span className={ this._getInnerTextClassName() } role='status' aria-live={ this._getAnnouncementPriority() }>\n          <DelayedRender>\n            <span>{ this.props.children }</span>\n          </DelayedRender>\n        </span>\n      </div>\n    );\n  }\n\n  private _getAnnouncementPriority(): string {\n    switch (this.props.messageBarType) {\n      case MessageBarType.blocked:\n      case MessageBarType.error:\n      case MessageBarType.severeWarning:\n        return 'assertive';\n    }\n    return 'polite';\n  }\n}\n"]}