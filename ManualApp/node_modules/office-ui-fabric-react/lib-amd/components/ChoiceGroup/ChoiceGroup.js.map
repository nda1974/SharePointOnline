{"version":3,"file":"ChoiceGroup.js","sourceRoot":"../src/","sources":["components/ChoiceGroup/ChoiceGroup.tsx"],"names":[],"mappings":";;;IAcA,IAAM,MAAM,GAAQ,YAAY,CAAC;IASjC;QAAiC,uCAAmD;QASlF,qBAAY,KAAwB;YAApC,YACE,kBAAM,KAAK,CAAC,SAgBb;YAdC,KAAI,CAAC,iBAAiB,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC;YACpD,KAAI,CAAC,sBAAsB,CAAC;gBAC1B,WAAW,EAAE,oBAAoB;aAClC,CAAC,CAAC;YAEH,KAAI,CAAC,KAAK,GAAG;gBACX,UAAU,EAAE,CAAC,KAAK,CAAC,kBAAkB,KAAK,SAAS,CAAC;oBAClD,KAAI,CAAC,cAAc,CAAC,KAAK,CAAE;oBAC3B,KAAK,CAAC,kBAAkB;gBAC1B,UAAU,EAAE,SAAS;aACtB,CAAC;YAEF,KAAI,CAAC,GAAG,GAAG,iBAAK,CAAC,aAAa,CAAC,CAAC;YAChC,KAAI,CAAC,QAAQ,GAAG,iBAAK,CAAC,kBAAkB,CAAC,CAAC;;QAC5C,CAAC;QAEM,+CAAyB,GAAhC,UAAiC,QAA2B;YAC1D,IAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YACpD,IAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEtD,EAAE,CAAC,CAAC,aAAa,KAAK,aAAa,CAAC,CAAC,CAAC;gBACpC,IAAI,CAAC,QAAQ,CAAC;oBACZ,UAAU,EAAE,aAAc;iBAC3B,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAEM,4BAAM,GAAb;YAAA,iBA+DC;YA9DK,IAAA,eAAoD,EAAlD,gBAAK,EAAE,oBAAO,EAAE,wBAAS,EAAE,sBAAQ,CAAgB;YACrD,IAAA,eAAuC,EAArC,0BAAU,EAAE,0BAAU,CAAgB;YAE5C,MAAM,CAAC;YACL,0GAA0G;YAC1G,6BAAK,IAAI,EAAC,aAAa,EAAC,SAAS,EAAG,SAAS;gBAC3C,6BACE,SAAS,EAAG,eAAG,CAAC,qBAAqB,EAAE,MAAM,CAAC,IAAI,CAAC,EACnD,IAAI,EAAC,YAAY,qBACC,CAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,GAAG,QAAQ,GAAG,EAAE,WAAK,IAAI,CAAC,KAAa,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAE;oBAEhH,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CACpB,oBAAC,aAAK,IAAC,SAAS,EAAG,SAAS,EAAG,QAAQ,EAAG,QAAQ,EAAG,EAAE,EAAG,IAAI,CAAC,GAAG,GAAG,QAAQ,IAAK,KAAK,CAAU,CAClG;oBAEC,OAAQ,CAAC,GAAG,CAAC,UAAC,MAA0B;wBAEtC,IAAA,yBAAmC,EAAnC,yDAAmC,EACnC,yBAAmC,EAAnC,yDAAmC,CAC1B;wBAEX,mCAAmC;wBACnC,kBAAM,CAAC,MAAM,EAAE;4BACb,OAAO,EAAE,MAAM,CAAC,GAAG,KAAK,UAAU;4BAClC,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,KAAI,CAAC,KAAK,CAAC,QAAQ;4BAChD,EAAE,EAAK,KAAI,CAAC,GAAG,SAAI,MAAM,CAAC,GAAK;4BAC/B,OAAO,EAAK,KAAI,CAAC,QAAQ,SAAI,MAAM,CAAC,GAAK;4BACzC,aAAa,eAAA;yBACd,CAAC,CAAC;wBAEH,MAAM,CAAC,CACL,6BACE,GAAG,EAAG,MAAM,CAAC,GAAG,EAChB,SAAS,EAAG,eAAG,CAAC,gBAAgB,EAAE,MAAM,CAAC,WAAW;gCAClD,GAAC,wBAAwB,GAAG,MAAM,CAAC,kBAAkB,IAAG,CAAC,CAAC,MAAM,CAAC,QAAQ;gCACzE,GAAC,uBAAuB,GAAG,MAAM,CAAC,iBAAiB,IAAG,CAAC,CAAC,MAAM,CAAC,SAAS;gCACxE,GAAC,aAAa,GAAG,MAAM,CAAC,oBAAoB,IAAG,MAAM,CAAC,GAAG,KAAK,UAAU;oCACxE;4BAGF,gDACE,GAAG,EAAG,KAAI,CAAC,WAAW,CAAC,eAAe,CAAC,EACvC,EAAE,EAAG,MAAM,CAAC,EAAE,EACd,SAAS,EAAG,eAAG,CAAC,sBAAsB,EAAE,MAAM,CAAC,KAAK,CAAC,EACrD,IAAI,EAAC,OAAO,EACZ,IAAI,EAAG,KAAI,CAAC,KAAK,CAAC,IAAI,IAAI,KAAI,CAAC,GAAG,EAClC,QAAQ,EAAG,MAAM,CAAC,QAAQ,IAAI,KAAI,CAAC,KAAK,CAAC,QAAQ,EACjD,OAAO,EAAG,MAAM,CAAC,GAAG,KAAK,UAAU,EACnC,QAAQ,EAAG,QAAQ,EACnB,QAAQ,EAAG,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,EAAE,MAAM,CAAC,EAC5C,OAAO,EAAG,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAI,EAAE,MAAM,CAAC,EAC1C,MAAM,EAAG,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAI,EAAE,MAAM,CAAC,qBACtB,MAAM,CAAC,EAAE,IACtB,0BAAc,CAAC,MAAM,EAAE,2BAAe,CAAC,EAC5C;4BACA,aAAa,CAAC,MAAM,EAAE,KAAI,CAAC,cAAc,CAAC,CACxC,CACP,CAAC;;oBACJ,CAAC,CAAC,CACE,CACF,CACP,CAAC;QACJ,CAAC;QAEM,2BAAK,GAAZ;YACE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAC7B,CAAC;QACH,CAAC;QAEO,8BAAQ,GAAhB,UAAiB,MAA0B,EAAE,EAAiC;YAC5E,IAAI,CAAC,QAAQ,CAAC;gBACZ,UAAU,EAAE,MAAM,CAAC,GAAG;gBACtB,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU;aAClC,CAAC,CAAC;QACL,CAAC;QAEO,6BAAO,GAAf,UAAgB,MAA0B,EAAE,EAAiC;YAC3E,IAAI,CAAC,QAAQ,CAAC;gBACZ,UAAU,EAAE,SAAS;gBACrB,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU;aAClC,CAAC,CAAC;QACL,CAAC;QAEO,oCAAc,GAAtB,UAAuB,MAA0B;YAEzC,IAAA,oCAAa,CAAY;YAE/B,MAAM,CAAC,CACL,+BACE,OAAO,EAAG,MAAM,CAAC,EAAE,EACnB,SAAS,EAAG,eAAG,CAAC,sBAAsB,EAAE,MAAM,CAAC,KAAK;oBAClD,GAAC,8BAA8B,GAAG,MAAM,CAAC,YAAY,IAAG,CAAC,CAAC,MAAM,CAAC,QAAQ;oBACzE,GAAC,uBAAuB,GAAG,MAAM,CAAC,WAAW,IAAG,CAAC,CAAC,MAAM,CAAC,SAAS;oBAClE,GAAC,aAAa,GAAG,MAAM,CAAC,cAAc,IAAG,MAAM,CAAC,OAAO;oBACvD,GAAC,cAAc,GAAG,MAAM,CAAC,eAAe,IAAG,MAAM,CAAC,QAAQ;wBAC1D;gBAGA,MAAM,CAAC,QAAQ,IAAI,CACjB,6BAAK,SAAS,EAAG,eAAG,CAAC,2BAA2B,EAAE,MAAM,CAAC,UAAU,CAAC;oBAClE,6BAAK,SAAS,EAAG,eAAG,CAClB,6BAA6B,EAC7B,MAAM,CAAC,YAAY;4BAEjB,GAAC,YAAY,GAAG,MAAM,CAAC,oBAAoB,IAAG,MAAM,CAAC,OAAO;gCAC5D;wBAEF,oBAAC,aAAK,IACJ,GAAG,EAAG,MAAM,CAAC,QAAQ,EACrB,KAAK,EAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS,EAC7D,MAAM,EAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,GAC/D,CACE;oBACN,6BAAK,SAAS,EAAG,eAAG,CAClB,6BAA6B,EAC7B,MAAM,CAAC,YAAY;4BAEjB,GAAC,YAAY,GAAG,MAAM,CAAC,oBAAoB,IAAG,CAAC,MAAM,CAAC,OAAO;gCAC7D;wBAEF,oBAAC,aAAK,IACJ,GAAG,EAAG,MAAM,CAAC,gBAAgB,EAC7B,KAAK,EAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS,EAC7D,MAAM,EAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,GAC/D,CACE,CACF,CACP;gBAGD,MAAM,CAAC,SAAS;sBACZ,6BAAK,SAAS,EAAG,eAAG,CAAC,2BAA2B,EAAE,MAAM,CAAC,UAAU,CAAC;wBACpE,6BAAK,SAAS,EAAG,eAAG,CAAC,4BAA4B,EAAE,MAAM,CAAC,WAAW,CAAC;4BACpE,oBAAC,WAAI,uBAAM,MAAM,CAAC,SAAS,EAAK,CAC5B,CACF;sBACJ,IAAI;gBAGR,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,SAAS;sBAC/B,CACA,6BAAK,SAAS,EAAG,eAAG,CAAC,6BAA6B,EAAE,MAAM,CAAC,YAAY,CAAC,IACpE,aAAc,CAAC,MAAM,CAAC,CACpB,CACP,GAAG,aAAc,CAAC,MAAM,CAAC,CAExB,CACT,CAAC;;QACJ,CAAC;QAEO,oCAAc,GAAtB,UAAuB,MAA0B;YAC/C,MAAM,CAAC,CACL,8BAAM,EAAE,EAAG,MAAM,CAAC,OAAO,EAAG,SAAS,EAAC,UAAU,IAAG,MAAM,CAAC,IAAI,CAAS,CACxE,CAAC;QACJ,CAAC;QAEO,+BAAS,GAAjB,UAAkB,MAA0B,EAAE,GAAsC;YAC9E,IAAA,eAAiD,EAA/C,wBAAS,EAAE,sBAAQ,EAAE,4BAAW,CAAgB;YAEtD,+CAA+C;YAC/C,EAAE,CAAC,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC9B,IAAI,CAAC,QAAQ,CAAC;oBACZ,UAAU,EAAE,MAAM,CAAC,GAAG;iBACvB,CAAC,CAAC;YACL,CAAC;YAED,+FAA+F;YAC/F,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACb,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YACxB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACrB,SAAS,CAAC,MAAM,CAAC,CAAC;YACpB,CAAC;QACH,CAAC;QAED;;;WAGG;QACK,oCAAc,GAAtB,UAAuB,KAAwB;YAC7C,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC;gBACpC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC;YAC3B,CAAC;YAED,IAAM,cAAc,GAAG,KAAK,CAAC,OAAQ,CAAC,MAAM,CAAC,UAAC,MAA0B;gBACtE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;YACxB,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,SAAS,CAAC;YACnB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YAC/B,CAAC;QACH,CAAC;QAxOa,wBAAY,GAAsB;YAC9C,OAAO,EAAE,EAAE;SACZ,CAAC;QAuOJ,kBAAC;KAAA,AA1OD,CAAiC,yBAAa,GA0O7C;IA1OY,kCAAW","sourcesContent":["import * as React from 'react';\nimport { Image } from '../../Image';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport { IChoiceGroupOption, IChoiceGroupProps } from './ChoiceGroup.Props';\nimport {\n  assign,\n  BaseComponent,\n  css,\n  getId,\n  getNativeProps,\n  inputProperties\n} from '../../Utilities';\nimport * as stylesImport from './ChoiceGroup.scss';\nconst styles: any = stylesImport;\n\nexport interface IChoiceGroupState {\n  keyChecked: string | number;\n\n  /** Is true when the control has focus. */\n  keyFocused?: string | number;\n}\n\nexport class ChoiceGroup extends BaseComponent<IChoiceGroupProps, IChoiceGroupState> {\n  public static defaultProps: IChoiceGroupProps = {\n    options: []\n  };\n\n  private _id: string;\n  private _labelId: string;\n  private _inputElement: HTMLInputElement | null;\n\n  constructor(props: IChoiceGroupProps, ) {\n    super(props);\n\n    this._warnDeprecations({ 'onChanged': 'onChange' });\n    this._warnMutuallyExclusive({\n      selectedKey: 'defaultSelectedKey'\n    });\n\n    this.state = {\n      keyChecked: (props.defaultSelectedKey === undefined) ?\n        this._getKeyChecked(props)! :\n        props.defaultSelectedKey,\n      keyFocused: undefined\n    };\n\n    this._id = getId('ChoiceGroup');\n    this._labelId = getId('ChoiceGroupLabel');\n  }\n\n  public componentWillReceiveProps(newProps: IChoiceGroupProps) {\n    const newKeyChecked = this._getKeyChecked(newProps);\n    const oldKeyCheched = this._getKeyChecked(this.props);\n\n    if (newKeyChecked !== oldKeyCheched) {\n      this.setState({\n        keyChecked: newKeyChecked!,\n      });\n    }\n  }\n\n  public render() {\n    let { label, options, className, required } = this.props;\n    let { keyChecked, keyFocused } = this.state;\n\n    return (\n      // Need to assign role application on containing div because JAWS doesn't call OnKeyDown without this role\n      <div role='application' className={ className }>\n        <div\n          className={ css('ms-ChoiceFieldGroup', styles.root) }\n          role='radiogroup'\n          aria-labelledby={ `${this.props.label ? this._id + '-label' : ''} ${(this.props as any)['aria-labelledby'] || ''}` }\n        >\n          { this.props.label && (\n            <Label className={ className } required={ required } id={ this._id + '-label' }>{ label }</Label>\n          ) }\n\n          { options!.map((option: IChoiceGroupOption) => {\n            let {\n              onRenderField = this._onRenderField,\n              onRenderLabel = this._onRenderLabel\n            } = option;\n\n            // Merge internal props into option\n            assign(option, {\n              checked: option.key === keyChecked,\n              disabled: option.disabled || this.props.disabled,\n              id: `${this._id}-${option.key}`,\n              labelId: `${this._labelId}-${option.key}`,\n              onRenderLabel\n            });\n\n            return (\n              <div\n                key={ option.key }\n                className={ css('ms-ChoiceField', styles.choiceField, {\n                  ['ms-ChoiceField--image ' + styles.choiceFieldIsImage]: !!option.imageSrc,\n                  ['ms-ChoiceField--icon ' + styles.choiceFieldIsIcon]: !!option.iconProps,\n                  ['is-inFocus ' + styles.choiceFieldIsInFocus]: option.key === keyFocused\n                })\n                }\n              >\n                <input\n                  ref={ this._resolveRef('_inputElement') }\n                  id={ option.id }\n                  className={ css('ms-ChoiceField-input', styles.input) }\n                  type='radio'\n                  name={ this.props.name || this._id }\n                  disabled={ option.disabled || this.props.disabled }\n                  checked={ option.key === keyChecked }\n                  required={ required }\n                  onChange={ this._onChange.bind(this, option) }\n                  onFocus={ this._onFocus.bind(this, option) }\n                  onBlur={ this._onBlur.bind(this, option) }\n                  aria-labelledby={ option.id }\n                  { ...getNativeProps(option, inputProperties) }\n                />\n                { onRenderField(option, this._onRenderField) }\n              </div>\n            );\n          }) }\n        </div>\n      </div>\n    );\n  }\n\n  public focus() {\n    if (this._inputElement) {\n      this._inputElement.focus();\n    }\n  }\n\n  private _onFocus(option: IChoiceGroupOption, ev: React.FocusEvent<HTMLElement>): void {\n    this.setState({\n      keyFocused: option.key,\n      keyChecked: this.state.keyChecked\n    });\n  }\n\n  private _onBlur(option: IChoiceGroupOption, ev: React.FocusEvent<HTMLElement>): void {\n    this.setState({\n      keyFocused: undefined,\n      keyChecked: this.state.keyChecked\n    });\n  }\n\n  private _onRenderField(option: IChoiceGroupOption) {\n\n    let { onRenderLabel } = option;\n\n    return (\n      <label\n        htmlFor={ option.id }\n        className={ css('ms-ChoiceField-field', styles.field, {\n          ['ms-ChoiceField-field--image ' + styles.fieldIsImage]: !!option.imageSrc,\n          ['ms-ChoiceField--icon ' + styles.fieldIsIcon]: !!option.iconProps,\n          ['is-checked ' + styles.fieldIsChecked]: option.checked,\n          ['is-disabled ' + styles.fieldIsDisabled]: option.disabled\n        }) }\n      >\n        {\n          option.imageSrc && (\n            <div className={ css('ms-ChoiceField-innerField', styles.innerField) }>\n              <div className={ css(\n                'ms-ChoiceField-imageWrapper',\n                styles.imageWrapper,\n                {\n                  ['is-hidden ' + styles.imageWrapperIsHidden]: option.checked\n                }) }\n              >\n                <Image\n                  src={ option.imageSrc }\n                  width={ option.imageSize ? option.imageSize.width : undefined }\n                  height={ option.imageSize ? option.imageSize.height : undefined }\n                />\n              </div>\n              <div className={ css(\n                'ms-ChoiceField-imageWrapper',\n                styles.imageWrapper,\n                {\n                  ['is-hidden ' + styles.imageWrapperIsHidden]: !option.checked\n                }) }\n              >\n                <Image\n                  src={ option.selectedImageSrc }\n                  width={ option.imageSize ? option.imageSize.width : undefined }\n                  height={ option.imageSize ? option.imageSize.height : undefined }\n                />\n              </div>\n            </div>\n          )\n        }\n        {\n          option.iconProps\n            ? <div className={ css('ms-ChoiceField-innerField', styles.innerField) }>\n              <div className={ css('ms-ChoiceField-iconWrapper', styles.iconWrapper) }>\n                <Icon { ...option.iconProps } />\n              </div>\n            </div>\n            : null\n        }\n        {\n          option.imageSrc || option.iconProps\n            ? (\n              <div className={ css('ms-ChoiceField-labelWrapper', styles.labelWrapper) }>\n                { onRenderLabel!(option) }\n              </div>\n            ) : onRenderLabel!(option)\n        }\n      </label>\n    );\n  }\n\n  private _onRenderLabel(option: IChoiceGroupOption): JSX.Element {\n    return (\n      <span id={ option.labelId } className='ms-Label'>{ option.text }</span>\n    );\n  }\n\n  private _onChange(option: IChoiceGroupOption, evt: React.FormEvent<HTMLInputElement>) {\n    let { onChanged, onChange, selectedKey } = this.props;\n\n    // Only manage state in uncontrolled scenarios.\n    if (selectedKey === undefined) {\n      this.setState({\n        keyChecked: option.key\n      });\n    }\n\n    // TODO: onChanged deprecated, remove else if after 07/17/2017 when onChanged has been removed.\n    if (onChange) {\n      onChange(evt, option);\n    } else if (onChanged) {\n      onChanged(option);\n    }\n  }\n\n  /**\n   * If all the isChecked property of options are falsy values, return undefined;\n   * Else return the key of the first option with the truthy isChecked property.\n   */\n  private _getKeyChecked(props: IChoiceGroupProps): string | number | undefined {\n    if (props.selectedKey !== undefined) {\n      return props.selectedKey;\n    }\n\n    const optionsChecked = props.options!.filter((option: IChoiceGroupOption) => {\n      return option.checked;\n    });\n\n    if (optionsChecked.length === 0) {\n      return undefined;\n    } else {\n      return optionsChecked[0].key;\n    }\n  }\n}\n"]}