{"version":3,"file":"Modal.Props.js","sourceRoot":"../src/","sources":["components/Modal/Modal.Props.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { Modal } from './Modal';\nimport { IWithResponsiveModeState } from '../../utilities/decorators/withResponsiveMode';\nimport { IAccessiblePopupProps } from '../../common/IAccessiblePopupProps';\n\nexport interface IModal {\n\n}\n\nexport interface IModalProps extends React.Props<Modal>, IWithResponsiveModeState, IAccessiblePopupProps {\n  /**\n   * Optional callback to access the IDialog interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: IModal) => void;\n\n  /**\n  * Whether the dialog is displayed.\n  * @default false\n  */\n  isOpen?: boolean;\n\n  /**\n  * Whether the overlay is dark themed.\n  * @default true\n  */\n  isDarkOverlay?: boolean;\n\n  /**\n  * A callback function for when the Modal is dismissed light dismiss, before the animation completes.\n  */\n  onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement>) => any;\n\n  /**\n   * A callback function which is called after the Modal is dismissed and the animation is complete.\n   */\n  onDismissed?: () => any;\n\n  /**\n  * Whether the dialog can be light dismissed by clicking outside the dialog (on the overlay).\n  * @default false\n  */\n  isBlocking?: boolean;\n\n  /**\n   * Optional class name to be added to the root class\n   */\n  className?: string;\n\n  /**\n  * Optional override for container class\n  */\n  containerClassName?: string;\n\n  /**\n   * A callback function for when the Modal content is mounted on the overlay layer\n   */\n  onLayerDidMount?: () => void;\n\n  /**\n   * ARIA id for the title of the Modal, if any\n   */\n  titleAriaId?: string;\n\n  /**\n   * ARIA id for the subtitle of the Modal, if any\n   */\n  subtitleAriaId?: string;\n}"]}