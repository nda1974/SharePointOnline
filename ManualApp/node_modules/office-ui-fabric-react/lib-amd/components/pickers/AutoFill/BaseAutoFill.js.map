{"version":3,"file":"BaseAutoFill.js","sourceRoot":"../src/","sources":["components/pickers/AutoFill/BaseAutoFill.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IBaseAutoFillProps, IBaseAutoFill } from './BaseAutoFill.Props';\nimport {\n  BaseComponent,\n  KeyCodes,\n  autobind,\n  getNativeProps,\n  inputProperties\n} from '../../../Utilities';\n\nexport interface IBaseAutoFillState {\n  displayValue?: string;\n}\n\nconst SELECTION_FORWARD = 'forward';\nconst SELECTION_BACKWARD = 'backward';\n\nexport class BaseAutoFill extends BaseComponent<IBaseAutoFillProps, IBaseAutoFillState> implements IBaseAutoFill {\n\n  public static defaultProps = {\n    enableAutoFillOnKeyPress: [KeyCodes.down, KeyCodes.up]\n  };\n\n  private _inputElement: HTMLInputElement;\n  private _autoFillEnabled: boolean = true;\n  private _value: string;\n\n  constructor(props: IBaseAutoFillProps) {\n    super(props);\n    this._value = '';\n    this.state = {\n      displayValue: props.defaultVisibleValue === null ? '' : props.defaultVisibleValue\n    };\n  }\n\n  public get cursorLocation(): number {\n    if (this._inputElement) {\n      let inputElement = this._inputElement;\n      if (inputElement.selectionDirection !== SELECTION_FORWARD) {\n        return inputElement.selectionEnd;\n      } else {\n        return inputElement.selectionStart;\n      }\n    } else {\n      return -1;\n    }\n  }\n\n  public get isValueSelected(): boolean {\n    return this.inputElement.selectionStart !== this.inputElement.selectionEnd;\n  }\n\n  public get value(): string {\n    return this._value;\n  }\n\n  public get selectionStart(): number {\n    return this._inputElement ? this._inputElement.selectionStart : -1;\n  }\n\n  public get selectionEnd(): number {\n    return this._inputElement ? this._inputElement.selectionEnd : -1;\n  }\n\n  public get inputElement(): HTMLInputElement {\n    return this._inputElement;\n  }\n\n  public componentWillReceiveProps(nextProps: IBaseAutoFillProps) {\n    let newValue;\n\n    if (this.props.updateValueInWillReceiveProps) {\n      newValue = this.props.updateValueInWillReceiveProps();\n    }\n\n    if (this._autoFillEnabled && this._doesTextStartWith(nextProps.suggestedDisplayValue!, newValue ? newValue : this._value)) {\n      newValue = nextProps.suggestedDisplayValue;\n    }\n\n    if (typeof newValue === 'string') {\n      this.setState({ displayValue: newValue });\n    }\n  }\n\n  public componentDidUpdate() {\n    let value = this._value;\n    let {\n      suggestedDisplayValue,\n      shouldSelectFullInputValueInComponentDidUpdate\n    } = this.props;\n    let differenceIndex = 0;\n\n    if (this._autoFillEnabled && value && suggestedDisplayValue && this._doesTextStartWith(suggestedDisplayValue, value)) {\n      let shouldSelectFullRange = false;\n\n      if (shouldSelectFullInputValueInComponentDidUpdate) {\n        shouldSelectFullRange = shouldSelectFullInputValueInComponentDidUpdate();\n      }\n\n      if (shouldSelectFullRange) {\n        this._inputElement.setSelectionRange(0, suggestedDisplayValue.length, SELECTION_BACKWARD);\n      } else {\n        while (differenceIndex < value.length && value[differenceIndex].toLocaleLowerCase() === suggestedDisplayValue[differenceIndex].toLocaleLowerCase()) {\n          differenceIndex++;\n        }\n        if (differenceIndex > 0) {\n          this._inputElement.setSelectionRange(differenceIndex, suggestedDisplayValue.length, SELECTION_BACKWARD);\n        }\n      }\n    }\n  }\n\n  public render() {\n    let {\n      displayValue\n    } = this.state;\n\n    const nativeProps = getNativeProps(this.props, inputProperties);\n    return <input { ...nativeProps}\n      ref={ this._resolveRef('_inputElement') }\n      value={ displayValue }\n      autoCapitalize={ 'off' }\n      autoComplete={ 'off' }\n      onChange={ this._onChange }\n      onKeyDown={ this._onKeyDown }\n      onClick={ this.props.onClick ? this.props.onClick : this._onClick }\n    />;\n  }\n\n  public focus() {\n    this._inputElement.focus();\n  }\n\n  public clear() {\n    this._autoFillEnabled = true;\n    this._updateValue('');\n    this._inputElement.setSelectionRange(0, 0);\n  }\n\n  @autobind\n  private _onClick() {\n    if (this._value && this._value !== '' && this._autoFillEnabled) {\n      this._autoFillEnabled = false;\n    }\n  }\n\n  @autobind\n  private _onKeyDown(ev: React.KeyboardEvent<HTMLInputElement>) {\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n    }\n\n    switch (ev.which) {\n      case KeyCodes.backspace:\n        this._autoFillEnabled = false;\n        break;\n      case KeyCodes.left:\n        if (this._autoFillEnabled) {\n          this._autoFillEnabled = false;\n        }\n        break;\n      case KeyCodes.right:\n        if (this._autoFillEnabled) {\n          this._autoFillEnabled = false;\n        }\n        break;\n      default:\n        if (!this._autoFillEnabled) {\n          if (this.props.enableAutoFillOnKeyPress!.indexOf(ev.which) !== -1) {\n            this._autoFillEnabled = true;\n          }\n        }\n        break;\n    }\n  }\n\n  @autobind\n  private _onChange(ev: React.FormEvent<HTMLElement>) {\n    let value: string = (ev.target as HTMLInputElement).value;\n    if (value && (ev.target as HTMLInputElement).selectionStart === value.length && !this._autoFillEnabled && value.length > this._value.length) {\n      this._autoFillEnabled = true;\n    }\n    this._updateValue(value);\n  }\n\n  private _notifyInputChange(newValue: string) {\n    if (this.props.onInputValueChange) {\n      this.props.onInputValueChange(newValue);\n    }\n  }\n\n  private _updateValue(newValue: string) {\n    this._value = newValue;\n    let displayValue = newValue;\n    if (this.props.suggestedDisplayValue &&\n      this._doesTextStartWith(this.props.suggestedDisplayValue, displayValue)\n      && this._autoFillEnabled) {\n      displayValue = this.props.suggestedDisplayValue;\n    }\n    this.setState({\n      displayValue: newValue\n    }, () => this._notifyInputChange(newValue));\n  }\n\n  private _doesTextStartWith(text: string, startWith: string) {\n    if (!text || !startWith) {\n      return false;\n    }\n    return text.toLocaleLowerCase().indexOf(startWith.toLocaleLowerCase()) === 0;\n  }\n}"]}