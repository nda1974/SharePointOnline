{"version":3,"file":"BaseAutoFill.Props.js","sourceRoot":"../src/","sources":["components/pickers/AutoFill/BaseAutoFill.Props.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { BaseAutoFill } from './BaseAutoFill';\nimport { KeyCodes } from '../../../Utilities';\nexport interface IBaseAutoFill {\n\n  /**\n   * The current index of the cursor in the input area. Returns -1 if the input element\n   * is not ready.\n   */\n  cursorLocation: number;\n  /**\n   * A boolean for whether or not there is a value selected in the input area.\n   */\n  isValueSelected: boolean;\n  /**\n   * The current text value that the user has entered.\n   */\n  value: string;\n  /**\n   * The current index of where the selection starts. Returns -1 if the input element\n   * is not ready.\n   */\n  selectionStart: number;\n  /**\n   * the current index of where the selection ends. Returns -1 if the input element\n   * is not ready.\n   */\n  selectionEnd: number;\n  /**\n   * The current input element.\n   */\n  inputElement: HTMLInputElement;\n  /**\n   * Focus the input element.\n   */\n  focus(): void;\n  /**\n   * Clear all text in the input. Sets value to '';\n   */\n  clear(): void;\n}\n\nexport interface IBaseAutoFillProps extends\n  React.InputHTMLAttributes<HTMLInputElement | BaseAutoFill> {\n  /**\n   * Gets the compoonent ref.\n   */\n  componentRef?: (componentRef?: IBaseAutoFill) => void;\n\n  /**\n   * The suggested autofill value that will display.\n   */\n  suggestedDisplayValue?: string;\n  /**\n   * A callback for when the current input value changes.\n   */\n  onInputValueChange?: (newValue?: string) => void;\n\n  /**\n   * When the user uses left arrow, right arrow, clicks, or deletes text autofill is disabled\n   * Since the user has taken control. It is automatically reenabled when the user enters text and the\n   * cursor is at the end of the text in the input box. This specifies other key presses that will reenabled\n   * autofill.\n   * @default [KeyCodes.down, KeyCodes.up]\n   */\n  enableAutoFillOnKeyPress?: KeyCodes[];\n\n  /**\n   * the default value to be visible\n   */\n  defaultVisibleValue?: string;\n\n  /**\n   * Handler for checking and updating the value if needed\n   *  in componentWillReceiveProps\n   *\n   * @param {IBaseAutoFillProps} defaultVisibleValue - the defaultVisibleValue that got passed\n   *  in to the auto fill's componentWillReceiveProps\n   * @returns {string} - the updated value to set, if needed\n   */\n  updateValueInWillReceiveProps?: () => string | null;\n\n  /**\n   * Handler for checking if the full value of the input should\n   * be seleced in componentDidUpdate\n   *\n   * @returns {boolean} - should the full value of the input be selected?\n   */\n  shouldSelectFullInputValueInComponentDidUpdate?: () => boolean;\n\n}"]}