{"version":3,"file":"Layer.Hosted.Example.js","sourceRoot":"../src/","sources":["components/Layer/examples/Layer.Hosted.Example.tsx"],"names":[],"mappings":";;;IAOA;QAAwC,8CAAyB;QAC/D;YAAA,YACE,iBAAO,SAKR;YAJC,KAAI,CAAC,KAAK,GAAG;gBACX,SAAS,EAAE,KAAK;gBAChB,QAAQ,EAAE,IAAI;aACf,CAAC;;QACJ,CAAC;QAEM,mCAAM,GAAb;YAAA,iBA0CC;YAzCK,IAAA,eAAoC,EAAlC,wBAAS,EAAE,sBAAQ,CAAgB;YACzC,IAAI,OAAO,GAAG,CACZ,6BAAK,SAAS,EAAG,uBAAuB,GAAG,6BAAmB,CAAC,YAAY,qCAErE,CACP,CAAC;YAEF,MAAM,CAAC,CACL;gBACE,oBAAC,eAAM,IACL,KAAK,EAAC,WAAW,EACjB,OAAO,EAAG,QAAQ,EAClB,SAAS,EAAG,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,EAApC,CAAoC,GAAK;gBAEhE,QAAQ,IAAI,CACZ,oBAAC,iBAAS,IAAC,EAAE,EAAC,YAAY,EAAC,SAAS,EAAC,yBAAyB,GAAG,CAClE;gBAED,2BAAG,EAAE,EAAC,KAAK,uUAEP;gBAEJ,oBAAC,mBAAQ,IACP,KAAK,EAAC,oEAAoE,EAC1E,OAAO,EAAG,SAAS,EACnB,QAAQ,EAAG,UAAC,EAAE,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAArC,CAAqC,GAAK;gBAEtE,SAAS,GAAG,CACZ,oBAAC,aAAK,IACJ,MAAM,EAAC,YAAY,EACnB,eAAe,EAAG,cAAM,OAAA,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAvB,CAAuB,EAC/C,kBAAkB,EAAG,cAAM,OAAA,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,EAA1B,CAA0B,IAEnD,OAAO,CACH,CACT,GAAG,OAAO;gBAEX,6BAAK,SAAS,EAAC,yBAAyB,uCAAuC,CAE3E,CACP,CAAC;QACJ,CAAC;QACH,yBAAC;IAAD,CAAC,AApDD,CAAwC,KAAK,CAAC,SAAS,GAoDtD;IApDY,gDAAkB","sourcesContent":["import * as React from 'react';\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\nimport { Layer, LayerHost } from 'office-ui-fabric-react/lib/Layer';\nimport { Toggle } from 'office-ui-fabric-react/lib/Toggle';\nimport './Layer.Example.scss';\nimport { AnimationClassNames } from '../../../Styling';\n\nexport class LayerHostedExample extends React.Component<any, any> {\n  constructor() {\n    super();\n    this.state = {\n      showLayer: false,\n      showHost: true\n    };\n  }\n\n  public render() {\n    let { showLayer, showHost } = this.state;\n    let content = (\n      <div className={ 'LayerExample-content ' + AnimationClassNames.scaleUpIn100 } >\n        This is example layer content.\n      </div>\n    );\n\n    return (\n      <div>\n        <Toggle\n          label='Show host'\n          checked={ showHost }\n          onChanged={ checked => this.setState({ showHost: checked }) } />\n\n        { showHost && (\n          <LayerHost id='layerhost1' className='LayerExample-customHost' />\n        ) }\n\n        <p id='foo'>\n          In some cases, you may need to contain layered content within an area. Create an instance of a LayerHost along with an id, and provide a hostId on the layer to render it within the specific host. (Note that it's important that you don't include children within the LayerHost. It's meant to contain Layered content only.)\n        </p>\n\n        <Checkbox\n          label='Render the box below in a Layer and target it at hostId=layerhost1'\n          checked={ showLayer }\n          onChange={ (ev, checked) => this.setState({ showLayer: checked }) } />\n\n        { showLayer ? (\n          <Layer\n            hostId='layerhost1'\n            onLayerDidMount={ () => console.log('didmount') }\n            onLayerWillUnmount={ () => console.log('willunmount') }\n          >\n            { content }\n          </Layer>\n        ) : content }\n\n        <div className='LayerExample-nonLayered'>I am normally below the content.</div>\n\n      </div>\n    );\n  }\n}\n"]}