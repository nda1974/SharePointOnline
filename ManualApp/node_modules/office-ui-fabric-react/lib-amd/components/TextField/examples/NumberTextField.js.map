{"version":3,"file":"NumberTextField.js","sourceRoot":"../src/","sources":["components/TextField/examples/NumberTextField.tsx"],"names":[],"mappings":";;;IAcA;QAAqC,2CAA6D;QAChG,yBAAY,KAA4B;YAAxC,YACE,kBAAM,KAAK,CAAC,SASb;YAPC,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;YACzC,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;YAC7C,KAAI,CAAC,eAAe,GAAG,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;YAEvD,KAAI,CAAC,KAAK,GAAG;gBACX,KAAK,EAAE,KAAK,CAAC,YAAY;aAC1B,CAAC;;QACJ,CAAC;QAEM,gCAAM,GAAb;YACE,MAAM,CAAC,CACL,6BAAK,SAAS,EAAC,iBAAiB;gBAC9B,oBAAC,qBAAS,IACR,SAAS,EAAC,2BAA2B,EACrC,KAAK,EAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EACxB,KAAK,EAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EACxB,SAAS,EAAG,IAAI,CAAC,UAAU,EAC3B,iBAAiB,EAAG,IAAI,CAAC,eAAe,GACxC;gBACF,6BAAK,SAAS,EAAC,+BAA+B;oBAC5C,oBAAC,sBAAa,IAAC,OAAO,EAAG,IAAI,CAAC,QAAQ,cAEtB,CACZ,CACF,CACP,CAAC;QACJ,CAAC;QAEO,yCAAe,GAAvB,UAAwB,KAAa;YACnC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;kBACvB,6CAA2C,KAAK,MAAG;kBACnD,EAAE,CAAC;QACT,CAAC;QAEO,oCAAU,GAAlB,UAAmB,KAAa;YAC9B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;gBACnB,KAAK,OAAA;aACN,CAAC,CAAC;QACL,CAAC;QAEO,kCAAQ,GAAhB;YACE,IAAI,CAAC,QAAQ,CAAC;gBACZ,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;aAC/B,CAAC,CAAC;QACL,CAAC;QACH,sBAAC;IAAD,CAAC,AAjDD,CAAqC,KAAK,CAAC,SAAS,GAiDnD;IAjDY,0CAAe","sourcesContent":["import * as React from 'react';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\nimport './NumberTextField.scss';\n\nexport interface INumberTextFieldProps {\n  label: string;\n  initialValue: string;\n}\n\nexport interface INumberTextFieldState {\n  value: string;\n}\n\nexport class NumberTextField extends React.Component<INumberTextFieldProps, INumberTextFieldState> {\n  constructor(props: INumberTextFieldProps) {\n    super(props);\n\n    this._restore = this._restore.bind(this);\n    this._onChanged = this._onChanged.bind(this);\n    this._validateNumber = this._validateNumber.bind(this);\n\n    this.state = {\n      value: props.initialValue\n    };\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div className='NumberTextField'>\n        <TextField\n          className='NumberTextField-textField'\n          label={ this.props.label }\n          value={ this.state.value }\n          onChanged={ this._onChanged }\n          onGetErrorMessage={ this._validateNumber }\n        />\n        <div className='NumberTextField-restoreButton'>\n          <DefaultButton onClick={ this._restore }>\n            Restore\n          </DefaultButton>\n        </div>\n      </div>\n    );\n  }\n\n  private _validateNumber(value: string): string {\n    return isNaN(Number(value))\n      ? `The value should be a number, actual is ${value}.`\n      : '';\n  }\n\n  private _onChanged(value: string): void {\n    return this.setState({\n      value\n    });\n  }\n\n  private _restore(): void {\n    this.setState({\n      value: this.props.initialValue\n    });\n  }\n}\n"]}