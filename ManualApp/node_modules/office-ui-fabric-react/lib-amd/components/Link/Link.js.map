{"version":3,"file":"Link.js","sourceRoot":"../src/","sources":["components/Link/Link.tsx"],"names":[],"mappings":";;;IAWA,IAAM,MAAM,GAAQ,YAAY,CAAC;IAOjC;QAA0B,gCAA8B;QAAxD;;QAsDA,CAAC;QAnDQ,qBAAM,GAAb;YACM,IAAA,eAAoD,EAAlD,sBAAQ,EAAE,sBAAQ,EAAE,wBAAS,EAAE,cAAI,CAAgB;YAEzD,MAAM,CAAC,CACL,IAAI,GAAG,CACL,8CACO,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,4BAAgB,CAAC,IACjD,SAAS,EAAG,eAAG,CACb,SAAS,EACT,MAAM,CAAC,IAAI,EACX,SAAS,EACT,QAAQ,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC,EAChD,CAAC,QAAQ,IAAI,MAAM,CAAC,SAAS,CAC9B,EACD,OAAO,EAAG,IAAI,CAAC,QAAQ,EACvB,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAC/B,MAAM,EAAG,IAAI,CAAC,KAAK,CAAC,MAAM,KAExB,QAAQ,CACR,CACL,GAAG,CACA,mDACO,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,4BAAgB,CAAC,IACjD,SAAS,EAAG,eAAG,CACb,SAAS,EACT,MAAM,CAAC,IAAI,EACX,SAAS,EACT,QAAQ,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC,CACjD,EACD,OAAO,EAAG,IAAI,CAAC,QAAQ,EACvB,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAE7B,QAAQ,CACH,CACV,CAAC,CAAC;QACT,CAAC;QAEM,oBAAK,GAAZ;YACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACrB,CAAC;QACH,CAAC;QAGO,uBAAQ,GAAhB,UAAiB,EAA2D;YACpE,IAAA,4BAAO,CAAgB;YAE7B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACZ,OAAO,CAAC,EAAE,CAAC,CAAC;YACd,CAAC;QACH,CAAC;QAND;YADC,oBAAQ;4CAOR;QACH,WAAC;KAAA,AAtDD,CAA0B,yBAAa,GAsDtC;IAtDY,oBAAI","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  anchorProperties,\n  autobind,\n  buttonProperties,\n  css,\n  getNativeProps\n} from '../../Utilities';\nimport { ILink, ILinkProps } from './Link.Props';\nimport * as stylesImport from './Link.scss';\nconst styles: any = stylesImport;\n\ninterface IMyScreen extends Screen {\n  left: number;\n  top: number;\n}\n\nexport class Link extends BaseComponent<ILinkProps, any> implements ILink {\n  private _link: HTMLElement;\n\n  public render() {\n    let { disabled, children, className, href } = this.props;\n\n    return (\n      href ? (\n        <a\n          { ...getNativeProps(this.props, anchorProperties) }\n          className={ css(\n            'ms-Link',\n            styles.root,\n            className,\n            disabled && ('is-disabled ' + styles.isDisabled),\n            !disabled && styles.isEnabled\n          ) }\n          onClick={ this._onClick }\n          ref={ this._resolveRef('_link') }\n          target={ this.props.target }\n        >\n          { children }\n        </a>\n      ) : (\n          <button\n            { ...getNativeProps(this.props, buttonProperties) }\n            className={ css(\n              'ms-Link',\n              styles.root,\n              className,\n              disabled && ('is-disabled ' + styles.isDisabled)\n            ) }\n            onClick={ this._onClick }\n            ref={ this._resolveRef('_link') }\n          >\n            { children }\n          </button>\n        ));\n  }\n\n  public focus() {\n    if (this._link) {\n      this._link.focus();\n    }\n  }\n\n  @autobind\n  private _onClick(ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) {\n    let { onClick } = this.props;\n\n    if (onClick) {\n      onClick(ev);\n    }\n  }\n}\n"]}