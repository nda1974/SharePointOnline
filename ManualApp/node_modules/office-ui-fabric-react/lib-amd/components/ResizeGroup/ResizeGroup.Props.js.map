{"version":3,"file":"ResizeGroup.Props.js","sourceRoot":"../src/","sources":["components/ResizeGroup/ResizeGroup.Props.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { ResizeGroup } from './ResizeGroup';\n\nexport interface IResizeGroup {\n\n}\n\nexport interface IResizeGroupProps extends React.HTMLAttributes<ResizeGroup | HTMLElement> {\n\n  /**\n   * Optional callback to access the IResizeGroup interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: IResizeGroup) => void;\n\n  /**\n   * Initial data to be passed to the onRenderData function. When there is no onGrowData provided, this data should represent what should\n   * be passed to the render function when the parent container of the ResizeGroup is at it's maximum supported width. A cacheKey property\n   * may optionally be included as part of the data. Two data objects with the same cacheKey will be assumed to take up the\n   * same width and will prevent measurements. The type of cacheKey is a string.\n  */\n  data: any;\n\n  /**\n   * Function to render the data. Called when rendering the contents to the screen and when\n   * rendering in a hidden div to measure the size of the contents.\n  */\n  onRenderData: (data: any) => JSX.Element;\n\n  /**\n   * Function to be performed on the data in order to reduce its width and make it fit into the given space.\n   * If there are no more scaling steps to apply, it should return undefined to prevent\n   * an infinite render loop.\n  */\n  onReduceData: (prevData: any) => any;\n\n  /**\n   * Function to be performed on the data in order to increase its width. It is called in scenarios where the\n   * container has more room than the previous render and we may be able to fit more content. If there are no more\n   * scaling operations to perform on teh data, it should return undefined to prevent an infinite render loop.\n  */\n  onGrowData?: (prevData: any) => any;\n\n  /**\n   * Function to be called every time data is rendered. It provides the data that was actually rendered.\n   * A use case would be adding telemetry when a particular control is shown in an overflow well or\n   * dropped as a result of onReduceData or to count the number of renders that an implementation of\n   * onReduceData triggers.\n   */\n  dataDidRender?: (renderedData: any) => void;\n}\n"]}