{"version":3,"file":"Image.Props.js","sourceRoot":"../src/","sources":["components/Image/Image.Props.ts"],"names":[],"mappings":";;;IAiEA;;OAEG;IACH,IAAY,QAwBX;IAxBD,WAAY,QAAQ;QAClB;;WAEG;QACH,2CAAU,CAAA;QAEV;;;;WAIG;QACH,6CAAW,CAAA;QAEX;;;WAGG;QACH,yCAAS,CAAA;QAET;;;WAGG;QACH,uCAAQ,CAAA;IACV,CAAC,EAxBW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAwBnB;IAED;;OAEG;IACH,IAAY,eAUX;IAVD,WAAY,eAAe;QACzB;;WAEG;QACH,+DAAa,CAAA;QAEb;;WAEG;QACH,6DAAY,CAAA;IACd,CAAC,EAVW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAU1B;IAED,IAAY,cAsBX;IAtBD,WAAY,cAAc;QACxB;;WAEG;QACH,6DAAa,CAAA;QAEb;;WAEG;QACH,uDAAU,CAAA;QAEV;;WAEG;QACH,qDAAS,CAAA;QAET;;;;WAIG;QACH,iEAAe,CAAA;IACjB,CAAC,EAtBW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAsBzB","sourcesContent":["import * as React from 'react';\n\nexport interface IImage {\n\n}\n\nexport interface IImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  /**\n   * Optional callback to access the ICheckbox interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: IImage) => void;\n\n  /**\n   * If true, fades the image in when loaded.\n   * @defaultvalue false;\n   */\n  shouldFadeIn?: boolean;\n\n  /**\n   * If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until\n   * it is successfully loaded. This disables shouldFadeIn.\n   * @defaultvalue false;\n   */\n  shouldStartVisible?: boolean;\n\n  /**\n   * If provided, adds the indicated css class to the image.\n   */\n  className?: string;\n\n  /**\n   * Used to determine how the image is scaled and cropped to fit the frame.\n   *\n   * @defaultvalue If both dimensions are provided, then the image is fit using ImageFit.scale. Otherwise, the\n   * image won't be scaled or cropped.\n   */\n  imageFit?: ImageFit;\n\n  /**\n   * Deprecated at v1.3.6, to replace the src in case of errors, use onLoadingStateChange instead and\n   * rerender the Image with a difference src.\n   * @deprecated\n   */\n  errorSrc?: string;\n\n  /**\n   * If true, the image frame will expand to fill its parent container.\n   */\n  maximizeFrame?: boolean;\n\n  /**\n   * Optional callback method for when the image load state has changed.\n   * The 'loadState' parameter indicates the current state of the Image.\n   */\n  onLoadingStateChange?: (loadState: ImageLoadState) => void;\n\n  /**\n   * Specified the cover style to be used for this image. If not\n   * specified, this will be dynamically calculated based on the\n   * aspect ratio for the image.\n   */\n  coverStyle?: ImageCoverStyle;\n}\n\n/**\n * The possible methods that can be used to fit the image.\n */\nexport enum ImageFit {\n  /**\n   * The image is not scaled. The image is centered and cropped within the content box.\n   */\n  center = 0,\n\n  /**\n   * The image is scaled to maintain its aspect ratio while being fully contained within the frame. The image will\n   * be centered horizontally and vertically within the frame. The space in the top and bottom or in the sides of\n   * the frame will be empty depending on the difference in aspect ratio between the image and the frame.\n   */\n  contain = 1,\n\n  /**\n   * The image is scaled to maintain its aspect ratio while filling the frame. Portions of the image will be cropped from\n   * the top and bottom, or from the sides, depending on the difference in aspect ratio between the image and the frame.\n   */\n  cover = 2,\n\n  /**\n   * Neither the image nor the frame are scaled. If their sizes do not match, the image will either be cropped or the\n   * frame will have empty space.\n   */\n  none = 3\n}\n\n/**\n * The cover style to be used on the image\n */\nexport enum ImageCoverStyle {\n  /**\n   * The image will be shown at 100% height of container and the width will be scaled accordingly\n   */\n  landscape = 0,\n\n  /**\n   * The image will be shown at 100% width of container and the height will be scaled accordingly\n   */\n  portrait = 1\n}\n\nexport enum ImageLoadState {\n  /**\n   * The image has not yet been loaded, and there is no error yet.\n   */\n  notLoaded = 0,\n\n  /**\n   * The image has been loaded successfully.\n   */\n  loaded = 1,\n\n  /**\n   * An error has been encountered while loading the image.\n   */\n  error = 2,\n\n  /**\n   * Deprecated at v1.3.6, to replace the src in case of errors, use onLoadingStateChange instead\n   * and rerender the Image with a difference src.\n   * @deprecated\n   */\n  errorLoaded = 3\n}\n"]}