{"version":3,"file":"DetailsRow.js","sourceRoot":"../src/","sources":["components/DetailsList/DetailsRow.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {\n  BaseComponent,\n  IDisposable,\n  assign,\n  autobind,\n  css,\n  shallowCompare,\n  getNativeProps,\n  divProperties\n} from '../../Utilities';\nimport { IColumn, CheckboxVisibility } from './DetailsList.Props';\nimport { DetailsRowCheck, IDetailsRowCheckProps } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection, IFocusZone } from '../../FocusZone';\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport {\n  IDragDropHelper,\n  IDragDropEvents,\n  IDragDropOptions,\n} from './../../utilities/dragdrop/interfaces';\nimport { IViewport } from '../../utilities/decorators/withViewport';\nimport * as stylesImport from './DetailsRow.scss';\nconst styles: any = stylesImport;\nimport { AnimationClassNames } from '../../Styling';\nimport * as checkStyles from './DetailsRowCheck.scss';\n\nexport interface IDetailsRowProps extends React.Props<DetailsRow> {\n  componentRef?: () => void;\n  item: any;\n  itemIndex: number;\n  columns: IColumn[];\n  compact?: boolean;\n  selectionMode: SelectionMode;\n  selection: ISelection;\n  eventsToRegister?: { eventName: string, callback: (item?: any, index?: number, event?: any) => void }[];\n  onDidMount?: (row?: DetailsRow) => void;\n  onWillUnmount?: (row?: DetailsRow) => void;\n  onRenderCheck?: (props: IDetailsRowCheckProps) => JSX.Element;\n  onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => any;\n  dragDropEvents?: IDragDropEvents;\n  dragDropHelper?: IDragDropHelper;\n  groupNestingDepth?: number;\n  viewport?: IViewport;\n  checkboxVisibility?: CheckboxVisibility;\n  collapseAllVisibility?: CollapseAllVisibility;\n  getRowAriaLabel?: (item: any) => string;\n  checkButtonAriaLabel?: string;\n}\n\nexport interface IDetailsRowSelectionState {\n  isSelected: boolean;\n  anySelected: boolean;\n}\n\nexport interface IDetailsRowState {\n  selectionState?: IDetailsRowSelectionState;\n  columnMeasureInfo?: {\n    index: number;\n    column: IColumn;\n    onMeasureDone: (measuredWidth: number) => void;\n  };\n  isDropping?: boolean;\n  groupNestingDepth?: number;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nexport class DetailsRow extends BaseComponent<IDetailsRowProps, IDetailsRowState> {\n  public refs: {\n    [key: string]: React.ReactInstance,\n    cellMeasurer: HTMLElement\n  };\n\n  private _root: HTMLElement | undefined;\n  private _focusZone: IFocusZone;\n  private _hasSetFocus: boolean;\n  private _droppingClassNames: string;\n  private _hasMounted: boolean;\n  private _dragDropSubscription: IDisposable;\n\n  constructor(props: IDetailsRowProps) {\n    super(props);\n\n    this.state = {\n      selectionState: this._getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false,\n      groupNestingDepth: props.groupNestingDepth\n    };\n\n    this._hasSetFocus = false;\n\n    this._droppingClassNames = '';\n\n    this._updateDroppingState = this._updateDroppingState.bind(this);\n    this._onToggleSelection = this._onToggleSelection.bind(this);\n  }\n\n  public componentDidMount() {\n    let { dragDropHelper } = this.props;\n\n    if (dragDropHelper) {\n      this._dragDropSubscription = dragDropHelper.subscribe(this._root as HTMLElement, this._events, this._getRowDragDropOptions());\n    }\n\n    this._events.on(this.props.selection, SELECTION_CHANGE, this._onSelectionChanged);\n\n    if (this.props.onDidMount && this.props.item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._hasMounted = true;\n      this.props.onDidMount(this);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IDetailsRowProps) {\n    let state = this.state;\n    let { item, onDidMount } = this.props;\n    let { columnMeasureInfo } = state;\n\n    if (this.props.itemIndex !== previousProps.itemIndex ||\n      this.props.item !== previousProps.item ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root as HTMLElement, this._events, this._getRowDragDropOptions());\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0) {\n      let newWidth = this.refs.cellMeasurer.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n\n      this.setState({\n        columnMeasureInfo: undefined\n      });\n    }\n\n    if (item && onDidMount && !this._hasMounted) {\n      this._hasMounted = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentWillUnmount() {\n    let { item, onWillUnmount } = this.props;\n\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n  }\n\n  public componentWillReceiveProps(newProps: IDetailsRowProps) {\n    this.setState({\n      selectionState: this._getSelectionState(newProps),\n      groupNestingDepth: newProps.groupNestingDepth\n    });\n  }\n\n  public render() {\n    const {\n      columns,\n      dragDropEvents,\n      item,\n      itemIndex,\n      onRenderCheck = this._onRenderCheck,\n      onRenderItemColumn,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      getRowAriaLabel,\n      checkButtonAriaLabel,\n      selection\n    } = this.props;\n    const { columnMeasureInfo, isDropping, groupNestingDepth } = this.state;\n    const { isSelected, anySelected } = this.state.selectionState as IDetailsRowSelectionState;\n    const isDraggable = Boolean(dragDropEvents && dragDropEvents.canDrag && dragDropEvents.canDrag(item));\n    const droppingClassName = isDropping ? (this._droppingClassNames ? this._droppingClassNames : DEFAULT_DROPPING_CSS_CLASS) : '';\n    const ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : null;\n    const canSelect = selection.canSelectItem!(item);\n    const isContentUnselectable = selectionMode === SelectionMode.multiple;\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n\n    return (\n      <FocusZone\n        {...getNativeProps(this.props, divProperties) }\n        direction={ FocusZoneDirection.horizontal }\n        ref={ this._onRootRef }\n        componentRef={ this._resolveRef('_focusZone') }\n        role='row'\n        aria-label={ ariaLabel }\n        className={ css(\n          'ms-DetailsRow',\n          AnimationClassNames.fadeIn400,\n          styles.root,\n          checkStyles.owner,\n          droppingClassName,\n          {\n            [`is-contentUnselectable ${styles.rootIsContentUnselectable}`]: isContentUnselectable,\n            [`is-selected ${checkStyles.isSelected} ${styles.rootIsSelected}`]: isSelected,\n            [`is-check-visible ${checkStyles.isVisible}`]: checkboxVisibility === CheckboxVisibility.always\n          }) }\n        data-is-focusable={ true }\n        data-selection-index={ itemIndex }\n        data-item-index={ itemIndex }\n        aria-rowindex={ itemIndex }\n        data-is-draggable={ isDraggable }\n        draggable={ isDraggable }\n        data-automationid='DetailsRow'\n        style={ { minWidth: viewport ? viewport.width : 0 } }\n        aria-selected={ isSelected }\n        allowFocusRoot={ true }\n      >\n        { showCheckbox && (\n          <div\n            role='gridcell'\n            aria-colindex={ 0 }\n            data-selection-toggle={ true }\n            className={ css('ms-DetailsRow-cell', 'ms-DetailsRow-cellCheck', checkStyles.owner, styles.cell, styles.checkCell) }\n          >\n            { onRenderCheck({\n              isSelected,\n              anySelected,\n              title: checkButtonAriaLabel,\n              canSelect\n            }) }\n          </div>\n        ) }\n\n        { GroupSpacer({ count: groupNestingDepth! - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0) }) }\n\n        { item && (\n          <DetailsRowFields\n            columns={ columns }\n            item={ item }\n            itemIndex={ itemIndex }\n            columnStartIndex={ showCheckbox ? 1 : 0 }\n            onRenderItemColumn={ onRenderItemColumn } />\n        ) }\n\n        { columnMeasureInfo && (\n          <span\n            role='presentation'\n            className={ css('ms-DetailsRow-cellMeasurer ms-DetailsRow-cell', styles.cellMeasurer, styles.cell) }\n            ref='cellMeasurer'\n          >\n            <DetailsRowFields\n              columns={ [columnMeasureInfo.column] }\n              item={ item }\n              itemIndex={ itemIndex }\n              columnStartIndex={ (showCheckbox ? 1 : 0) + columns.length }\n              onRenderItemColumn={ onRenderItemColumn } />\n          </span>\n        ) }\n      </FocusZone>\n    );\n  }\n\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param {number} index (the cell index)\n   * @param {(width: number) => void} onMeasureDone (the call back function when finish measure)\n   */\n  public measureCell(index: number, onMeasureDone: (width: number) => void) {\n    let column = assign({}, this.props.columns[index]) as IColumn;\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n\n    delete column.calculatedWidth;\n\n    this.setState({\n      columnMeasureInfo: {\n        index,\n        column,\n        onMeasureDone\n      }\n    });\n  }\n\n  public focus(): boolean {\n    return !!this._focusZone && this._focusZone.focus();\n  }\n\n  protected _onRenderCheck(props: IDetailsRowCheckProps) {\n    return <DetailsRowCheck { ...props } />;\n  }\n\n  private _getSelectionState(props: IDetailsRowProps): IDetailsRowSelectionState {\n    let { itemIndex, selection } = props;\n\n    return {\n      isSelected: selection.isIndexSelected(itemIndex),\n      anySelected: selection.getSelectedCount() > 0\n    };\n  }\n\n  private _onSelectionChanged() {\n    let selectionState = this._getSelectionState(this.props);\n\n    if (!shallowCompare(selectionState, this.state.selectionState)) {\n      this.setState({\n        selectionState: selectionState\n      });\n    }\n  }\n\n  private _onToggleSelection() {\n    const { selection } = this.props;\n\n    selection.toggleIndexSelected(this.props.itemIndex);\n  }\n\n  @autobind\n  private _onRootRef(focusZone: FocusZone) {\n    if (focusZone) {\n      // Need to resolve the actual DOM node, not the component. The element itself will be used for drag/drop and focusing.\n      this._root = ReactDOM.findDOMNode(focusZone) as HTMLElement;\n    } else {\n      this._root = undefined;\n    }\n  }\n\n  private _getRowDragDropOptions(): IDragDropOptions {\n    const {\n      item,\n      itemIndex,\n      dragDropEvents,\n      eventsToRegister\n    } = this.props;\n    let options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: { data: item, index: itemIndex },\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents!.onDrop,\n      onDragEnd: dragDropEvents!.onDragEnd,\n    };\n\n    return options;\n  }\n\n  /**\n   * update isDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * when change to true, that means drag enter. we will add default dropping class name\n   * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n   *\n   * when change to false, that means drag leave. we will remove the dropping class name from root element.\n   *\n   * @private\n   * @param {boolean} newValue (new isDropping state value)\n   * @param {DragEvent} event (the event trigger dropping state change which can be dragenter, dragleave etc)\n   */\n  private _updateDroppingState(newValue: boolean, event: DragEvent) {\n    let { selectionState, isDropping } = this.state;\n    let { dragDropEvents, item } = this.props;\n\n    if (!newValue) {\n      if (dragDropEvents!.onDragLeave) {\n        dragDropEvents!.onDragLeave!(item, event);\n      }\n    } else {\n      if (dragDropEvents!.onDragEnter) {\n        this._droppingClassNames = dragDropEvents!.onDragEnter!(item, event);\n      }\n    }\n\n    if (isDropping !== newValue) {\n      this.setState({ selectionState: selectionState, isDropping: newValue });\n    }\n  }\n}\n"]}