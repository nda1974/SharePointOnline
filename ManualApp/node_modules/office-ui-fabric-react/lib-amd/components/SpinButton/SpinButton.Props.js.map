{"version":3,"file":"SpinButton.Props.js","sourceRoot":"../src/","sources":["components/SpinButton/SpinButton.Props.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { Position } from '../../utilities/positioning';\nimport { IIconProps } from '../../Icon';\nimport { ITheme, IStyle } from '../../Styling';\nimport { IButtonStyles } from '../../Button';\n\nexport interface ISpinButton {\n  /**\n   * The value of the SpinButton. Use this if you intend to pass in a new value as a result of onChange events.\n   * This value is mutually exclusive to defaultValue. Use one or the other.\n   */\n  value?: string;\n\n  /**\n   * Sets focus to the spin button.\n   */\n  focus: () => void;\n}\n\nexport interface ISpinButtonProps {\n\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: (component?: ISpinButton) => void;\n\n  /**\n   * The initial value of the SpinButton. Use this if you intend for the SpinButton to be an uncontrolled component.\n   * This value is mutually exclusive to value. Use one or the other.\n   * @default 0\n   */\n  defaultValue?: string;\n\n  /**\n   * The value of the SpinButton. Use this if you intend to pass in a new value as a result of onChange events.\n   * This value is mutually exclusive to defaultValue. Use one or the other.\n   */\n  value?: string;\n\n  /**\n   * The min value of the SpinButton.\n   * @default 0\n   */\n  min?: number;\n\n  /**\n   * The max value of the SpinButton.\n   * @default 10\n   */\n  max?: number;\n\n  /**\n   * The difference between the two adjacent values of the SpinButton.\n   * @default 1\n   */\n  step?: number;\n\n  /**\n   * A description of the SpinButton for the benefit of screen readers.\n   */\n  ariaLabel?: string;\n\n  /**\n   * A title for the SpinButton used for a more descriptive name that's also visible on its tooltip.\n   */\n  title?: string;\n\n  /**\n   * Whether or not the SpinButton is disabled.\n   */\n  disabled?: boolean;\n\n  /**\n  * Optional className for SpinButton.\n  */\n  className?: string;\n\n  /**\n   * Descriptive label for the SpinButton.\n   */\n  label: string;\n\n  /**\n   * @default: Left\n   */\n  labelPosition?: Position;\n\n  /**\n   * Icon that goes along with the label for the whole SpinButton\n   */\n  iconProps?: IIconProps;\n\n  /**\n   * This callback is triggered when the value inside the SpinButton should be validated.\n   * @return {string | void} If a string is returned, it will be used as the value of the SpinButton.\n   */\n  onValidate?: (value: string) => string | void;\n\n  /**\n   * This callback is triggered when the increment button is pressed or if the user presses up arrow with focus on the input of the spinButton\n   * @return {string | void} If a string is returned, it will be used as the value of the SpinButton.\n   */\n  onIncrement?: (value: string) => string | void;\n\n  /**\n   * This callback is triggered when the decrement button is pressed or if the user presses down arrow with focus on the input of the spinButton\n   * @return {string | void} If a string is returned, it will be used as the value of the SpinButton.\n   */\n  onDecrement?: (value: string) => string | void;\n\n  /**\n   * A callback for when the user put focus on the picker\n   */\n  onFocus?: React.FocusEventHandler<HTMLInputElement>;\n\n  /**\n   * A callback for when the user moves the focus away from the picker\n   */\n  onBlur?: React.FocusEventHandler<HTMLInputElement>;\n\n  /**\n   * Icon for the increment button of the spinButton\n   */\n  incrementButtonIcon?: IIconProps;\n\n  /**\n   * Icon for the decrement button of the spinButton\n   */\n  decrementButtonIcon?: IIconProps;\n\n  /**\n   * Custom styling for individual elements within the button DOM.\n   */\n  styles?: Partial<ISpinButtonStyles>;\n\n  /**\n   * Custom styles for the upArrow button.\n   *\n   * Note: The buttons are in a checked state when arrow keys are used to\n   * incremenent/decrement the spinButton. Use rootChecked instead of rootPressed\n   * for styling when that is the case.\n   */\n  upArrowButtonStyles?: Partial<IButtonStyles>;\n\n  /**\n   * Custom styles for the downArrow button.\n   *\n   * Note: The buttons are in a checked state when arrow keys are used to\n   * incremenent/decrement the spinButton. Use rootChecked instead of rootPressed\n   * for styling when that is the case.\n   */\n  downArrowButtonStyles?: Partial<IButtonStyles>;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n}\n\nexport interface ISpinButtonStyles {\n\n  /**\n   * Styles for the root of the spin button component.\n   */\n  root: IStyle;\n\n  /**\n   * Style for the label wrapper element of the component\n   * The label wrapper contains the icon and the label.\n   */\n  labelWrapper: IStyle;\n\n  /**\n   * Style override when the label is positioned at the start.\n   */\n  labelWrapperStart: IStyle;\n\n  /**\n   * Style override when the label is positioned at the end.\n   */\n  labelWrapperEnd: IStyle;\n\n  /**\n   * Style override when the label is positioned at the top.\n   */\n  labelWrapperTop: IStyle;\n\n  /**\n   * Style override when the label is positioned at the bottom.\n   */\n  labelWrapperBottom: IStyle;\n\n  /**\n   * Style for the icon.\n   */\n  icon: IStyle;\n\n  /**\n   * Style for the label text\n   */\n  label: IStyle;\n\n  /**\n   * Style for spinButtonWrapper when enabled.\n   */\n  spinButtonWrapper: IStyle;\n\n  /**\n   * Style override when label is positioned at the top/bottom.\n   */\n  spinButtonWrapperTopBottom: IStyle;\n\n  /**\n   * Style override when spinButton is enabled/hovered.\n   */\n  spinButtonWrapperHovered: IStyle;\n\n  /**\n   * Style override when spinButton is enabled/focused.\n   */\n  spinButtonWrapperFocused: IStyle;\n\n  /**\n   * Style override when spinButton is disabled.\n   */\n  spinButtonWrapperDisabled: IStyle;\n\n  /**\n   * Styles for the input.\n   */\n  input: IStyle;\n\n  /**\n   * Style override for ::selection\n   */\n  inputTextSelected: IStyle;\n\n  /**\n   * Style override when spinButton is disabled.\n   */\n  inputDisabled: IStyle;\n\n  /**\n   * Styles for the arrowButtonsContainer\n   */\n  arrowButtonsContainer: IStyle;\n\n  /**\n   * Style override for the arrowButtonsContainer when spin button is disabled.\n   */\n  arrowButtonsContainerDisabled: IStyle;\n}\n"]}