{"version":3,"file":"List.js","sourceRoot":"../src/","sources":["components/List/List.tsx"],"names":[],"mappings":";;;IAeA,IAAM,YAAY,GAAG,EAAE,CAAC;IACxB,IAAM,uBAAuB,GAAG,GAAG,CAAC;IACpC,IAAM,uBAAuB,GAAG,GAAG,CAAC;IACpC,IAAM,mBAAmB,GAAG,GAAG,CAAC;IAChC,IAAM,sBAAsB,GAAG,EAAE,CAAC;IAClC,IAAM,mBAAmB,GAAG,EAAE,CAAC;IAC/B,IAAM,+BAA+B,GAAG,CAAC,CAAC;IAC1C,IAAM,8BAA8B,GAAG,CAAC,CAAC;IAkBzC,IAAM,UAAU,GAAG;QACjB,GAAG,EAAE,CAAC,CAAC;QACP,MAAM,EAAE,CAAC,CAAC;QACV,IAAI,EAAE,CAAC,CAAC;QACR,KAAK,EAAE,CAAC,CAAC;QACT,KAAK,EAAE,CAAC;QACR,MAAM,EAAE,CAAC;KACV,CAAC;IAEF,+DAA+D;IAC/D,IAAM,gBAAgB,GAAG,UAAC,OAAoB,IAAK,OAAA,OAAO,CAAC,qBAAqB,EAAE,EAA/B,CAA+B,CAAC;IACnF,IAAM,mBAAmB,GAAG,gBAAgB,CAAC;IAC7C,IAAM,kBAAkB,GAAG,gBAAgB,CAAC;IAE5C;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACH;QAA0B,gCAAqC;QA+C7D,cAAY,KAAiB;YAA7B,YACE,kBAAM,KAAK,CAAC,SAyCb;YAvCC,KAAI,CAAC,KAAK,GAAG;gBACX,KAAK,EAAE,EAAE;aACV,CAAC;YAEF,KAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;YAC9B,KAAI,CAAC,eAAe,GAAG,CAAC,CAAC;YACzB,KAAI,CAAC,qBAAqB,GAAG,CAAC,CAAC;YAC/B,KAAI,CAAC,sBAAsB,GAAG,CAAC,CAAC;YAEhC,4CAA4C;YAC5C,KAAI,CAAC,eAAe,GAAG,CAAC,CAAC;YAEzB,wCAAwC;YACxC,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CACxC,KAAI,CAAC,cAAc,EACnB,uBAAuB,EACvB;gBACE,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,uBAAuB;aACjC,CAAC,CAAC;YAEL,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CACtC,KAAI,CAAC,YAAY,EACjB,mBAAmB,EAAE;gBACnB,OAAO,EAAE,KAAK;aACf,CAAC,CAAC;YAEL,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CACxC,KAAI,CAAC,cAAc,EACnB,YAAY,EACZ;gBACE,OAAO,EAAE,KAAK;aACf,CAAC,CAAC;YAEL,KAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;YAC7B,KAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;YAC9B,KAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;YACxB,KAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC,CAAC;YAC5B,KAAI,CAAC,UAAU,GAAG,EAAE,CAAC;;QACvB,CAAC;QAED;;;;;;;;;WASG;QACI,4BAAa,GAApB,UAAqB,KAAa,EAAE,WAA2C;YAC7E,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,UAAoB,CAAC;YACnD,IAAM,WAAW,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YAC3C,IAAM,QAAQ,GAAG,UAAU,GAAG,WAAW,CAAC;YAE1C,IAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;YAEtC,IAAI,SAAS,GAAG,CAAC,CAAC;YAElB,IAAI,YAAY,GAAG,CAAC,CAAC;YACrB,GAAG,CAAC,CAAC,IAAI,SAAS,GAAG,UAAU,EAAE,SAAS,GAAG,QAAQ,EAAE,SAAS,IAAI,YAAY,EAAE,CAAC;gBACjF,IAAM,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;gBAE7E,IAAM,UAAU,GAAG,iBAAiB,CAAC,MAAM,CAAC;gBAC5C,YAAY,GAAG,iBAAiB,CAAC,SAAS,CAAC;gBAE3C,IAAM,sBAAsB,GAAG,SAAS,IAAI,KAAK,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,GAAG,KAAK,CAAC;gBACxF,EAAE,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC;oBAC3B,kHAAkH;oBAClH,gEAAgE;oBAChE,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBAChB,8CAA8C;wBAC9C,IAAM,sBAAsB,GAAG,KAAK,GAAG,SAAS,CAAC;wBACjD,GAAG,CAAC,CAAC,IAAI,eAAe,GAAG,CAAC,EAAE,eAAe,GAAG,sBAAsB,EAAE,EAAE,eAAe,EAAE,CAAC;4BAC1F,SAAS,IAAI,WAAW,CAAC,SAAS,GAAG,eAAe,CAAC,CAAC;wBACxD,CAAC;wBACD,IAAM,YAAY,GAAG,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;wBAEpD,IAAM,UAAU,GAAG,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;wBAC3D,IAAM,YAAY,GAAG;4BACnB,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS;4BAClC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,GAAG,UAAU,CAAC,MAAM;yBAC1D,CAAC;wBAEF,IAAM,kBAAkB,GAAG,SAAS,IAAI,YAAY,CAAC,GAAG,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,CAAC;wBAChG,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;4BACvB,uCAAuC;4BACvC,MAAM,CAAC;wBACT,CAAC;wBAED,IAAM,oBAAoB,GAAG,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC;wBAC1D,IAAM,oBAAoB,GAAG,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC;wBAEhE,EAAE,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;4BACzB,qCAAqC;4BACrC,UAAU;4BACV,yBAAyB;4BACzB,YAAY;4BACZ,gCAAgC;4BAChC,aAAa;4BACb,aAAa;wBACf,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;4BAChC,yDAAyD;4BACzD,wBAAwB;4BACxB,WAAW;4BACX,mCAAmC;4BACnC,aAAa;4BACb,aAAa;4BACb,4BAA4B;4BAC5B,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,GAAG,CAAC,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;wBACnF,CAAC;oBACH,CAAC;oBAED,IAAI,CAAC,cAAc,CAAC,SAAS,GAAG,SAAS,CAAC;oBAC1C,KAAK,CAAC;gBACR,CAAC;gBAED,SAAS,IAAI,UAAU,CAAC;YAC1B,CAAC;QACH,CAAC;QAEM,gCAAiB,GAAxB;YAEE,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,cAAc,GAAG,gCAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAgB,CAAC;YAE1E,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YACvD,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAC9D,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC/D,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YACtE,CAAC;QACH,CAAC;QAEM,wCAAyB,GAAhC,UAAiC,QAAoB;YACnD,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK;gBACrC,QAAQ,CAAC,WAAW,KAAK,IAAI,CAAC,KAAK,CAAC,WAAW;gBAC/C,QAAQ,CAAC,UAAU,KAAK,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;gBAEhD,sGAAsG;gBACtG,6EAA6E;gBAC7E,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBAC7B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;gBAE1B,IAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,IAAI,CAAC,oBAAoB,EAAE,CAAC;gBAC5B,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC;QAEM,oCAAqB,GAA5B,UAA6B,QAAoB,EAAE,QAAoB;YACjE,IAAA,eAA4D,EAA1D,8CAAoB,EAAE,gDAAqB,CAAgB;YAC3D,IAAA,2BAAe,CAAgB;YAC/B,IAAA,yBAAe,EAAE,wCAAc,CAAc;YACnD,IAAI,qBAAqB,GAAG,KAAK,CAAC;YAElC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK;gBACrC,QAAS,CAAC,MAAM,KAAK,QAAS,CAAC,MAAM,CAAC,CAAC,CAAC;gBACxC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBAC1C,IAAI,OAAO,GAAG,QAAS,CAAC,CAAC,CAAC,CAAC;oBAC3B,IAAI,OAAO,GAAG,QAAS,CAAC,CAAC,CAAC,CAAC;oBAE3B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,KAAK,OAAO,CAAC,GAAG;wBAC9B,OAAO,CAAC,SAAS,KAAK,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;wBAC3C,qBAAqB,GAAG,IAAI,CAAC;wBAC7B,KAAK,CAAC;oBACR,CAAC;gBACH,CAAC;YACH,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,qBAAqB,GAAG,IAAI,CAAC;YAC/B,CAAC;YAED,MAAM,CAAC,qBAAqB,CAAC;QAC/B,CAAC;QAEM,0BAAW,GAAlB;YACE,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC5B,sFAAsF;YACtF,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC1C,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,eAAe,EAAE,CAAC;YAEvB,iBAAM,WAAW,WAAE,CAAC;QACtB,CAAC;QAEM,qBAAM,GAAb;YACQ,IAAA,eAIQ,EAHZ,wBAAS,EACT,cAAI,EACJ,oBAAiC,EAAjC,sDAAiC,CACpB;YAEb,IAAA,qBAAU,EAAV,+BAAU,CACG;YACf,IAAI,YAAY,GAAkB,EAAE,CAAC;YACrC,IAAI,QAAQ,GAAG,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAa,CAAC,CAAC;YAEzD,GAAG,CAAC,CAAe,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;gBAAnB,IAAM,IAAI,cAAA;gBACb,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;aAC3C;YAED,uDAAuD;YAEvD,MAAM,CAAC,CACL,8CACE,GAAG,EAAC,MAAM,IACL,QAAQ,IACb,IAAI,EAAG,CAAC,IAAI,KAAK,SAAS,CAAC,GAAG,MAAM,GAAG,IAAI,EAC3C,SAAS,EAAG,eAAG,CAAC,SAAS,EAAE,SAAS,CAAC;gBAErC,6BAAK,GAAG,EAAC,SAAS,EAAC,SAAS,EAAG,eAAG,CAAC,iBAAiB,CAAC,EAAG,IAAI,EAAC,cAAc,IACvE,YAAY,CACV,CACF,CACP,CAAC;QACJ,CAAC;QAEO,gCAAiB,GAAzB,UAA0B,KAA8B;YAA9B,sBAAA,EAAA,QAAoB,IAAI,CAAC,KAAK;YAEpD,IAAA,6CAAkB,CACV;YACV,MAAM,CAAC,CAAC,kBAAkB,IAAI,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC1D,CAAC;QAED;;WAEG;QACK,mCAAoB,GAA5B;YACE,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACvB,CAAC;QAEO,0BAAW,GAAnB,UAAoB,IAAW;YACzB,IAAA,eAAiD,EAA/C,8BAAY,EAAE,cAAI,EAAE,8BAAY,CAAgB;YACtD,IAAI,UAAU,CAAC;YACf,uFAAuF;YACvF,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBACjB,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACvC,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;oBACzC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC;gBAChC,CAAC;YACH,CAAC;YAED,IAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAGzC,IAAA,4BAAiC,EAAjC,sDAAiC,CACpB;YAEf,IAAM,WAAW,GAAG,YAAY,CAAC;gBAC/B,IAAI,EAAE,IAAI;gBACV,SAAS,EAAE,eAAG,CAAC,cAAc,CAAC;gBAC9B,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,KAAK,EAAE,SAAS;gBAChB,IAAI,EAAE,cAAc;aACrB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAEvB,iFAAiF;YACjF,gGAAgG;YAChG,wGAAwG;YACxG,8FAA8F;YAC9F,EAAE,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC1C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG;oBAC1B,IAAI,EAAE,IAAI;oBACV,WAAW,EAAE,WAAW;iBACzB,CAAC;YACJ,CAAC;YACD,MAAM,CAAC,WAAW,CAAC;QACrB,CAAC;QAED,8CAA8C;QACtC,4BAAa,GAArB,UAAsB,IAAW;YAE7B,IAAA,sCAAY,CACC;YAEf,MAAM,sBACD,CAAC,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EACxC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG;gBAChB,MAAM,EAAE,IAAI,CAAC,MAAM;aACpB,GAAG,EAAE,CAAC,EACP;QACJ,CAAC;QAGO,4BAAa,GAArB,UAAsB,SAAqB,EAAE,aAA2C;YADxF,iBA8CC;YA5CO,IAAA,eAGQ,EAFZ,8BAAY,EACZ,cAAI,CACS;YAGb,IAAA,mBAGC,EAFC,gBAAK,EACP,0BAAU,EAEV,8CAAW,CACC;YAEd,oDAAoD;YACpD,IAAM,QAAQ,GAAG,CAAC,IAAI,KAAK,SAAS,CAAC,GAAG,UAAU,GAAG,cAAc,CAAC;YAEpE,IAAM,KAAK,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,IAAS,EAAE,MAAc;gBACxD,IAAM,KAAK,GAAG,UAAU,GAAG,MAAM,CAAC;gBAElC,IAAI,OAAO,GAAG,KAAI,CAAC,KAAK,CAAC,MAAM;oBAC7B,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC;oBAC9B,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC;gBAEnB,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;oBAC9C,OAAO,GAAG,KAAK,CAAC;gBAClB,CAAC;gBAED,MAAM,CAAC,CACL,6BAAK,IAAI,EAAG,QAAQ,EAClB,SAAS,EAAG,eAAG,CAAC,cAAc,CAAC,EAC/B,GAAG,EAAG,OAAO,qBACK,KAAK,uBACL,UAAU,IAC1B,YAAY,IAAI,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CACvC,CACP,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,CACL,gDACO,QAAQ,GACX,KAAK,CACH,CACP,CAAC;QACJ,CAAC;QAED,+EAA+E;QACvE,uBAAQ,GAAhB,UAAiB,EAAO;YACtB,IAAI,MAAM,GAAG,EAAE,CAAC,MAAqB,CAAC;YAEtC,OAAO,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;gBACpC,IAAI,WAAW,GAAG,MAAM,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;gBAEzD,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;oBAChB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;oBACzC,KAAK,CAAC;gBACR,CAAC;gBAED,MAAM,GAAG,qBAAS,CAAC,MAAM,CAAgB,CAAC;YAC5C,CAAC;QACH,CAAC;QAED;;;WAGG;QACK,wBAAS,GAAjB;YACE,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC/B,CAAC;QAEO,oCAAqB,GAA7B;YACE,IAAI,CAAC,qBAAqB,GAAG,CAAC,CAAC;YAC/B,IAAI,CAAC,sBAAsB,GAAG,CAAC,CAAC;QAClC,CAAC;QAED;;WAEG;QACK,6BAAc,GAAtB;YACE,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAE1B,kFAAkF;YAClF,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,aAA2B,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;gBAC7G,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,qGAAqG;YACvG,CAAC;QACH,CAAC;QAED;;;WAGG;QACK,2BAAY,GAApB;YACQ,IAAA,eAA4D,EAA1D,8CAAoB,EAAE,gDAAqB,CAAgB;YAC7D,IAAA,SAGE,EAFN,+CAA2C,EAC3C,iDAA6C,CACtC;YACT,IAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,oBAA8B,EAAE,oBAAoB,GAAG,CAAC,CAAC,CAAC;YACxF,IAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,qBAA+B,EAAE,qBAAqB,GAAG,CAAC,CAAC,CAAC;YAE3F,EAAE,CAAC,CAAC,YAAY,KAAK,oBAAoB,IAAI,aAAa,KAAK,qBAAqB,CAAC,CAAC,CAAC;gBAErF,sDAAsD;gBAEtD,IAAI,CAAC,qBAAqB,GAAG,YAAY,CAAC;gBAC1C,IAAI,CAAC,sBAAsB,GAAG,aAAa,CAAC;gBAC5C,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,CAAC;YAED,EAAE,CAAC,CAAC,oBAAqB,GAAG,YAAY,IAAI,qBAAsB,GAAG,aAAa,CAAC,CAAC,CAAC;gBACnF,gCAAgC;gBAChC,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,CAAC;QACH,CAAC;QAEO,6BAAc,GAAtB;YACE,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC;QAEO,2BAAY,GAApB,UAAqB,KAA8B;YACjD,iCAAiC;YADnC,iBA4BC;YA5BoB,sBAAA,EAAA,QAAoB,IAAI,CAAC,KAAK;YAGjD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;YACjC,CAAC;YAED,IAAI,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC3C,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;YAEpC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE;gBAC1B,6DAA6D;gBAC7D,IAAM,cAAc,GAAG,KAAI,CAAC,uBAAuB,CAAC,YAAuB,EAAE,YAAY,CAAC,KAAgB,CAAC,CAAC;gBAE5G,8EAA8E;gBAC9E,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;oBACnB,KAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;oBAC9B,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;wBACnC,KAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;wBACrC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;oBAC3B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,KAAI,CAAC,cAAc,EAAE,CAAC;oBACxB,CAAC;gBACH,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,wBAAwB;oBACxB,KAAI,CAAC,YAAY,EAAE,CAAC;gBACtB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAEO,sCAAuB,GAA/B,UAAgC,QAAiB,EAAE,QAAiB;YAClE,IAAM,eAAe,GAEjB,EAAE,CAAC;YAEP,IAAI,aAAa,GAAG,KAAK,CAAC;YAE1B,gFAAgF;YAChF,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;gBAC9B,MAAM,CAAC,aAAa,CAAC;YACvB,CAAC;YAED,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACzC,IAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;oBACf,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAC1C,CAAC;YACH,CAAC;YAED,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACzC,IAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;oBACf,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC;oBAEzD,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;wBACtC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;oBAC1B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,OAAO,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAC1C,CAAC;gBACH,CAAC;YACH,CAAC;YAED,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,eAAe,CAAC,CAAC,CAAC;gBAClC,EAAE,CAAC,CAAC,eAAe,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC1C,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC9C,CAAC;YACH,CAAC;YAED,MAAM,CAAC,aAAa,CAAC;QACvB,CAAC;QAED;;;WAGG;QACK,2BAAY,GAApB,UAAqB,IAAW;YAC9B,IAAI,gBAAgB,GAAG,KAAK,CAAC;YAC7B,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAgB,CAAC;YACrD,IAAI,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAE5D,sEAAsE;YAEtE,EAAE,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,YAAY,IAAI,YAAY,CAAC,cAAc,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBACvH,IAAI,aAAa,GAAG;oBAClB,KAAK,EAAE,WAAW,CAAC,WAAW;oBAC9B,MAAM,EAAE,WAAW,CAAC,YAAY;iBACjC,CAAC;gBAEF,EAAE,CAAC,CAAC,aAAa,CAAC,MAAM,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;oBAChD,gBAAgB,GAAG,IAAI,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM,CAAC;oBAExD,mGAAmG;oBAEnG,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;oBAEnC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG;wBACzC,MAAM,EAAE,aAAa,CAAC,MAAM;wBAC5B,cAAc,EAAE,IAAI,CAAC,eAAe;qBACrC,CAAC;oBAEF,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,KAAK,CACpC,CAAC,CAAC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC;wBAC3E,CAAC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC;oBAE9B,IAAI,CAAC,eAAe,EAAE,CAAC;gBACzB,CAAC;YACH,CAAC;YAED,MAAM,CAAC,gBAAgB,CAAC;QAC1B,CAAC;QAED,oDAAoD;QAC5C,2BAAY,GAApB,UAAqB,IAAW;YACxB,IAAA,oCAAW,CAAgB;YAEjC,iGAAiG;YAEjG,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBAChB,WAAW,CAAC,IAAI,CAAC,CAAC;YACpB,CAAC;QACH,CAAC;QAED,wDAAwD;QAChD,6BAAc,GAAtB,UAAuB,IAAW;YAC1B,IAAA,wCAAa,CAAgB;YAEnC,yGAAyG;YAEzG,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBAClB,aAAa,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC;QACH,CAAC;QAED,kDAAkD;QAC1C,0BAAW,GAAnB,UAAoB,KAAiB;YAC7B,IAAA,mBAAK,EAAE,6BAAU,EAAE,+BAAW,EAAE,mCAAa,CAAW;YAE9D,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAE1C,IAAM,gBAAgB,wBAAQ,UAAU,CAAE,CAAC;YAC3C,IAAM,KAAK,GAAY,EAAE,CAAC;YAE1B,IAAI,YAAY,GAAG,CAAC,CAAC;YACrB,IAAI,OAAO,GAAG,CAAC,CAAC;YAChB,IAAI,aAAa,GAAG,IAAI,CAAC;YACzB,IAAI,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;YACtC,IAAI,QAAQ,GAAG,UAAW,GAAG,WAAW,CAAC;YACzC,IAAM,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAEvD,2GAA2G;YAC3G,wFAAwF;YACxF,kGAAkG;YAClG,IAAI,aAAa,GAAG,IAAI,CAAC,oBAAoB,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC;YAEtE,IAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;oCAE7B,SAAS;gBAChB,IAAM,iBAAiB,GAAG,OAAK,qBAAqB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;gBAC7E,IAAM,UAAU,GAAG,iBAAiB,CAAC,MAAM,CAAC;gBAC5C,IAAM,QAAQ,GAAG,iBAAiB,CAAC,IAAI,CAAC;gBAExC,YAAY,GAAG,iBAAiB,CAAC,SAAS,CAAC;gBAE3C,IAAI,UAAU,GAAG,OAAO,GAAG,UAAU,GAAG,CAAC,CAAC;gBAE1C,IAAI,cAAc,GAAG,qBAAS,CAAC,OAAK,KAAK,CAAC,KAAgB,EAAE,UAAC,IAAW,IAAK,OAAA,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAA7C,CAA6C,CAAC,GAAG,CAAC,CAAC,CAAC;gBACjI,IAAI,oBAAoB,GAAG,CAAC,WAAW,IAAI,UAAU,IAAI,WAAW,CAAC,GAAG,IAAI,OAAO,IAAI,WAAW,CAAC,MAAO,CAAC;gBAC3G,IAAI,qBAAqB,GAAG,CAAC,OAAK,aAAa,IAAI,UAAU,IAAI,OAAK,aAAc,CAAC,GAAG,IAAI,OAAO,IAAI,OAAK,aAAc,CAAC,MAAO,CAAC;gBACnI,IAAI,aAAa,GAAG,CAAC,aAAa,IAAI,CAAC,qBAAqB,IAAI,CAAC,oBAAoB,IAAI,cAAc,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC;gBAC/H,IAAI,aAAa,GAAG,YAAY,IAAI,SAAS,IAAI,YAAY,GAAG,CAAC,SAAS,GAAG,YAAY,CAAC,CAAC;gBAC3F,IAAI,WAAW,GAAG,SAAS,KAAK,UAAU,CAAC;gBAE3C,gJAAgJ;gBAEhJ,qDAAqD;gBACrD,yGAAyG;gBACzG,EAAE,CAAC,CAAC,aAAa,IAAI,aAAa,IAAI,WAAW,CAAC,CAAC,CAAC;oBAClD,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;wBAClB,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;wBAC1B,aAAa,GAAG,IAAI,CAAC;oBACvB,CAAC;oBAED,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,GAAG,SAAS,CAAC,CAAC;oBAC/D,IAAI,OAAO,GAAG,OAAK,WAAW,CAAC,SAAS,EAAE,KAAM,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,GAAG,WAAW,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;oBAEvI,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC;oBACtB,OAAO,CAAC,MAAM,GAAG,UAAU,CAAC;oBAE5B,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAEpB,EAAE,CAAC,CAAC,qBAAqB,IAAI,OAAK,YAAY,CAAC,CAAC,CAAC;wBAC/C,UAAU,CAAC,gBAAgB,EAAE;4BAC3B,GAAG,EAAE,OAAO;4BACZ,MAAM,EAAE,UAAU;4BAClB,MAAM,EAAE,UAAU;4BAClB,IAAI,EAAE,WAAW,CAAC,IAAI;4BACtB,KAAK,EAAE,WAAW,CAAC,KAAK;4BACxB,KAAK,EAAE,WAAW,CAAC,KAAK;yBACzB,CAAC,CAAC;oBACL,CAAC;gBAEH,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;wBACnB,aAAa,GAAG,OAAK,WAAW,CAAC,SAAS,GAAG,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;oBACxG,CAAC;oBACD,aAAa,CAAC,MAAM,GAAG,CAAC,aAAa,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;oBAChF,aAAa,CAAC,SAAS,IAAI,YAAY,CAAC;gBAC1C,CAAC;gBACD,OAAO,IAAI,CAAC,UAAU,GAAG,OAAO,GAAG,CAAC,CAAC,CAAC;gBAEtC,mFAAmF;gBACnF,4EAA4E;gBAC5E,EAAE,CAAC,CAAC,aAAa,IAAI,gBAAgB,CAAC,CAAC,CAAC;;gBAExC,CAAC;YACH,CAAC;;YA3DD,GAAG,CAAC,CAAC,IAAI,SAAS,GAAG,UAAW,EAAE,SAAS,GAAG,QAAQ,EAAE,SAAS,IAAI,YAAY;sCAAxE,SAAS;;;aA2DjB;YAED,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBAClB,aAAa,CAAC,GAAG,GAAG,YAAY,CAAC;gBACjC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC5B,CAAC;YAED,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;YAE1C,mDAAmD;YACnD,MAAM,CAAC;gBACL,KAAK,EAAE,KAAK;gBACZ,cAAc,EAAE,IAAI,CAAC,eAAe;aACrC,CAAC;QACJ,CAAC;QAEO,oCAAqB,GAA7B,UAA8B,SAAiB,EAAE,WAAuB;YAOpE,IAAA,sDAAoB,CACP;YACf,EAAE,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBACzB,IAAM,QAAQ,GAAG,oBAAoB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;gBAG5D,IAAA,uBAA6D,EAA7D,kFAA6D,CAClD;gBAGX,IAAA,oBAA+D,EAA/D,oFAA+D,CACpD;gBAEb,MAAM,CAAC;oBACL,SAAS,EAAE,SAAS;oBACpB,MAAM,EAAE,MAAM;oBACd,IAAI,EAAE,QAAQ,CAAC,IAAI;iBACpB,CAAC;YACJ,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAM,SAAS,GAAG,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;gBAEpE,MAAM,CAAC;oBACL,SAAS,EAAE,SAAS;oBACpB,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,SAAS,EAAE,WAAW,CAAC;iBAC/D,CAAC;YACJ,CAAC;QACH,CAAC;QAED;;;WAGG;QACK,6BAAc,GAAtB,UAAuB,SAAiB,EAAE,YAAoB,EAAE,WAAuB;YACrF,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;gBAC7B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,YAAY,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAAC;gBAExD,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,oBAAoB,IAAI,mBAAmB,CAAC,CAAC;YACjG,CAAC;QACH,CAAC;QAEO,mCAAoB,GAA5B,UAA6B,SAAiB,EAAE,YAAwB;YACtE,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,sBAAsB,CAAC;YAErI,MAAM,CAAC,YAAY,GAAG,YAAY,GAAG,sBAAsB,CAAC;QAC9D,CAAC;QAEO,0BAAW,GAAnB,UAAoB,OAA2B,EAAE,KAAwB,EAAE,UAAuB,EAAE,KAAwC,EAAE,KAAe,EAAE,IAAqB;YAAzG,2BAAA,EAAA,cAAsB,CAAC;YAAE,sBAAA,EAAA,QAAgB,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC;YAAE,sBAAA,EAAA,UAAe;YAAE,qBAAA,EAAA,gBAAqB;YAClL,OAAO,GAAG,OAAO,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,CAAC;YAC5C,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAC5C,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;gBAClC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;YACzB,CAAC;YAED,sEAAsE;YACtE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBACtC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC;gBACnC,CAAC;YACH,CAAC;YAED,MAAM,CAAC;gBACL,GAAG,EAAE,OAAO;gBACZ,UAAU,EAAE,UAAU;gBACtB,SAAS,EAAE,KAAK;gBAChB,KAAK,EAAE,KAAK;gBACZ,KAAK,EAAE,KAAK,IAAI,EAAE;gBAClB,GAAG,EAAE,CAAC;gBACN,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,IAAI;aACX,CAAC;QACJ,CAAC;QAEO,8BAAe,GAAvB,UAAwB,KAAkB;YACpC,IAAA,wBAAwD,EAAtD,gBAAK,EAAE,0BAAU,EAAE,4BAAW,CAAyB;YAE7D,MAAM,CAAC,CAAC,WAAW,KAAK,SAAS,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,UAAW,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC;QAC9F,CAAC;QAED,uGAAuG;QAC/F,iCAAkB,GAA1B,UAA2B,KAAkB,EAAE,WAAqB;YAClE,KAAK,GAAG,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC;YACpB,IAAA,iDAAoB,EAAE,mDAAqB,CAAW;YACtD,IAAA,wBAAK,CAAgB;YAC7B,uGAAuG;YACvG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;gBAC9B,MAAM,CAAC;YACT,CAAC;YAED,IAAI,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;YACpC,IAAI,YAAY,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC;YAC3E,IAAI,SAAS,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,GAAG,CAAC,CAAC;YAExE,mFAAmF;YACnF,0EAA0E;YAC1E,qGAAqG;YACrG,EAAE,CAAC,CACD,WAAW;gBACX,CAAC,KAAK;gBACN,CAAC,IAAI,CAAC,YAAY;gBAClB,CAAC,YAAY;gBACb,YAAY,KAAK,IAAI,CAAC,aAAa;gBACnC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,GAAG,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxE,WAAW,GAAG,IAAI,CAAC,YAAY,GAAG,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACzE,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;YAC9B,CAAC;YAED,kFAAkF;YAClF,gEAAgE;YAChE,EAAE,CAAC,CAAC,WAAW;gBACb,CAAC,YAAY;gBACb,YAAY,KAAK,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBACtC,IAAI,CAAC,eAAe,EAAE,CAAC;YACzB,CAAC;YAED,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;YAElC,uGAAuG;YACvG,4BAA4B;YAC5B,qGAAqG;YACrG,iDAAiD;YACjD,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACjD,IAAM,WAAW,GAAG;gBAClB,GAAG,EAAE,UAAU;gBACf,IAAI,EAAE,WAAW,CAAC,IAAI;gBACtB,MAAM,EAAE,UAAU,GAAG,MAAM,CAAC,WAAW;gBACvC,KAAK,EAAE,WAAW,CAAC,KAAK;gBACxB,KAAK,EAAE,WAAW,CAAC,KAAK;gBACxB,MAAM,EAAE,MAAM,CAAC,WAAW;aAC3B,CAAC;YAEF,wEAAwE;YACxE,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,sBAAsB,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;YACvG,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,WAAW,EAAE,qBAAsB,EAAE,oBAAqB,CAAC,CAAC;QAC9F,CAAC;QAl0Ba,iBAAY,GAAG;YAC3B,UAAU,EAAE,CAAC;YACb,YAAY,EAAE,UAAC,IAAS,EAAE,KAAa,EAAE,aAAsB,IAAK,OAAA,CAAC,iCAAO,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAQ,CAAC,EAA1C,CAA0C;YAC9G,oBAAoB,EAAE,8BAA8B;YACpD,qBAAqB,EAAE,+BAA+B;SACvD,CAAC;QA2UF;YADC,oBAAQ;iDA8CR;QAscH,WAAC;KAAA,AAp0BD,CAA0B,yBAAa,GAo0BtC;IAp0BY,oBAAI;IAs0BjB,qBAAqB,IAAgB,EAAE,WAAmB,EAAE,UAAkB;QAC5E,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,WAAW,GAAG,UAAU,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;QAExE,MAAM,CAAC;YACL,GAAG,EAAE,GAAG;YACR,MAAM,EAAE,GAAG,GAAG,MAAM;YACpB,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,CAAC;IACJ,CAAC;IAED,4BAA4B,SAAqB,EAAE,SAAqB;QACtE,MAAM,CAAC,CACL,SAAS,CAAC,GAAG,IAAI,SAAS,CAAC,GAAG;YAC9B,SAAS,CAAC,IAAI,IAAI,SAAS,CAAC,IAAI;YAChC,SAAS,CAAC,MAAO,IAAI,SAAS,CAAC,MAAO;YACtC,SAAS,CAAC,KAAM,IAAI,SAAS,CAAC,KAAM,CAAC,CAAC;IAC1C,CAAC;IAED,oBAAoB,UAAsB,EAAE,OAAmB;QAC7D,UAAU,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,GAAG,UAAU,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC;QACxG,UAAU,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAC9G,UAAU,CAAC,MAAM,GAAG,CAAC,OAAO,CAAC,MAAO,GAAG,UAAU,CAAC,MAAO,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;QAC5H,UAAU,CAAC,KAAK,GAAG,CAAC,OAAO,CAAC,KAAM,GAAG,UAAU,CAAC,KAAM,IAAI,UAAU,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;QACtH,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,KAAM,GAAG,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC;QAC3D,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,MAAO,GAAG,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC;QAE5D,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  IRectangle,\n  css,\n  findIndex,\n  findScrollableParent,\n  getParent,\n  divProperties,\n  getNativeProps,\n  IRenderFunction,\n  autobind\n} from '../../Utilities';\nimport { IList, IListProps, IPage, IPageProps, IPageSpecification } from './List.Props';\n\nconst RESIZE_DELAY = 16;\nconst MIN_SCROLL_UPDATE_DELAY = 100;\nconst MAX_SCROLL_UPDATE_DELAY = 500;\nconst IDLE_DEBOUNCE_DELAY = 200;\nconst DEFAULT_ITEMS_PER_PAGE = 10;\nconst DEFAULT_PAGE_HEIGHT = 30;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\n\nexport interface IListState {\n  pages?: IPage[];\n\n  /** The last versionstamp for  */\n  measureVersion?: number;\n}\n\ninterface IPageCacheItem {\n  page: IPage;\n  pageElement?: JSX.Element;\n}\n\ninterface IPageCache {\n  [key: string]: IPageCacheItem;\n}\n\nconst EMPTY_RECT = {\n  top: -1,\n  bottom: -1,\n  left: -1,\n  right: -1,\n  width: 0,\n  height: 0\n};\n\n// Naming expensive measures so that they're named in profiles.\nconst _measurePageRect = (element: HTMLElement) => element.getBoundingClientRect();\nconst _measureSurfaceRect = _measurePageRect;\nconst _measureScrollRect = _measurePageRect;\n\n/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback if\n * provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if provided by\n * the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\n * 2. If changes are necessary, apply changes (add/remove pages)\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time. And we\n * start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\nexport class List extends BaseComponent<IListProps, IListState> implements IList {\n  public static defaultProps = {\n    startIndex: 0,\n    onRenderCell: (item: any, index: number, containsFocus: boolean) => (<div>{ (item && item.name) || '' }</div>),\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance,\n    root: HTMLElement,\n    surface: HTMLElement\n  };\n\n  private _estimatedPageHeight: number;\n  private _totalEstimates: number;\n  private _cachedPageHeights: {\n    [key: string]: {\n      height: number,\n      measureVersion: number\n    }\n  };\n  private _focusedIndex: number;\n  private _scrollElement: HTMLElement;\n  private _scrollingToIndex: number;\n  private _hasCompletedFirstRender: boolean;\n\n  // surface rect relative to window\n  private _surfaceRect: IRectangle;\n\n  // The visible rect that we're required to render given the current list state.\n  private _requiredRect: IRectangle | null;\n\n  // The visible rect that we're allowed to keep rendered. Pages outside of this rect will be removed.\n  private _allowedRect: IRectangle;\n\n  // materialized rect around visible items, relative to surface\n  private _materializedRect: IRectangle | null;\n\n  private _requiredWindowsAhead: number;\n  private _requiredWindowsBehind: number;\n\n  private _measureVersion: number;\n  private _scrollHeight: number;\n  private _scrollTop: number;\n  private _pageCache: IPageCache;\n\n  constructor(props: IListProps) {\n    super(props);\n\n    this.state = {\n      pages: []\n    };\n\n    this._estimatedPageHeight = 0;\n    this._totalEstimates = 0;\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n\n    // Track the measure version for everything.\n    this._measureVersion = 0;\n\n    // Ensure that scrolls are lazy updated.\n    this._onAsyncScroll = this._async.debounce(\n      this._onAsyncScroll,\n      MIN_SCROLL_UPDATE_DELAY,\n      {\n        leading: false,\n        maxWait: MAX_SCROLL_UPDATE_DELAY\n      });\n\n    this._onAsyncIdle = this._async.debounce(\n      this._onAsyncIdle,\n      IDLE_DEBOUNCE_DELAY, {\n        leading: false\n      });\n\n    this._onAsyncResize = this._async.debounce(\n      this._onAsyncResize,\n      RESIZE_DELAY,\n      {\n        leading: false\n      });\n\n    this._cachedPageHeights = {};\n    this._estimatedPageHeight = 0;\n    this._focusedIndex = -1;\n    this._scrollingToIndex = -1;\n    this._pageCache = {};\n  }\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index Index of item to scroll to\n   * @param measureItem Optional callback to measure the height of an individual item\n   */\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number): void {\n    const startIndex = this.props.startIndex as number;\n    const renderCount = this._getRenderCount();\n    const endIndex = startIndex + renderCount;\n\n    const allowedRect = this._allowedRect;\n\n    let scrollTop = 0;\n\n    let itemsPerPage = 1;\n    for (let itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n\n      const pageHeight = pageSpecification.height;\n      itemsPerPage = pageSpecification.itemCount;\n\n      const requestedIndexIsInPage = itemIndex <= index && (itemIndex + itemsPerPage) > index;\n      if (requestedIndexIsInPage) {\n        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in just\n        // the given item, otherwise we'll only bring the page into view\n        if (measureItem) {\n          // Adjust for actual item position within page\n          const itemPositionWithinPage = index - itemIndex;\n          for (let itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\n            scrollTop += measureItem(itemIndex + itemIndexInPage);\n          }\n          const scrollBottom = scrollTop + measureItem(index);\n\n          const scrollRect = _measureScrollRect(this._scrollElement);\n          const scrollWindow = {\n            top: this._scrollElement.scrollTop,\n            bottom: this._scrollElement.scrollTop + scrollRect.height\n          };\n\n          const itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\n          if (itemIsFullyVisible) {\n            // Item is already visible, do nothing.\n            return;\n          }\n\n          const itemIsPartiallyAbove = scrollTop < scrollWindow.top;\n          const itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\n\n          if (itemIsPartiallyAbove) {\n            // We will just scroll to 'scrollTop'\n            //  ______\n            // |Item  |   - scrollTop\n            // |  ____|_\n            // |_|____| | - scrollWindow.top\n            //   |      |\n            //   |______|\n          } else if (itemIsPartiallyBelow) {\n            // Adjust scrollTop position to just bring in the element\n            //  ______   - scrollTop\n            // |      |\n            // |  ____|_  - scrollWindow.bottom\n            // |_|____| |\n            //   | Item |\n            //   |______| - scrollBottom\n            scrollTop = this._scrollElement.scrollTop + (scrollBottom - scrollWindow.bottom);\n          }\n        }\n\n        this._scrollElement.scrollTop = scrollTop;\n        break;\n      }\n\n      scrollTop += pageHeight;\n    }\n  }\n\n  public componentDidMount() {\n\n    this._updatePages();\n    this._measureVersion++;\n    this._scrollElement = findScrollableParent(this.refs.root) as HTMLElement;\n\n    this._events.on(window, 'resize', this._onAsyncResize);\n    this._events.on(this.refs.root, 'focus', this._onFocus, true);\n    if (this._scrollElement) {\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\n    }\n  }\n\n  public componentWillReceiveProps(newProps: IListProps) {\n    if (newProps.items !== this.props.items ||\n      newProps.renderCount !== this.props.renderCount ||\n      newProps.startIndex !== this.props.startIndex) {\n\n      // We have received new items so we want to make sure that initially we only render a single window to\n      // fill the currently visible rect, and then later render additional windows.\n      this._resetRequiredWindows();\n      this._requiredRect = null;\n\n      this._measureVersion++;\n      this._invalidatePageCache();\n      this._updatePages(newProps);\n    }\n  }\n\n  public shouldComponentUpdate(newProps: IListProps, newState: IListState) {\n    let { renderedWindowsAhead, renderedWindowsBehind } = this.props;\n    let { pages: oldPages } = this.state;\n    let { pages: newPages, measureVersion } = newState;\n    let shouldComponentUpdate = false;\n\n    if (newProps.items === this.props.items &&\n      oldPages!.length === newPages!.length) {\n      for (let i = 0; i < oldPages!.length; i++) {\n        let oldPage = oldPages![i];\n        let newPage = newPages![i];\n\n        if ((oldPage.key !== newPage.key ||\n          oldPage.itemCount !== newPage.itemCount)) {\n          shouldComponentUpdate = true;\n          break;\n        }\n      }\n    } else {\n      shouldComponentUpdate = true;\n    }\n\n    return shouldComponentUpdate;\n  }\n\n  public forceUpdate() {\n    this._invalidatePageCache();\n    // Ensure that when the list is force updated we update the pages first before render.\n    this._updateRenderRects(this.props, true);\n    this._updatePages();\n    this._measureVersion++;\n\n    super.forceUpdate();\n  }\n\n  public render() {\n    const {\n      className,\n      role,\n      onRenderPage = this._onRenderPage\n    } = this.props;\n    const {\n      pages = []\n    } = this.state;\n    let pageElements: JSX.Element[] = [];\n    let divProps = getNativeProps(this.props, divProperties);\n\n    for (const page of pages) {\n      pageElements.push(this._renderPage(page));\n    }\n\n    // console.log(`Page elements ${pageElements.length}`);\n\n    return (\n      <div\n        ref='root'\n        { ...divProps }\n        role={ (role === undefined) ? 'list' : role }\n        className={ css('ms-List', className) }\n      >\n        <div ref='surface' className={ css('ms-List-surface') } role='presentation'>\n          { pageElements }\n        </div>\n      </div>\n    );\n  }\n\n  private _shouldVirtualize(props: IListProps = this.props): boolean {\n    const {\n      onShouldVirtualize\n    } = props;\n    return !onShouldVirtualize || onShouldVirtualize(props);\n  }\n\n  /**\n   * when props.items change or forceUpdate called, throw away cached pages\n   */\n  private _invalidatePageCache() {\n    this._pageCache = {};\n  }\n\n  private _renderPage(page: IPage): JSX.Element {\n    let { onRenderCell, role, usePageCache } = this.props;\n    let cachedPage;\n    // if usePageCache is set and cached page element can be found, just return cached page\n    if (usePageCache) {\n      cachedPage = this._pageCache[page.key];\n      if (cachedPage && cachedPage.pageElement) {\n        return cachedPage.pageElement;\n      }\n    }\n\n    const pageStyle = this._getPageStyle(page);\n\n    const {\n      onRenderPage = this._onRenderPage\n    } = this.props;\n\n    const pageElement = onRenderPage({\n      page: page,\n      className: css('ms-List-page'),\n      key: page.key,\n      ref: page.key,\n      style: pageStyle,\n      role: 'presentation'\n    }, this._onRenderPage);\n\n    // cache the first page for now since it is re-rendered a lot times unncessarily.\n    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\n    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the\n    // first 30 items did not change, we still re-rendered all of them in this props.items change.\n    if (usePageCache && page.startIndex === 0) {\n      this._pageCache[page.key] = {\n        page: page,\n        pageElement: pageElement\n      };\n    }\n    return pageElement;\n  }\n\n  /** Generate the style object for the page. */\n  private _getPageStyle(page: IPage): React.StyleHTMLAttributes<HTMLDivElement> {\n    const {\n      getPageStyle\n    } = this.props;\n\n    return {\n      ...(getPageStyle ? getPageStyle(page) : {}),\n      ...(!page.items ? {\n        height: page.height\n      } : {})\n    };\n  }\n\n  @autobind\n  private _onRenderPage(pageProps: IPageProps, defaultRender?: IRenderFunction<IPageProps>): any {\n    const {\n      onRenderCell,\n      role\n    } = this.props;\n\n    const {\n      page: {\n        items,\n      startIndex\n      },\n      ...divProps\n    } = pageProps;\n\n    // only assign list item role if no role is assigned\n    const cellRole = (role === undefined) ? 'listitem' : 'presentation';\n\n    const cells = (items || []).map((item: any, offset: number) => {\n      const index = startIndex + offset;\n\n      let itemKey = this.props.getKey ?\n        this.props.getKey(item, index) :\n        item && item.key;\n\n      if (itemKey === null || itemKey === undefined) {\n        itemKey = index;\n      }\n\n      return (\n        <div role={ cellRole }\n          className={ css('ms-List-cell') }\n          key={ itemKey }\n          data-list-index={ index }\n          data-automationid='ListCell'>\n          { onRenderCell && onRenderCell(item, index) }\n        </div>\n      );\n    });\n\n    return (\n      <div\n        { ...divProps }>\n        { cells }\n      </div>\n    );\n  }\n\n  /** Track the last item index focused so that we ensure we keep it rendered. */\n  private _onFocus(ev: any) {\n    let target = ev.target as HTMLElement;\n\n    while (target !== this.refs.surface) {\n      let indexString = target.getAttribute('data-list-index');\n\n      if (indexString) {\n        this._focusedIndex = Number(indexString);\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  }\n\n  /**\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\n   * we will call onAsyncIdle which will reset it back to it's correct value.\n   */\n  private _onScroll() {\n    this._resetRequiredWindows();\n  }\n\n  private _resetRequiredWindows() {\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n  }\n\n  /**\n   * Debounced method to asynchronously update the visible region on a scroll event.\n   */\n  private _onAsyncScroll() {\n    this._updateRenderRects();\n\n    // Only update pages when the visible rect falls outside of the materialized rect.\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect as IRectangle, this._materializedRect)) {\n      this._updatePages();\n    } else {\n      // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\n    }\n  }\n\n  /**\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\n   * either, we increase the amount we render and re-evaluate.\n   */\n  private _onAsyncIdle() {\n    const { renderedWindowsAhead, renderedWindowsBehind } = this.props;\n    const {\n      _requiredWindowsAhead: requiredWindowsAhead,\n      _requiredWindowsBehind: requiredWindowsBehind\n    } = this;\n    const windowsAhead = Math.min(renderedWindowsAhead as number, requiredWindowsAhead + 1);\n    const windowsBehind = Math.min(renderedWindowsBehind as number, requiredWindowsBehind + 1);\n\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\n\n      // console.log('idling', windowsBehind, windowsAhead);\n\n      this._requiredWindowsAhead = windowsAhead;\n      this._requiredWindowsBehind = windowsBehind;\n      this._updateRenderRects();\n      this._updatePages();\n    }\n\n    if (renderedWindowsAhead! > windowsAhead || renderedWindowsBehind! > windowsBehind) {\n      // Async increment on next tick.\n      this._onAsyncIdle();\n    }\n  }\n\n  private _onAsyncResize() {\n    this.forceUpdate();\n  }\n\n  private _updatePages(props: IListProps = this.props) {\n    // console.log('updating pages');\n\n    if (!this._requiredRect) {\n      this._updateRenderRects(props);\n    }\n\n    let newListState = this._buildPages(props);\n    let oldListPages = this.state.pages;\n\n    this.setState(newListState, () => {\n      // If measured version is invalid since we've updated the DOM\n      const heightsChanged = this._updatePageMeasurements(oldListPages as IPage[], newListState.pages as IPage[]);\n\n      // On first render, we should re-measure so that we don't get a visual glitch.\n      if (heightsChanged) {\n        this._materializedRect = null;\n        if (!this._hasCompletedFirstRender) {\n          this._hasCompletedFirstRender = true;\n          this._updatePages(props);\n        } else {\n          this._onAsyncScroll();\n        }\n      } else {\n        // Enqueue an idle bump.\n        this._onAsyncIdle();\n      }\n    });\n  }\n\n  private _updatePageMeasurements(oldPages: IPage[], newPages: IPage[]) {\n    const renderedIndexes: {\n      [index: number]: IPage;\n    } = {};\n\n    let heightChanged = false;\n\n    // when not in virtualize mode, we render all the items without page measurement\n    if (!this._shouldVirtualize()) {\n      return heightChanged;\n    }\n\n    for (let i = 0; i < oldPages.length; i++) {\n      let page = oldPages[i];\n\n      if (page.items) {\n        renderedIndexes[page.startIndex] = page;\n      }\n    }\n\n    for (let i = 0; i < newPages.length; i++) {\n      let page = newPages[i];\n\n      if (page.items) {\n        heightChanged = this._measurePage(page) || heightChanged;\n\n        if (!renderedIndexes[page.startIndex]) {\n          this._onPageAdded(page);\n        } else {\n          delete renderedIndexes[page.startIndex];\n        }\n      }\n    }\n\n    for (let index in renderedIndexes) {\n      if (renderedIndexes.hasOwnProperty(index)) {\n        this._onPageRemoved(renderedIndexes[index]);\n      }\n    }\n\n    return heightChanged;\n  }\n\n  /**\n   * Given a page, measure its dimensions, update cache.\n   * @returns True if the height has changed.\n   */\n  private _measurePage(page: IPage): boolean {\n    let hasChangedHeight = false;\n    let pageElement = this.refs[page.key] as HTMLElement;\n    let cachedHeight = this._cachedPageHeights[page.startIndex];\n\n    // console.log('   * measure attempt', page.startIndex, cachedHeight);\n\n    if (pageElement && this._shouldVirtualize() && (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)) {\n      let newClientRect = {\n        width: pageElement.clientWidth,\n        height: pageElement.clientHeight\n      };\n\n      if (newClientRect.height || newClientRect.width) {\n        hasChangedHeight = page.height !== newClientRect.height;\n\n        // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\n\n        page.height = newClientRect.height;\n\n        this._cachedPageHeights[page.startIndex] = {\n          height: newClientRect.height,\n          measureVersion: this._measureVersion\n        };\n\n        this._estimatedPageHeight = Math.round(\n          ((this._estimatedPageHeight * this._totalEstimates) + newClientRect.height) /\n          (this._totalEstimates + 1));\n\n        this._totalEstimates++;\n      }\n    }\n\n    return hasChangedHeight;\n  }\n\n  /** Called when a page has been added to the DOM. */\n  private _onPageAdded(page: IPage) {\n    let { onPageAdded } = this.props;\n\n    // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageAdded) {\n      onPageAdded(page);\n    }\n  }\n\n  /** Called when a page has been removed from the DOM. */\n  private _onPageRemoved(page: IPage) {\n    let { onPageRemoved } = this.props;\n\n    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageRemoved) {\n      onPageRemoved(page);\n    }\n  }\n\n  /** Build up the pages that should be rendered. */\n  private _buildPages(props: IListProps): IListState {\n    let { items, startIndex, renderCount, getPageHeight } = props;\n\n    renderCount = this._getRenderCount(props);\n\n    const materializedRect = { ...EMPTY_RECT };\n    const pages: IPage[] = [];\n\n    let itemsPerPage = 1;\n    let pageTop = 0;\n    let currentSpacer = null;\n    let focusedIndex = this._focusedIndex;\n    let endIndex = startIndex! + renderCount;\n    const shouldVirtualize = this._shouldVirtualize(props);\n\n    // First render is very important to track; when we render cells, we have no idea of estimated page height.\n    // So we should default to rendering only the first page so that we can get information.\n    // However if the user provides a measure function, let's just assume they know the right heights.\n    let isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;\n\n    const allowedRect = this._allowedRect;\n\n    for (let itemIndex = startIndex!; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n      const pageHeight = pageSpecification.height;\n      const pageData = pageSpecification.data;\n\n      itemsPerPage = pageSpecification.itemCount;\n\n      let pageBottom = pageTop + pageHeight - 1;\n\n      let isPageRendered = findIndex(this.state.pages as IPage[], (page: IPage) => !!page.items && page.startIndex === itemIndex) > -1;\n      let isPageInAllowedRange = !allowedRect || pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom!;\n      let isPageInRequiredRange = !this._requiredRect || pageBottom >= this._requiredRect!.top && pageTop <= this._requiredRect!.bottom!;\n      let isPageVisible = !isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered)) || !shouldVirtualize;\n      let isPageFocused = focusedIndex >= itemIndex && focusedIndex < (itemIndex + itemsPerPage);\n      let isFirstPage = itemIndex === startIndex;\n\n      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' + isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\n\n      // Only render whats visible, focused, or first page,\n      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\n      if (isPageVisible || isPageFocused || isFirstPage) {\n        if (currentSpacer) {\n          pages.push(currentSpacer);\n          currentSpacer = null;\n        }\n\n        let itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\n        let newPage = this._createPage(undefined, items!.slice(itemIndex, itemIndex + itemsInPage), itemIndex, undefined, undefined, pageData);\n\n        newPage.top = pageTop;\n        newPage.height = pageHeight;\n\n        pages.push(newPage);\n\n        if (isPageInRequiredRange && this._allowedRect) {\n          _mergeRect(materializedRect, {\n            top: pageTop,\n            bottom: pageBottom,\n            height: pageHeight,\n            left: allowedRect.left,\n            right: allowedRect.right,\n            width: allowedRect.width\n          });\n        }\n\n      } else {\n        if (!currentSpacer) {\n          currentSpacer = this._createPage('spacer-' + itemIndex, undefined, itemIndex, 0, undefined, pageData);\n        }\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\n        currentSpacer.itemCount += itemsPerPage;\n      }\n      pageTop += (pageBottom - pageTop + 1);\n\n      // in virtualized mode, we render need to render first page then break and measure,\n      // otherwise, we render all items without measurement to make rendering fast\n      if (isFirstRender && shouldVirtualize) {\n        break;\n      }\n    }\n\n    if (currentSpacer) {\n      currentSpacer.key = 'spacer-end';\n      pages.push(currentSpacer);\n    }\n\n    this._materializedRect = materializedRect;\n\n    // console.log('materialized: ', materializedRect);\n    return {\n      pages: pages,\n      measureVersion: this._measureVersion\n    };\n  }\n\n  private _getPageSpecification(itemIndex: number, visibleRect: IRectangle): {\n    // These return values are now no longer optional.\n    itemCount: number;\n    height: number;\n    data?: any;\n  } {\n    const {\n      getPageSpecification\n    } = this.props;\n    if (getPageSpecification) {\n      const pageData = getPageSpecification(itemIndex, visibleRect);\n\n      const {\n        itemCount = this._getItemCountForPage(itemIndex, visibleRect)\n      } = pageData;\n\n      const {\n        height = this._getPageHeight(itemIndex, itemCount, visibleRect)\n      } = pageData;\n\n      return {\n        itemCount: itemCount,\n        height: height,\n        data: pageData.data\n      };\n    } else {\n      const itemCount = this._getItemCountForPage(itemIndex, visibleRect);\n\n      return {\n        itemCount: itemCount,\n        height: this._getPageHeight(itemIndex, itemCount, visibleRect)\n      };\n    }\n  }\n\n  /**\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\n   * cached height, or estimated page height, or default page height.\n   */\n  private _getPageHeight(itemIndex: number, itemsPerPage: number, visibleRect: IRectangle): number {\n    if (this.props.getPageHeight) {\n      return this.props.getPageHeight(itemIndex, visibleRect);\n    } else {\n      let cachedHeight = (this._cachedPageHeights[itemIndex]);\n\n      return cachedHeight ? cachedHeight.height : (this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT);\n    }\n  }\n\n  private _getItemCountForPage(itemIndex: number, visibileRect: IRectangle): number {\n    let itemsPerPage = this.props.getItemCountForPage ? this.props.getItemCountForPage(itemIndex, visibileRect) : DEFAULT_ITEMS_PER_PAGE;\n\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\n  }\n\n  private _createPage(pageKey: string | undefined, items: any[] | undefined, startIndex: number = -1, count: number = items ? items.length : 0, style: any = {}, data: any = undefined): IPage {\n    pageKey = pageKey || ('page-' + startIndex);\n    const cachedPage = this._pageCache[pageKey];\n    if (cachedPage && cachedPage.page) {\n      return cachedPage.page;\n    }\n\n    // Fill undefined cells because array.map will ignore undefined cells.\n    if (items) {\n      for (let i = 0; i < items.length; i++) {\n        items[i] = items[i] || undefined;\n      }\n    }\n\n    return {\n      key: pageKey,\n      startIndex: startIndex,\n      itemCount: count,\n      items: items,\n      style: style || {},\n      top: 0,\n      height: 0,\n      data: data\n    };\n  }\n\n  private _getRenderCount(props?: IListProps): number {\n    let { items, startIndex, renderCount } = props || this.props;\n\n    return (renderCount === undefined ? (items ? items.length - startIndex! : 0) : renderCount);\n  }\n\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\n  private _updateRenderRects(props?: IListProps, forceUpdate?: boolean) {\n    props = props || this.props;\n    const { renderedWindowsAhead, renderedWindowsBehind } = props;\n    const { pages } = this.state;\n    // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\n    if (!this._shouldVirtualize()) {\n      return;\n    }\n\n    let surfaceRect = this._surfaceRect;\n    let scrollHeight = this._scrollElement && this._scrollElement.scrollHeight;\n    let scrollTop = this._scrollElement ? this._scrollElement.scrollTop : 0;\n\n    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\n    // This needs to be called to recalculate when new pages should be loaded.\n    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\n    if (\n      forceUpdate ||\n      !pages ||\n      !this._surfaceRect ||\n      !scrollHeight ||\n      scrollHeight !== this._scrollHeight ||\n      Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3) {\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this.refs.surface);\n      this._scrollTop = scrollTop;\n    }\n\n    // If the scroll height has changed, something in the container likely resized and\n    // we should redo the page heights incase their content resized.\n    if (forceUpdate ||\n      !scrollHeight ||\n      scrollHeight !== this._scrollHeight) {\n      this._measureVersion++;\n    }\n\n    this._scrollHeight = scrollHeight;\n\n    // If the surface is above the container top or below the container bottom, or if this is not the first\n    // render return empty rect.\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\n    // used to calculate the width of the list items.\n    const visibleTop = Math.max(0, -surfaceRect.top);\n    const visibleRect = {\n      top: visibleTop,\n      left: surfaceRect.left,\n      bottom: visibleTop + window.innerHeight,\n      right: surfaceRect.right,\n      width: surfaceRect.width,\n      height: window.innerHeight\n    };\n\n    // The required/allowed rects are adjusted versions of the visible rect.\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind!, renderedWindowsAhead!);\n  }\n}\n\nfunction _expandRect(rect: IRectangle, pagesBefore: number, pagesAfter: number): IRectangle {\n  const top = rect.top - (pagesBefore * rect.height);\n  const height = rect.height + ((pagesBefore + pagesAfter) * rect.height);\n\n  return {\n    top: top,\n    bottom: top + height,\n    height: height,\n    left: rect.left,\n    right: rect.right,\n    width: rect.width\n  };\n}\n\nfunction _isContainedWithin(innerRect: IRectangle, outerRect: IRectangle): boolean {\n  return (\n    innerRect.top >= outerRect.top &&\n    innerRect.left >= outerRect.left &&\n    innerRect.bottom! <= outerRect.bottom! &&\n    innerRect.right! <= outerRect.right!);\n}\n\nfunction _mergeRect(targetRect: IRectangle, newRect: IRectangle): IRectangle {\n  targetRect.top = (newRect.top < targetRect.top || targetRect.top === -1) ? newRect.top : targetRect.top;\n  targetRect.left = (newRect.left < targetRect.left || targetRect.left === -1) ? newRect.left : targetRect.left;\n  targetRect.bottom = (newRect.bottom! > targetRect.bottom! || targetRect.bottom === -1) ? newRect.bottom : targetRect.bottom;\n  targetRect.right = (newRect.right! > targetRect.right! || targetRect.right === -1) ? newRect.right : targetRect.right;\n  targetRect.width = targetRect.right! - targetRect.left + 1;\n  targetRect.height = targetRect.bottom! - targetRect.top + 1;\n\n  return targetRect;\n}\n"]}