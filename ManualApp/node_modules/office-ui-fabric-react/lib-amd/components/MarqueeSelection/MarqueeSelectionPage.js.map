{"version":3,"file":"MarqueeSelectionPage.js","sourceRoot":"../src/","sources":["components/MarqueeSelection/MarqueeSelectionPage.tsx"],"names":[],"mappings":";;;IASA,IAAM,gCAAgC,GAAG,OAAO,CAAC,gHAAgH,CAAW,CAAC;IAE7K;QAA0C,gDAA6C;QAAvF;;QAkCA,CAAC;QAjCQ,qCAAM,GAAb;YACE,MAAM,CAAC,CACL,oBAAC,gCAAa,IACZ,KAAK,EAAC,kBAAkB,EACxB,aAAa,EAAC,yBAAyB,EACvC,YAAY,EACV,oBAAC,8BAAW,IAAC,KAAK,EAAC,yBAAyB,EAAC,IAAI,EAAG,gCAAgC;oBAClF,oBAAC,6DAA4B,OAAG,CACpB,EAEhB,QAAQ,EACN;oBACE,oUAGI;oBACJ,yMAEI;oBACJ;;wBACuE,sDAA2B;4MAC9F;oBACJ,gPAGI,CACA,EAER,eAAe,EAAG,IAAI,CAAC,KAAK,CAAC,eAAe,GAC9B,CACjB,CAAC;QACJ,CAAC;QAEH,2BAAC;IAAD,CAAC,AAlCD,CAA0C,KAAK,CAAC,SAAS,GAkCxD;IAlCY,oDAAoB","sourcesContent":["import * as React from 'react';\nimport {\n  ExampleCard,\n  ComponentPage,\n  IComponentDemoPageProps\n} from '@uifabric/example-app-base';\n\nimport { MarqueeSelectionBasicExample } from './examples/MarqueeSelection.Basic.Example';\n\nconst MarqueeSelectionBasicExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/MarqueeSelection/examples/MarqueeSelection.Basic.Example.tsx') as string;\n\nexport class MarqueeSelectionPage extends React.Component<IComponentDemoPageProps, any> {\n  public render() {\n    return (\n      <ComponentPage\n        title='MarqueeSelection'\n        componentName='MarqueeSelectionExample'\n        exampleCards={\n          <ExampleCard title='Basic Selection Example' code={ MarqueeSelectionBasicExampleCode }>\n            <MarqueeSelectionBasicExample />\n          </ExampleCard>\n        }\n        overview={\n          <div>\n            <p>\n              The MarqueeSelection component provides a service which allows the user to drag a rectangle to be drawn around\n              items to select them. This works in conjunction with a selection object, which can be used to generically store selection state, separate from a component that consumes the state.\n            </p>\n            <p>\n              MarqueeSelection also works in conjunction with the AutoScroll utility to automatically scroll the container when we drag a rectangle within the vicinity of the edges.\n            </p>\n            <p>\n              When a selection rectangle is dragged, we look for elements with the <b>data-selection-index</b> attribute populated. We get these elements' boundingClientRects and compare them with the root's rect to determine selection state. We update the selection state appropriately.\n            </p>\n            <p>\n              In virtualization cases where items that were once selected are dematerialized, we will keep the item in its\n              previous state until we know definitively if it's on/off. (In other words, this works with List.)\n            </p>\n          </div>\n        }\n        isHeaderVisible={ this.props.isHeaderVisible }>\n      </ComponentPage>\n    );\n  }\n\n}"]}