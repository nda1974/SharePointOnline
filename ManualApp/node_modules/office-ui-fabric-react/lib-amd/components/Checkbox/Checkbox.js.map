{"version":3,"file":"Checkbox.js","sourceRoot":"../src/","sources":["components/Checkbox/Checkbox.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  autobind,\n  getId,\n  memoize\n} from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport {\n  ICheckbox,\n  ICheckboxProps,\n  ICheckboxStyles\n} from './Checkbox.Props';\nimport {\n  customizable\n} from '../../Utilities';\nimport {\n  mergeStyles\n} from '../../Styling';\n\nimport { getStyles } from './Checkbox.styles';\n\nexport interface ICheckboxState {\n  /** Is true when Uncontrolled control is checked. */\n  isChecked?: boolean;\n}\n\ninterface ICheckboxClassNames {\n  root: string;\n  label: string;\n  checkbox: string;\n  checkmark: string;\n  text: string;\n}\n\n@customizable(['theme'])\nexport class Checkbox extends BaseComponent<ICheckboxProps, ICheckboxState> implements ICheckbox {\n  public static defaultProps: ICheckboxProps = {\n    boxSide: 'start'\n  };\n\n  private _checkBox: HTMLInputElement;\n  private _id: string;\n  private _classNames: ICheckboxClassNames;\n\n  /**\n   * Initialize a new instance of the TopHeaderV2\n   * @param props Props for the component\n   * @param context Context or initial state for the base component.\n   */\n  constructor(props: ICheckboxProps, context?: any) {\n    super(props, context);\n\n    this._warnMutuallyExclusive({\n      'checked': 'defaultChecked'\n    });\n\n    this._id = getId('checkbox-');\n    this.state = {\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked)\n    };\n  }\n\n  public componentWillReceiveProps(newProps: ICheckboxProps) {\n    if (newProps.checked !== undefined) {\n      this.setState({\n        isChecked: !!newProps.checked // convert null to false\n      });\n    }\n  }\n\n  /**\n   * Render the Checkbox based on passed props\n   */\n  public render(): JSX.Element {\n    const {\n      checked,\n      className,\n      defaultChecked,\n      disabled,\n      inputProps,\n      name,\n      boxSide,\n      theme,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaDescribedBy,\n      styles: customStyles,\n      onRenderLabel = this._onRenderLabel\n    } = this.props;\n\n    const isChecked = checked === undefined ? this.state.isChecked : checked;\n    const isReversed = boxSide !== 'start' ? true : false;\n\n    this._classNames = this._getClassNames(\n      getStyles(theme!, customStyles),\n      className!,\n      disabled!,\n      isChecked!,\n      isReversed!\n    );\n\n    return (\n      <button\n        { ...inputProps }\n        { ...(checked !== undefined && { checked }) }\n        { ...(defaultChecked !== undefined && { defaultChecked }) }\n        disabled={ disabled }\n        ref={ this._resolveRef('_checkBox') }\n        name={ name }\n        id={ this._id }\n        role='checkbox'\n        type='button'\n        className={ this._classNames.root }\n        onClick={ this._onClick }\n        onFocus={ this._onFocus }\n        onBlur={ this._onBlur }\n        aria-checked={ isChecked }\n        aria-disabled={ disabled }\n        aria-label={ ariaLabel }\n        aria-labelledby={ ariaLabelledBy }\n        aria-describedby={ ariaDescribedBy }\n      >\n        <label className={ this._classNames.label } htmlFor={ this._id } >\n          <div className={ this._classNames.checkbox }>\n            <Icon iconName='CheckMark' className={ this._classNames.checkmark } />\n          </div>\n          { onRenderLabel(this.props, this._onRenderLabel) }\n        </label>\n      </button>\n    );\n  }\n\n  public get checked(): boolean {\n    return this.state.isChecked!;\n  }\n\n  public focus(): void {\n    if (this._checkBox) {\n      this._checkBox.focus();\n    }\n  }\n\n  @autobind\n  private _onFocus(ev: React.FocusEvent<HTMLInputElement>): void {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onFocus) {\n      inputProps.onFocus(ev);\n    }\n  }\n\n  @autobind\n  private _onBlur(ev: React.FocusEvent<HTMLInputElement>): void {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onBlur) {\n      inputProps.onBlur(ev);\n    }\n  }\n\n  @autobind\n  private _onClick(ev: React.FormEvent<HTMLButtonElement>) {\n    const { disabled, onChange } = this.props;\n    const { isChecked } = this.state;\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    if (!disabled) {\n      if (onChange) {\n        onChange(ev, !isChecked);\n      }\n\n      if (this.props.checked === undefined) {\n        this.setState({ isChecked: !isChecked });\n      }\n    }\n  }\n\n  @autobind\n  private _onRenderLabel(props: ICheckboxProps) {\n    const { label } = props;\n\n    return label ? (\n      <span className={ this._classNames.text }>{ label }</span>\n    ) : (\n        null\n      );\n  }\n\n  @memoize\n  private _getClassNames(\n    styles: ICheckboxStyles,\n    className: string,\n    disabled: boolean,\n    isChecked: boolean,\n    isReversed: boolean\n    ): ICheckboxClassNames {\n    return {\n      root: mergeStyles(\n        'ms-Checkbox',\n        isReversed && 'reversed',\n        isChecked && 'is-checked',\n        !disabled && 'is-enabled',\n        disabled && 'is-disabled',\n        className,\n        styles.root,\n        !disabled && [\n          !isChecked && {\n            ':hover .ms-Checkbox-checkbox': styles.checkboxHovered\n          },\n          isChecked && {\n            ':hover .ms-Checkbox-checkbox': styles.checkboxCheckedHovered\n          },\n          {\n            ':hover .ms-Checkbox-text': styles.textHovered\n          }\n        ]\n      ) as string,\n\n      label: mergeStyles(\n        'ms-Checkbox-label',\n        styles.label,\n        isReversed && styles.labelReversed,\n        disabled && styles.labelDisabled\n      ) as string,\n\n      checkbox: mergeStyles(\n        'ms-Checkbox-checkbox',\n        styles.checkbox,\n        !disabled && isChecked && styles.checkboxChecked,\n        disabled && !isChecked && styles.checkboxDisabled,\n        disabled && isChecked && styles.checkboxCheckedDisabled,\n      ) as string,\n\n      checkmark: mergeStyles(\n        styles.checkmark,\n        !disabled && isChecked && styles.checkmarkChecked,\n        disabled && !isChecked && styles.checkmarkDisabled,\n        disabled && isChecked && styles.checkmarkCheckedDisabled,\n      ) as string,\n\n      text: mergeStyles(\n        'ms-Checkbox-text',\n        styles.text,\n        disabled && styles.textDisabled\n      ) as string,\n    };\n  }\n}\n"]}