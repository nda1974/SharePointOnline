{"version":3,"file":"Checkbox.Props.js","sourceRoot":"../src/","sources":["components/Checkbox/Checkbox.Props.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { IStyle, ITheme } from '../../Styling';\nimport { IRenderFunction } from '../../Utilities';\n\n/**\n * Checkbox class interface.\n */\nexport interface ICheckbox {\n  /** Gets the current checked state. */\n  checked: boolean;\n\n  /** Sets focus to the checkbox. */\n  focus: () => void;\n}\n\n/**\n * Checkbox properties.\n */\nexport interface ICheckboxProps extends React.ButtonHTMLAttributes<HTMLElement | HTMLInputElement> {\n  /**\n   * Optional callback to access the ICheckbox interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: ICheckbox) => void;\n\n  /**\n   * Additional class name to provide on the root element, in addition to the ms-Checkbox class.\n   */\n  className?: string;\n\n  /**\n   * Checked state. Mutually exclusive to \"defaultChecked\". Use this if you control the checked state at a higher\n   * level and plan to pass in the correct value based on handling onChange events and re-rendering.\n   */\n  checked?: boolean;\n\n  /**\n   * Default checked state. Mutually exclusive to \"checked\". Use this if you want an uncontrolled component, and\n   * want the Checkbox instance to maintain its own state.\n   */\n  defaultChecked?: boolean;\n\n  /**\n   * Label to display next to the checkbox.\n   */\n  label?: string;\n\n  /**\n   * Disabled state of the checkbox.\n   */\n  disabled?: boolean;\n\n  /**\n   * Callback that is called when the checked value has changed.\n   */\n  onChange?: (ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => void;\n\n  /**\n   * Optional input props that will be mixed into the input element, *before* other props are applied. This allows\n   * you to extend the input element with additional attributes, such as data-automation-id needed for automation.\n   * Note that if you provide, for example, \"disabled\" as well as \"inputProps.disabled\", the former will take\n   * precedence over the later.\n   */\n  inputProps?: React.ButtonHTMLAttributes<HTMLElement | HTMLButtonElement>;\n\n  /**\n   * Allows you to set the checkbox to be at the before (start) or after (end) the label.\n   * @default 'start'\n   */\n  boxSide?: 'start' | 'end';\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Accessible label for the checkbox.\n   */\n  ariaLabel?: string;\n\n  /**\n   * ID for element that contains label information for the checkbox.\n   */\n  ariaLabelledBy?: string;\n\n  /**\n   * ID for element that provides extended information for the checkbox.\n   */\n  ariaDescribedBy?: string;\n\n  /**\n   * Custom styles for this component\n   */\n  styles?: ICheckboxStyles;\n\n  /**\n   * Custom render function for the label.\n   */\n  onRenderLabel?: IRenderFunction<ICheckboxProps>;\n}\n\nexport interface ICheckboxStyles {\n  /**\n   * Style for the root element (a button) of the checkbox component in the default enabled/unchecked state.\n   */\n  root?: IStyle;\n\n  /**\n   * Style for the label part (contains the customized checkbox + text) when enabled.\n   */\n  label?: IStyle;\n\n  /**\n   * Style for the label when reversed\n   */\n  labelReversed?: IStyle;\n\n  /**\n   * Style override for the label part when disabled.\n   */\n  labelDisabled?: IStyle;\n\n  /**\n   * Style for checkbox in its default unchecked/enabled state.\n   */\n  checkbox?: IStyle;\n\n  /**\n   * Style override for checkbox when enabled/unchecked/hovered.\n   */\n  checkboxHovered?: IStyle;\n\n  /**\n   * Style override for checkbox when enabled/checked.\n   */\n  checkboxChecked?: IStyle;\n\n  /**\n   * Style override for checkbox when enabled/checked/hovered.\n   */\n  checkboxCheckedHovered?: IStyle;\n\n  /**\n   * Style override for checkbox when disabled/unchecked.\n   */\n  checkboxDisabled?: IStyle;\n\n  /**\n   * Style override for checkbox when disabled/checked.\n   */\n  checkboxCheckedDisabled?: IStyle;\n\n  /**\n   * Style for the checkmark in the default enabled/unchecked state.\n   */\n  checkmark?: IStyle;\n\n  /**\n   * Style override for the checkmark when enabled/checked.\n   */\n  checkmarkChecked?: IStyle;\n\n  /**\n   * Style override for checkmark when disabled/unchecked.\n   */\n  checkmarkDisabled?: IStyle;\n\n  /**\n * Style override for checkmark when disabled/checked.\n */\n  checkmarkCheckedDisabled?: IStyle;\n\n  /**\n   * Style for text appearing with the checkbox in its default enabled state.\n   */\n  text?: IStyle;\n\n  /**\n   * Style override for text appearing with the checkbox when enabled/hovered.\n   */\n  textHovered?: IStyle;\n\n  /**\n   * Style override for text appearing with the checkbox when disabled.\n   */\n  textDisabled?: IStyle;\n}\n"]}