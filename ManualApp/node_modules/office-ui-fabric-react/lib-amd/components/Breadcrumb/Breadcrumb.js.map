{"version":3,"file":"Breadcrumb.js","sourceRoot":"../src/","sources":["components/Breadcrumb/Breadcrumb.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  autobind,\n  css,\n  getRTL\n} from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Link } from '../../Link';\nimport { Icon } from '../../Icon';\nimport { IconButton } from '../../Button';\nimport { IBreadcrumbProps, IBreadcrumbItem } from './Breadcrumb.Props';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\n\nimport * as stylesImport from './Breadcrumb.scss';\nconst styles: any = stylesImport;\n\nexport interface IBreadCrumbData {\n  props: IBreadcrumbProps;\n  renderedItems: IBreadcrumbItem[];\n  renderedOverflowItems: IBreadcrumbItem[];\n}\n\nconst OVERFLOW_KEY = 'overflow';\n\nexport class Breadcrumb extends BaseComponent<IBreadcrumbProps, any> {\n  public static defaultProps: IBreadcrumbProps = {\n    items: [],\n    maxDisplayedItems: 999\n  };\n\n  constructor(props: IBreadcrumbProps) {\n    super(props);\n  }\n\n  public render() {\n    const { onReduceData = this._onReduceData, maxDisplayedItems, items } = this.props;\n    const breadCrumbData: IBreadCrumbData = {\n      props: this.props,\n      renderedItems: items.slice(-maxDisplayedItems!),\n      renderedOverflowItems: items.slice(0, -maxDisplayedItems!)\n    };\n\n    return (\n      <ResizeGroup\n        onRenderData={ this._onRenderBreadcrumb }\n        onReduceData={ onReduceData }\n        data={ breadCrumbData }\n      />\n    );\n  }\n\n  @autobind\n  private _onReduceData(data: IBreadCrumbData): IBreadCrumbData | undefined {\n    let { renderedItems, renderedOverflowItems } = data;\n    let movedItem = renderedItems[0];\n    renderedItems = renderedItems.slice(1);\n\n    renderedOverflowItems = [...renderedOverflowItems, movedItem];\n\n    if (movedItem !== undefined) {\n      return { ...data, renderedItems, renderedOverflowItems };\n    }\n  }\n\n  @autobind\n  private _onRenderBreadcrumb(data: IBreadCrumbData) {\n    let { className, ariaLabel, onRenderItem = this._onRenderItem } = data.props;\n    let { renderedOverflowItems, renderedItems } = data;\n\n    let contextualItems = renderedOverflowItems.map(\n      (item, index) => ({\n        name: item.text,\n        key: item.key,\n        onClick: item.onClick ? this._onBreadcrumbClicked.bind(this, item) : null,\n        href: item.href\n      })\n    );\n\n    return (\n      <div\n        className={ css('ms-Breadcrumb', className, styles.root) }\n        ref='renderingArea'\n        role='navigation'\n        aria-label={ ariaLabel }\n      >\n        <FocusZone direction={ FocusZoneDirection.horizontal } >\n          <ol className={ css('ms-Breadcrumb-list', styles.list) }>\n            { renderedOverflowItems && renderedOverflowItems.length !== 0 && (\n              <li className={ css('ms-Breadcrumb-overflow', styles.overflow) } key={ OVERFLOW_KEY } ref={ OVERFLOW_KEY }>\n                <IconButton\n                  className={ css('ms-Breadcrumb-overflowButton', styles.overflowButton) }\n                  iconProps={ { iconName: 'More' } }\n                  role='button'\n                  aria-haspopup='true'\n                  onRenderMenuIcon={ () => null }\n                  menuProps={ {\n                    items: contextualItems,\n                    directionalHint: DirectionalHint.bottomLeftEdge\n                  } }\n                />\n                { Icon({\n                  className: css('ms-Breadcrumb-chevron', styles.chevron),\n                  iconName: getRTL() ? 'ChevronLeft' : 'ChevronRight'\n                }) }\n              </li>\n            ) }\n            { renderedItems.map(\n              (item, index) => (\n                <li className={ css('ms-Breadcrumb-listItem', styles.listItem) } key={ item.key || String(index) } ref={ item.key || String(index) }>\n                  { onRenderItem(item, this._onRenderItem) }\n                  <Icon\n                    className={ css('ms-Breadcrumb-chevron', styles.chevron) }\n                    iconName={ getRTL() ? 'ChevronLeft' : 'ChevronRight' } />\n                </li>\n              )) }\n          </ol>\n        </FocusZone>\n      </div>\n    );\n  }\n\n  @autobind\n  private _onRenderItem(item: IBreadcrumbItem) {\n    if (item.onClick || item.href) {\n      return (\n        <Link\n          className={ css('ms-Breadcrumb-itemLink', styles.itemLink) }\n          href={ item.href }\n          aria-current={ item.isCurrentItem ? 'page' : null }\n          onClick={ this._onBreadcrumbClicked.bind(this, item) }>\n          <TooltipHost\n            content={ item.text }\n            overflowMode={ TooltipOverflowMode.Parent }\n          >\n            { item.text }\n          </TooltipHost>\n        </Link>\n      );\n    } else {\n      return (\n        <span className={ css('ms-Breadcrumb-item', styles.item) }>\n          <TooltipHost\n            content={ item.text }\n            overflowMode={ TooltipOverflowMode.Parent }\n          >\n            { item.text }\n          </TooltipHost>\n        </span>\n      );\n    }\n  }\n\n  @autobind\n  private _onBreadcrumbClicked(item: IBreadcrumbItem, ev: React.MouseEvent<HTMLElement>) {\n    if (item.onClick) {\n      item.onClick(ev, item);\n    }\n  }\n}\n"]}