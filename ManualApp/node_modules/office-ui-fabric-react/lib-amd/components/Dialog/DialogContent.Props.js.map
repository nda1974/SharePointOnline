{"version":3,"file":"DialogContent.Props.js","sourceRoot":"../src/","sources":["components/Dialog/DialogContent.Props.ts"],"names":[],"mappings":";;;IA0EA,IAAY,UAOX;IAPD,WAAY,UAAU;QACpB,sBAAsB;QACtB,+CAAU,CAAA;QACV,sCAAsC;QACtC,yDAAe,CAAA;QACf,gEAAgE;QAChE,6CAAS,CAAA;IACX,CAAC,EAPW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAOrB","sourcesContent":["import * as React from 'react';\nimport { DialogContent } from './DialogContent';\nimport { IButtonProps } from '../Button/Button.Props';\nimport { ResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\n\nexport interface IDialogContent {\n\n}\n\nexport interface IDialogContentProps extends React.Props<DialogContent> {\n  /**\n  * Optional callback to access the IDialogContent interface. Use this instead of ref for accessing\n  * the public methods and properties of the component.\n  */\n  componentRef?: (component: IDialogContent) => void;\n\n  /**\n  * Show an 'x' close button in the upper-right corner\n  */\n  showCloseButton?: boolean;\n\n  /**\n   * Other top buttons that will show up next to the close button\n   */\n  topButtonsProps?: IButtonProps[];\n\n  /**\n  * Optional override class name\n  */\n  className?: string;\n\n  /**\n  * A callback function for when the Dialog is dismissed from the close button or light dismiss, before the animation completes.\n  */\n  onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement>) => any;\n\n  /**\n  * The Id for subText container\n  */\n  subTextId?: string;\n\n  /**\n  * The subtext to display in the dialog\n  */\n  subText?: string;\n\n  /**\n   * The Id for title container\n   */\n  titleId?: string;\n\n  /**\n  * The title text to display at the top of the dialog.\n  */\n  title?: string;\n\n  /**\n   * Responsive mode passed in from decorator.\n   */\n  responsiveMode?: ResponsiveMode;\n\n  /**\n   * Label to be passed to to aria-label of close button\n   * @default Close\n   */\n  closeButtonAriaLabel?: string;\n\n  /**\n  * The type of Dialog to display.\n  * @default DialogType.normal\n  */\n  type?: DialogType;\n}\n\nexport enum DialogType {\n  /** Standard dialog */\n  normal = 0,\n  /** Dialog with large header banner */\n  largeHeader = 1,\n  /** Dialog with an 'x' close button in the upper-right corner */\n  close = 2\n}\n"]}