{"version":3,"file":"GridCell.js","sourceRoot":"../src/","sources":["utilities/grid/GridCell.tsx"],"names":[],"mappings":";;;IAUA;QAA8D,oCAAsB;QAApF;;QAyGA,CAAC;QA/FQ,yBAAM,GAAb;YACM,IAAA,eAeU,EAdZ,cAAI,EACJ,UAAE,EACF,wBAAS,EACT,cAAI,EACJ,sBAAQ,EACR,sBAAQ,EACR,oBAAO,EACP,oBAAO,EACP,oBAAO,EACP,8BAAY,EACZ,wCAAiB,EACjB,4CAAmB,EACnB,gBAAK,EACL,gBAAK,CACQ;YACf,MAAM,CAAC,CACL,oBAAC,sBAAa,IACZ,EAAE,EAAG,EAAE,GAAG,OAAO,GAAG,KAAK,gBACZ,KAAK,uBACE,IAAI,EACxB,QAAQ,EAAG,QAAQ,EACnB,SAAS,EAAG,eAAG,CAAC,SAAS;oBAErB,GAAC,EAAE,GAAG,mBAAmB,IAAG,QAAQ;oBACpC,GAAC,EAAE,GAAG,iBAAiB,IAAG,QAAQ;wBAErC,EACD,OAAO,EAAG,IAAI,CAAC,QAAQ,EACvB,YAAY,EAAG,IAAI,CAAC,aAAa,EACjC,YAAY,EAAG,IAAI,CAAC,aAAa,EACjC,OAAO,EAAG,IAAI,CAAC,QAAQ,EACvB,IAAI,EAAG,IAAI,mBACK,QAAQ,EACxB,SAAS,EAAG,KAAK,EACjB,KAAK,EAAG,KAAK,IAEX,YAAY,CAAC,IAAI,CAAC,CACL,CAClB,CAAC;;QACJ,CAAC;QAGO,2BAAQ,GAAhB;YACM,IAAA,eAIiB,EAHnB,oBAAO,EACP,sBAAQ,EACR,cAAI,CACgB;YAEtB,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACzB,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC;QACH,CAAC;QAGO,gCAAa,GAArB;YACM,IAAA,eAIiB,EAHnB,oBAAO,EACP,sBAAQ,EACR,cAAI,CACgB;YAEtB,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACzB,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC;QACH,CAAC;QAGO,gCAAa,GAArB;YACM,IAAA,eAIiB,EAHnB,oBAAO,EACP,sBAAQ,EACR,cAAI,CACgB;YAEtB,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACzB,OAAO,EAAE,CAAC;YACZ,CAAC;QACH,CAAC;QAGO,2BAAQ,GAAhB;YACM,IAAA,eAIiB,EAHnB,oBAAO,EACP,sBAAQ,EACR,cAAI,CACgB;YAEtB,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACzB,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC;QACH,CAAC;QArGa,qBAAY,GAAG;YAC3B,SAAS,EAAE,QAAQ;YACnB,QAAQ,EAAE,KAAK;YACf,EAAE,EAAE,iBAAK,CAAC,UAAU,CAAC;SACtB,CAAC;QAgDF;YADC,oBAAQ;gDAWR;QAGD;YADC,oBAAQ;qDAWR;QAGD;YADC,oBAAQ;qDAWR;QAGD;YADC,oBAAQ;gDAWR;QAEH,eAAC;KAAA,AAzGD,CAA8D,KAAK,CAAC,SAAS,GAyG5E;IAzGY,4BAAQ","sourcesContent":["import * as React from 'react';\nimport {\n  autobind,\n  BaseComponent,\n  css,\n  getId,\n} from '../../Utilities';\nimport { IGridCellProps } from './GridCell.Props';\nimport { CommandButton } from '../../Button';\n\nexport class GridCell<T, P extends IGridCellProps<T>> extends React.Component<P, {}> {\n\n  public static defaultProps = {\n    cellShape: 'circle',\n    disabled: false,\n    id: getId('gridCell')\n  };\n\n  private _id: string;\n\n  public render() {\n    let {\n      item,\n      id,\n      className,\n      role,\n      selected,\n      disabled,\n      onClick,\n      onHover,\n      onFocus,\n      onRenderItem,\n      cellDisabledStyle,\n      cellIsSelectedStyle,\n      index,\n      label\n    } = this.props;\n    return (\n      <CommandButton\n        id={ id + '-item' + index }\n        data-index={ index }\n        data-is-focusable={ true }\n        disabled={ disabled }\n        className={ css(className,\n          {\n            ['' + cellIsSelectedStyle]: selected,\n            ['' + cellDisabledStyle]: disabled\n          }\n        ) }\n        onClick={ this._onClick }\n        onMouseEnter={ this._onMouseEnter }\n        onMouseLeave={ this._onMouseLeave }\n        onFocus={ this._onFocus }\n        role={ role }\n        aria-selected={ selected }\n        ariaLabel={ label }\n        title={ label }\n      >\n        { onRenderItem(item) }\n      </CommandButton >\n    );\n  }\n\n  @autobind\n  private _onClick() {\n    let {\n      onClick,\n      disabled,\n      item\n      } = this.props as P;\n\n    if (onClick && !disabled) {\n      onClick(item);\n    }\n  }\n\n  @autobind\n  private _onMouseEnter() {\n    let {\n      onHover,\n      disabled,\n      item\n      } = this.props as P;\n\n    if (onHover && !disabled) {\n      onHover(item);\n    }\n  }\n\n  @autobind\n  private _onMouseLeave() {\n    let {\n      onHover,\n      disabled,\n      item\n      } = this.props as P;\n\n    if (onHover && !disabled) {\n      onHover();\n    }\n  }\n\n  @autobind\n  private _onFocus() {\n    let {\n      onFocus,\n      disabled,\n      item\n      } = this.props as P;\n\n    if (onFocus && !disabled) {\n      onFocus(item);\n    }\n  }\n\n}"]}