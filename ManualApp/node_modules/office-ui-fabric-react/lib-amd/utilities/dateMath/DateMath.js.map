{"version":3,"file":"DateMath.js","sourceRoot":"../src/","sources":["utilities/dateMath/DateMath.ts"],"names":[],"mappings":"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","sourcesContent":["import { DayOfWeek, DateRangeType } from '../dateValues/DateValues';\nimport { assertNever } from '../../Utilities';\n\nconst DAYS_IN_WEEK = 7;\nconst MONTHS_IN_YEAR = 12;\n\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param {Date} date - The origin date\n * @param {number} days - The number of days to offset. 'days' can be negative.\n * @return {Date} A new Date object offset from the origin date by the given number of days\n */\nexport function addDays(date: Date, days: number): Date {\n  let result = new Date(date.getTime());\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param {Date} date - The origin date\n * @param {number} weeks - The number of weeks to offset. 'weeks' can be negative.\n * @return {Date} A new Date object offset from the origin date by the given number of weeks\n */\nexport function addWeeks(date: Date, weeks: number): Date {\n  return addDays(date, weeks * DAYS_IN_WEEK);\n}\n\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param {Date} date - The origin date\n * @param {number} months - The number of months to offset. 'months' can be negative.\n * @return {Date} A new Date object offset from the origin date by the given number of months\n */\nexport function addMonths(date: Date, months: number): Date {\n  let result = new Date(date.getTime());\n  let newMonth = result.getMonth() + months;\n  result.setMonth(newMonth);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (result.getMonth() !== ((newMonth % MONTHS_IN_YEAR) + MONTHS_IN_YEAR) % MONTHS_IN_YEAR) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param {Date} date - The origin date\n * @param {number} years - The number of years to offset. 'years' can be negative.\n * @return {Date} A new Date object offset from the origin date by the given number of years\n */\nexport function addYears(date: Date, years: number): Date {\n  let result = new Date(date.getTime());\n  result.setFullYear(date.getFullYear() + years);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (result.getMonth() !== ((date.getMonth() % MONTHS_IN_YEAR) + MONTHS_IN_YEAR) % MONTHS_IN_YEAR) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param {Date} date - The origin date\n * @param {number} month - The 0-based index of the month to set on the date.\n * @return {Date} A new Date object with the given month set.\n */\nexport function setMonth(date: Date, month: number): Date {\n  return addMonths(date, month - date.getMonth());\n}\n\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @return {boolean} True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */\nexport function compareDates(date1: Date, date2: Date): boolean {\n  if (!date1 && !date2) {\n    return true;\n  } else if (!date1 || !date2) {\n    return false;\n  } else {\n    return (date1.getFullYear() === date2.getFullYear()\n      && date1.getMonth() === date2.getMonth()\n      && date1.getDate() === date2.getDate());\n  }\n}\n\n/**\n * Compare the date parts of two dates\n * @param {Date} date1 - The first date to compare\n * @param {Date} date2 - The second date to compare\n * @returns {Number} A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */\nexport function compareDatePart(date1: Date, date2: Date): Number {\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param {Date} date - The input date\n * @param {DateRangeType} dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param {DayOfWeek} dayOfWeek - The first day of the week.\n * @returns {Date[]} An array of dates representing the date range containing the specified date.\n */\nexport function getDateRangeArray(date: Date, dateRangeType: DateRangeType, firstDayOfWeek: DayOfWeek): Date[] {\n  let datesArray = new Array<Date>();\n  let startDate: Date;\n  let endDate = null;\n\n  switch (dateRangeType) {\n    case DateRangeType.Day:\n      startDate = getDatePart(date);\n      endDate = addDays(startDate, 1);\n      break;\n\n    case DateRangeType.Week:\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n      endDate = addDays(startDate, DAYS_IN_WEEK);\n      break;\n\n    case DateRangeType.Month:\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      endDate = addMonths(startDate, 1);\n      break;\n    default:\n      return assertNever(dateRangeType);\n  }\n\n  // Populate the dates array with the dates in range\n  datesArray.push(startDate);\n  let nextDate = addDays(startDate, 1);\n  while (!compareDates(nextDate, endDate)) {\n    datesArray.push(nextDate);\n    nextDate = addDays(nextDate, 1);\n  }\n\n  return datesArray;\n}\n\n/**\n * Checks whether the specified date is in the given date range.\n * @param {Date} date - The origin date\n * @param {Date[]} dateRange - An array of dates to do the lookup on\n * @returns {bool} True if the date matches one of the dates in the specified array, false otherwise.\n */\nexport function isInDateRangeArray(date: Date, dateRange: Date[]): boolean {\n  for (let dateInRange of dateRange) {\n    if (compareDates(date, dateInRange)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param {Date} date - The origin date\n * @returns {Date} A new date with the time set to midnight\n */\nfunction getDatePart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param {Date} date - The date to find the beginning of the week date for.\n * @return {Date} A new date object representing the first day of the week containing the input date.\n */\nfunction getStartDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  let daysOffset = firstDayOfWeek - date.getDay();\n  if (daysOffset > 0) {\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n    daysOffset -= DAYS_IN_WEEK;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Helper function to assist in date comparisons\n */\nfunction getDatePartHashValue(date: Date) {\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n  /* tslint:disable:no-bitwise */\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n  /* tslint:enable:no-bitwise */\n}"]}