{"version":3,"file":"interfaces.js","sourceRoot":"../src/","sources":["utilities/selection/interfaces.ts"],"names":[],"mappings":";;;IAIa,QAAA,gBAAgB,GAAG,QAAQ,CAAC;IAEzC,IAAY,aAIX;IAJD,WAAY,aAAa;QACvB,iDAAQ,CAAA;QACR,qDAAU,CAAA;QACV,yDAAY,CAAA;IACd,CAAC,EAJW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAIxB;IAoDD,IAAY,kBAGX;IAHD,WAAY,kBAAkB;QAC5B,uEAAc,CAAA;QACd,mEAAY,CAAA;IACd,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B","sourcesContent":["export interface IObjectWithKey {\n  key?: string | number;\n}\n\nexport const SELECTION_CHANGE = 'change';\n\nexport enum SelectionMode {\n  none = 0,\n  single = 1,\n  multiple = 2\n}\n\nexport interface ISelection {\n  count: number;\n  mode: SelectionMode;\n\n  canSelectItem: (item: IObjectWithKey) => boolean;\n\n  // Obesrvable methods.\n  setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void;\n\n  // Initialization methods.\n\n  setItems(items: IObjectWithKey[], shouldClear: boolean): void;\n  getItems(): IObjectWithKey[];\n\n  // Read selection methods.\n\n  getSelection(): IObjectWithKey[];\n  getSelectedCount(): number;\n  isRangeSelected(fromIndex: number, count: number): boolean;\n\n  isAllSelected(): boolean;\n  isKeySelected(key: string): boolean;\n  isIndexSelected(index: number): boolean;\n\n  // Write selection methods.\n\n  setAllSelected(isAllSelected: boolean): void;\n  setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void;\n  setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void;\n\n  // Write range selection methods.\n\n  selectToKey(key: string, clearSelection?: boolean): void;\n  selectToIndex(index: number, clearSelection?: boolean): void;\n\n  // Toggle helpers.\n\n  toggleAllSelected(): void;\n  toggleKeySelected(key: string): void;\n  toggleIndexSelected(index: number): void;\n  toggleRangeSelected(fromIndex: number, count: number): void;\n}\n\nexport interface ISelectionLayout {\n  getItemIndexAbove(index: number, items: any[]): number;\n  getItemIndexBelow(index: number, items: any[]): number;\n  getItemIndexLeft(index: number, items: any[]): number;\n  getItemIndexRight(index: number, items: any[]): number;\n}\n\nexport enum SelectionDirection {\n  horizontal = 0,\n  vertical = 1\n}\n"]}