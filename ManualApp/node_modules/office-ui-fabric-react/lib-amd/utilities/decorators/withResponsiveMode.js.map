{"version":3,"file":"withResponsiveMode.js","sourceRoot":"../src/","sources":["utilities/decorators/withResponsiveMode.tsx"],"names":[],"mappings":";;;IAQA,IAAY,cAOX;IAPD,WAAY,cAAc;QACxB,qDAAS,CAAA;QACT,uDAAU,CAAA;QACV,qDAAS,CAAA;QACT,uDAAU,CAAA;QACV,yDAAW,CAAA;QACX,2DAAY,CAAA;IACd,CAAC,EAPW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAOzB;IAED,IAAM,yBAAyB,GAAG;QAChC,GAAG;QACH,GAAG;QACH,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,QAAQ;KACT,CAAC;IAEF,IAAI,YAAwC,CAAC;IAE7C;;OAEG;IACH,2BAAkC,cAA0C;QAC1E,YAAY,GAAG,cAAc,CAAC;IAChC,CAAC;IAFD,8CAEC;IAED,4BAAqF,iBAA4E;QAE/J,MAAM;YAAkC,8CAA0C;YAEhF;gBAAA,YACE,iBAAO,SAMR;gBALC,KAAI,CAAC,2BAA2B,GAAG,KAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;gBAE/E,KAAI,CAAC,KAAK,GAAG;oBACX,cAAc,EAAE,KAAI,CAAC,kBAAkB,EAAE;iBAC1C,CAAC;;YACJ,CAAC;YAEM,8CAAiB,GAAxB;gBAAA,iBAUC;gBATC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE;oBAChC,IAAI,cAAc,GAAG,KAAI,CAAC,kBAAkB,EAAE,CAAC;oBAE/C,EAAE,CAAC,CAAC,cAAc,KAAK,KAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;wBACjD,KAAI,CAAC,QAAQ,CAAC;4BACZ,cAAc,EAAE,cAAc;yBAC/B,CAAC,CAAC;oBACL,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;YAEM,iDAAoB,GAA3B;gBACE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YACzB,CAAC;YAEM,mCAAM,GAAb;gBACQ,IAAA,0CAAc,CAAgB;gBAEpC,MAAM,CAAC,CACL,oBAAC,iBAAiB,qBAAC,GAAG,EAAG,IAAI,CAAC,2BAA2B,EAAG,cAAc,EAAG,cAAc,IAAQ,IAAI,CAAC,KAAY,EAAK,CAC1H,CAAC;YACJ,CAAC;YAEO,+CAAkB,GAA1B;gBACE,IAAI,cAAc,GAAG,cAAc,CAAC,KAAK,CAAC;gBAC1C,IAAI,GAAG,GAAG,qBAAS,EAAE,CAAC;gBAEtB,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,WAAW,CAAC,CAAC,CAAC;oBAC/B,IAAI,CAAC;wBACH,OAAO,GAAG,CAAC,UAAU,GAAG,yBAAyB,CAAC,cAAc,CAAC,EAAE,CAAC;4BAClE,cAAc,EAAE,CAAC;wBACnB,CAAC;oBACH,CAAC;oBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACX,uGAAuG;wBACvG,cAAc,GAAG,cAAc,CAAC,KAAK,CAAC;oBACxC,CAAC;gBACH,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,EAAE,CAAC,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;wBAC/B,cAAc,GAAG,YAAY,CAAC;oBAChC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,IAAI,KAAK,CACb,4FAA4F;4BAC5F,+DAA+D,CAChE,CAAC;oBACJ,CAAC;gBACH,CAAC;gBAED,MAAM,CAAC,cAAc,CAAC;YACxB,CAAC;YACH,yBAAC;QAAD,CAAC,AA7DM,CAAiC,6BAAa,GA6DnD;IACJ,CAAC;IAhED,gDAgEC","sourcesContent":["import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow } from '../../Utilities';\n\nexport interface IWithResponsiveModeState {\n  responsiveMode?: ResponsiveMode;\n}\n\nexport enum ResponsiveMode {\n  small = 0,\n  medium = 1,\n  large = 2,\n  xLarge = 3,\n  xxLarge = 4,\n  xxxLarge = 5\n}\n\nconst RESPONSIVE_MAX_CONSTRAINT = [\n  479,\n  639,\n  1023,\n  1365,\n  1919,\n  99999999\n];\n\nlet _defaultMode: ResponsiveMode | undefined;\n\n/**\n * Allows a server rendered scenario to provide a default responsive mode.\n */\nexport function setResponsiveMode(responsiveMode: ResponsiveMode | undefined) {\n  _defaultMode = responsiveMode;\n}\n\nexport function withResponsiveMode<P extends { responsiveMode?: ResponsiveMode }, S>(ComposedComponent: (new (props: P, ...args: any[]) => React.Component<P, S>)): any {\n\n  return class WithResponsiveMode extends BaseDecorator<P, IWithResponsiveModeState> {\n\n    constructor() {\n      super();\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n\n      this.state = {\n        responsiveMode: this._getResponsiveMode()\n      };\n    }\n\n    public componentDidMount() {\n      this._events.on(window, 'resize', () => {\n        let responsiveMode = this._getResponsiveMode();\n\n        if (responsiveMode !== this.state.responsiveMode) {\n          this.setState({\n            responsiveMode: responsiveMode\n          });\n        }\n      });\n    }\n\n    public componentWillUnmount() {\n      this._events.dispose();\n    }\n\n    public render() {\n      let { responsiveMode } = this.state;\n\n      return (\n        <ComposedComponent ref={ this._updateComposedComponentRef } responsiveMode={ responsiveMode } { ...this.props as any } />\n      );\n    }\n\n    private _getResponsiveMode(): ResponsiveMode {\n      let responsiveMode = ResponsiveMode.small;\n      let win = getWindow();\n\n      if (typeof win !== 'undefined') {\n        try {\n          while (win.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n            responsiveMode++;\n          }\n        } catch (e) {\n          // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n          responsiveMode = ResponsiveMode.large;\n        }\n      } else {\n        if (_defaultMode !== undefined) {\n          responsiveMode = _defaultMode;\n        } else {\n          throw new Error(\n            'Content was rendered in a server environment without providing a default responsive mode. ' +\n            'Call setResponsiveMode to define what the responsive mode is.'\n          );\n        }\n      }\n\n      return responsiveMode;\n    }\n  };\n}\n"]}