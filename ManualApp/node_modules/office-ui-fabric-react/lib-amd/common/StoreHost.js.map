{"version":3,"file":"StoreHost.js","sourceRoot":"../src/","sources":["common/StoreHost.tsx"],"names":[],"mappings":";;;IAcA;QAA+B,qCAAkC;QAAjE;;QAqBA,CAAC;QAVQ,mCAAe,GAAtB;YACQ,IAAA,kCAAoB,CAAkB;YACtC,IAAA,iCAAqB,CAAgB;YAE3C,MAAM,CAAC,EAAE,MAAM,EAAE,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,aAAc,CAAC,GAAG,aAAa,EAAE,CAAC;QACvF,CAAC;QAEM,0BAAM,GAAb;YACE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC;QAnBa,sBAAY,GAAG;YAC3B,MAAM,EAAE,SAAS,CAAC,MAAM;SACzB,CAAC;QAEY,2BAAiB,GAAG;YAChC,MAAM,EAAE,SAAS,CAAC,MAAM;SACzB,CAAC;QAcJ,gBAAC;KAAA,AArBD,CAA+B,yBAAa,GAqB3C;IArBY,8BAAS","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { StoreSet } from './StoreSet';\nimport { BaseComponent } from '../Utilities';\n\nexport interface IStoreHostProps extends React.Props<StoreHost> {\n  componentRef?: () => void;\n  stores?: StoreSet;\n}\n\nexport interface IStoreHostContext {\n  stores?: StoreSet;\n}\n\nexport class StoreHost extends BaseComponent<IStoreHostProps, {}> {\n  public static contextTypes = {\n    stores: PropTypes.object\n  };\n\n  public static childContextTypes = {\n    stores: PropTypes.object\n  };\n\n  public context: IStoreHostContext;\n\n  public getChildContext(): IStoreHostContext {\n    let { stores: parentStores } = this.context;\n    let { stores: currentStores } = this.props;\n\n    return { stores: parentStores ? parentStores.merge(currentStores!) : currentStores };\n  }\n\n  public render() {\n    return React.Children.only(this.props.children);\n  }\n}\n"]}