{"version":3,"file":"PhantomCssInterface.js","sourceRoot":"../src/","sources":["visualtest/PhantomCssInterface.ts"],"names":[],"mappings":"","sourcesContent":["// This is a temporary hack and should be changed as soon as possible.\n// I'm not sure the cause of these errors but they are as follows:\n// PhantomCSS causes the compiler to throw an error because it cannot find resemble.\n// PhantomJS causes an error because it contains a duplicate definition of require which conflicts\n// with nodejs's definition.\n// Casper does not include the mouse module.\n// I think that all of these can be changed in the DefinitelyTyped repo but I'm not sure how long\n// that would take. Additionally some of these problems could be caused by our build systems.\n// Finally all of these definitions have been taken from DefinitelyTyped, I did not write them myself.\n// The links are:\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/phantomcss/index.d.ts\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/phantomjs/index.d.ts\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/casperjs/index.d.ts\n// This file should be trimmed down or replaced once the DefinitelyTyped files have been fixed.\nimport { OutputSettings } from 'resemblejs';\n\nexport interface ICasperMouse {\n  down(selector: string): void;\n  move(selector: string): void;\n}\n\nexport type Casper = {\n  mouse: ICasperMouse;\n  test: ITester;\n  options: ICasperOptions;\n\n  // Properties\n  __utils__: IClientUtils;\n\n  // Methods\n  back(): Casper;\n  base64encode(url: string, method?: string, data?: any): string;\n  bypass(nb: number): any;\n  click(selector: string): boolean;\n  clickLabel(label: string, tag?: string): boolean;\n  capture(targetFilePath: string, clipRect: IClipRect): Casper;\n  captureBase64(format: string): string;\n  captureBase64(format: string, area: string): string;\n  captureBase64(format: string, area: IClipRect): string;\n  captureBase64(format: string, area: any): string;\n  captureSelector(targetFile: string, selector: string): Casper;\n  clear(): Casper;\n  debugHTML(selector?: string, outer?: boolean): Casper;\n  debugPage(): Casper;\n  die(message: string, status?: number): Casper;\n  download(url: string, target?: string, method?: string, data?: any): Casper;\n  each<T>(array: T[], fn: (this: Casper, item: T, index: number) => void): Casper;\n  echo(message: string, style?: string): Casper;\n  evaluate<T>(fn: () => T, ...args: any[]): T\n  evaluateOrDie(fn: () => any, message?: string, status?: number): Casper;\n  exit(status?: number): Casper;\n  exists(selector: string): boolean;\n  fetchText(selector: string): string;\n  forward(): Casper;\n  log(message: string, level?: string, space?: string): Casper;\n  fill(selector: string, values: any, submit?: boolean): void;\n  fillSelectors(selector: string, values: any, submit?: boolean): void;\n  fillXPath(selector: string, values: any, submit?: boolean): void;\n  getCurrentUrl(): string;\n  getElementAttribute(selector: string, attribute: string): string;\n  getElementsAttribute(selector: string, attribute: string): string;\n  getElementBounds(selector: string): IElementBounds;\n  getElementsBounds(selector: string): IElementBounds[];\n  getElementInfo(selector: string): IElementInfo;\n  getElementsInfo(selector: string): IElementInfo;\n  getFormValues(selector: string): any;\n  getGlobal(name: string): any;\n  getHTML(selector?: string, outer?: boolean): string;\n  getPageContent(): string;\n  getTitle(): string;\n  mouseEvent(type: string, selector: string): boolean;\n  open(location: string, settings: IOpenSettings): Casper;\n  reload(then?: (response: IHttpResponse) => void): Casper;\n  repeat(times: number, then: Function): Casper;\n  resourceExists(test: Function): boolean;\n  resourceExists(test: string): boolean;\n  run(onComplete: Function, time?: number): Casper;\n  scrollTo(x: number, y: number): Casper;\n  scrollToBottom(): Casper;\n  sendKeys(selector: string, keys: string, options?: any): Casper;\n  setHttpAuth(username: string, password: string): Casper;\n  start(url?: string, then?: (response: IHttpResponse) => void): Casper;\n  status(asString: boolean): any;\n  then(fn: (this: Casper) => void): Casper;\n  thenBypass(nb: number): Casper;\n  thenBypassIf(condition: any, nb: number): Casper;\n  thenBypassUnless(condition: any, nb: number): Casper;\n  thenClick(selector: string): Casper;\n  thenEvaluate(fn: () => any, ...args: any[]): Casper;\n  thenOpen(location: string, then?: (response: IHttpResponse) => void): Casper;\n  thenOpen(location: string, options?: IOpenSettings, then?: (response: IHttpResponse) => void): Casper;\n  thenOpenAndEvaluate(location: string, then?: Function, ...args: any[]): Casper;\n  toString(): string;\n  unwait(): Casper;\n  userAgent(agent: string): string;\n  viewport(width: number, height: number): Casper;\n  visible(selector: string): boolean;\n  wait(timeout: number, then?: Function): Casper;\n  waitFor(testFx: Function, then?: Function, onTimeout?: Function, timeout?: number): Casper;\n  waitForAlert(then: Function, onTimeout?: Function, timeout?: number): Casper;\n  waitForPopup(urlPattern: string, then?: Function, onTimeout?: Function, timeout?: number): Casper;\n  waitForPopup(urlPattern: RegExp, then?: Function, onTimeout?: Function, timeout?: number): Casper;\n  waitForUrl(url: string, then?: Function, onTimeout?: Function, timeout?: number): Casper;\n  waitForUrl(url: RegExp, then?: Function, onTimeout?: Function, timeout?: number): Casper;\n  waitForSelector(selector: string, then?: Function, onTimeout?: Function, timeout?: number): Casper;\n  waitWhileSelector(selector: string, then?: Function, onTimeout?: Function, timeout?: number): Casper;\n  waitForResource(testFx: Function, then?: Function, onTimeout?: Function, timeout?: number): Casper;\n  waitForText(pattern: string, then?: Function, onTimeout?: Function, timeout?: number): Casper;\n  waitForText(pattern: RegExp, then?: Function, onTimeout?: Function, timeout?: number): Casper;\n  waitUntilVisible(selector: string, then?: Function, onTimeout?: Function, timeout?: number): Casper;\n  waitWhileVisible(selector: string, then?: Function, onTimeout?: Function, timeout?: number): Casper;\n  warn(message: string): Casper;\n  withFrame(frameInfo: string, then: Function): Casper;\n  withFrame(frameInfo: number, then: Function): Casper;\n  withPopup(popupInfo: string, step: Function): Casper;\n  withPopup(popupInfo: RegExp, step: Function): Casper;\n  zoom(factor: number): Casper;\n  removeAllFilters(filter: string): Casper;\n  setFilter(filter: string, cb: Function): boolean;\n};\n\nexport interface IHttpResponse {\n  contentType: string;\n  headers: any[];\n  id: number;\n  redirectURL: string;\n  stage: string;\n  status: number;\n  statusText: string;\n  time: string;\n  url: string;\n}\n\nexport interface IOpenSettings {\n  method: string;\n  data: any;\n  headers: any;\n}\n\nexport interface IElementBounds {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n}\n\nexport interface IElementInfo {\n  nodeName: string;\n  attributes: any;\n  tag: string;\n  html: string;\n  text: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  visible: boolean;\n}\n\nexport interface ICasperOptions {\n  clientScripts?: any[];\n  exitOnError?: boolean;\n  httpStatusHandlers?: any;\n  logLevel?: string;\n  onAlert?: Function;\n  onDie?: Function;\n  onError?: Function;\n  onLoadError?: Function;\n  onPageInitialized?: Function;\n  onResourceReceived?: Function;\n  onResourceRequested?: Function;\n  onStepComplete?: Function;\n  onStepTimeout?: Function;\n  onTimeout?: Function;\n  onWaitTimeout?: Function;\n  page?: IWebPage;\n  pageSettings?: any;\n  remoteScripts?: any[];\n  safeLogs?: boolean;\n  silentErrors?: boolean;\n  stepTimeout?: number;\n  timeout?: number;\n  verbose?: boolean;\n  viewportSize?: any;\n  retryTimeout?: number;\n  waitTimeout?: number;\n}\n\nexport interface IClientUtils {\n  echo(message: string): void;\n  encode(contents: string): void;\n  exists(selector: string): void;\n  findAll(selector: string): void;\n  findOne(selector: string): void;\n  getBase64(url: string, method?: string, data?: any): void;\n  getBinary(url: string, method?: string, data?: any): void;\n  getDocumentHeight(): void;\n  getElementBounds(selector: string): void;\n  getElementsBounds(selector: string): void;\n  getElementByXPath(expression: string, scope?: HTMLElement): void;\n  getElementsByXPath(expression: string, scope?: HTMLElement): void;\n  getFieldValue(inputName: string): void;\n  getFormValues(selector: string): void;\n  mouseEvent(type: string, selector: string): void;\n  removeElementsByXPath(expression: string): void;\n  sendAJAX(url: string, method?: string, data?: any, async?: boolean): void;\n  visible(selector: string): void;\n}\n\nexport interface IColorizer {\n  colorize(text: string, styleName: string): void;\n  format(text: string, style: any): void;\n}\n\nexport interface ITester {\n  assert(condition: boolean, message?: string): any;\n  assertDoesntExist(selector: string, message?: string): any;\n  assertElementCount(selctor: string, expected: number, message?: string): any;\n  assertEquals(testValue: any, expected: any, message?: string): any;\n  assertEval(fn: Function, message: string, args: any): any;\n  assertEvalEquals(fn: Function, expected: any, message?: string, args?: any): any;\n  assertExists(selector: string, message?: string): any;\n  assertFalsy(subject: any, message?: string): any;\n  assertField(inputName: string, expected: string, message?: string): any;\n  assertFieldName(inputName: string, expected: string, message?: string, options?: any): any;\n  assertFieldCSS(cssSelector: string, expected: string, message?: string): any;\n  assertFieldXPath(xpathSelector: string, expected: string, message?: string): any;\n  assertHttpStatus(status: number, message?: string): any;\n  assertMatch(subject: any, pattern: RegExp, message?: string): any;\n  assertNot(subject: any, message?: string): any;\n  assertNotEquals(testValue: any, expected: any, message?: string): any;\n  assertNotVisible(selector: string, message?: string): any;\n  assertRaises(fn: Function, args: any[], message?: string): any;\n  assertSelectorDoesntHaveText(selector: string, text: string, message?: string): any;\n  assertSelectorExists(selector: string, message?: string): any;\n  assertSelectorHasText(selector: string, text: string, message?: string): any;\n  assertResourceExists(testFx: Function, message?: string): any;\n  assertTextExists(expected: string, message?: string): any;\n  assertTextDoesntExist(unexpected: string, message: string): any;\n  assertTitle(expected: string, message?: string): any;\n  assertTitleMatch(pattern: RegExp, message?: string): any;\n  assertTruthy(subject: any, message?: string): any;\n  assertType(input: any, type: string, message?: string): any;\n  assertInstanceOf(input: any, ctor: Function, message?: string): any;\n  assertUrlMatch(pattern: string, message?: string): any;\n  assertUrlMatch(pattern: RegExp, message?: string): any;\n  assertVisible(selector: string, message?: string): any;\n\n  /* since 1.1 */\n  begin(description: string, planned: number, suite: Function): any;\n  begin(description: string, suite: Function): any;\n  begin(description: string, planned: number, config: Object): any;\n  begin(description: string, config: Object): any;\n\n  colorize(message: string, style: string): any;\n  comment(message: string): any;\n  done(expected?: number): any;\n  error(message: string): any;\n  fail(message: string): any;\n  formatMessage(message: string, style: string): any;\n  getFailures(): ICases;\n  getPasses(): ICases;\n  info(message: string): any;\n  pass(message: string): any;\n  renderResults(exit: boolean, status: number, save: string): any;\n\n  setup(fn: Function): any;\n  skip(nb: number, message: string): any;\n  tearDown(fn: Function): any;\n}\n\nexport interface ICases {\n  length: number;\n  cases: ICase[];\n}\n\nexport interface ICase {\n  success: boolean;\n  type: string;\n  standard: string;\n  file: string;\n  values: ICaseValues;\n}\n\nexport interface ICaseValues {\n  subject: boolean;\n  expected: boolean;\n}\n\nexport interface IUtils {\n  betterTypeOf(input: any): any;\n  dump(value: any): any;\n  fileExt(file: string): any;\n  fillBlanks(text: string, pad: number): any;\n  format(f: string, ...args: any[]): any;\n  getPropertyPath(obj: any, path: string): any;\n  inherits(ctor: any, superCtor: any): any;\n  isArray(value: any): any;\n  isCasperObject(value: any): any;\n  isClipRect(value: any): any;\n  isFalsy(subject: any): any;\n  isFunction(value: any): any;\n  isJsFile(file: string): any;\n  isNull(value: any): any;\n  isNumber(value: any): any;\n  isObject(value: any): any;\n  isRegExp(value: any): any;\n  isString(value: any): any;\n  isTruthy(subject: any): any;\n  isType(what: any, type: string): any;\n  isUndefined(value: any): any;\n  isWebPage(what: any): any;\n  mergeObjects(origin: any, add: any): any;\n  node(name: string, attributes: any): any;\n  serialize(value: any): any;\n  unique(array: any[]): any;\n}\n\nexport interface IPhantomCSS {\n  outputSettings?: OutputSettings;\n\n  init(options: IPhantomCSSOptions): void;\n  update(options: IPhantomCSSOptions): void;\n\n  /**\n   * Take a screenshot of the targeted HTML element\n   * FileName is required if addIteratorToImage option is set to false\n   */\n  screenshot(target: string, fileName?: string): void;\n\n  /**\n   * Take a screenshot of the targeted HTML element\n   * FileName is required if addIteratorToImage option is set to false\n   */\n  screenshot(target: IClipRect, fileName?: string): void;\n  /**\n   * Take a screenshot of the targeted HTML element\n   * FileName is required if addIteratorToImage option is set to false\n   */\n  screenshot(target: string, timeToWait: number, hideSelector: string, fileName?: string): void;\n\n  compareAll(exclude: string): void;\n  compareAll(exclude: string, diffList: string[], include: string): void;\n  compareMatched(match: string, exclude: string): void;\n  compareMatched(match: RegExp, exclude: RegExp): void;\n  /**\n   * Explicitly define what files you want to compare\n   */\n  compareExplicit(list: string[]): void;\n  /**\n   * Compare image diffs generated in this test run only\n   */\n  compareSession(list?: any[]): void;\n  compareFiles(baseFile: string, diffFiles: string): IPhantomCSSTest;\n  waitForTests(tests: IPhantomCSSTest[]): void;\n  done(): void;\n  /**\n   * Turn off CSS transitions and jQuery animations\n   */\n  turnOffAnimations(): void;\n  getExitStatus(): number;\n  /**\n   * Get a list of image diffs generated in this test run\n   */\n  getCreatedDiffFiles(): Array<string>;\n}\n\nexport interface IPhantomCSSTest {\n  filename?: string;\n  error?: boolean;\n  fail?: boolean;\n  success?: boolean;\n  failFile?: string;\n  mismatch?: any;\n}\n\nexport interface IPhantomCSSOptions {\n  /**\n      Rebase is useful when you want to create new baseline\n      images without manually deleting the files\n      casperjs demo/test.js --rebase\n  */\n  rebase?: any;\n  /**\n    A reference to a particular Casper instance. Required for SlimerJS.\n   */\n  casper?: Casper;\n  /**\n  libraryRoot is relative to this file and must point to your phantomcss folder (not lib or node_modules). If you are using NPM, this will be './node_modules/phantomcss'.\n  */\n  libraryRoot?: string;\n\n  screenshotRoot?: string;\n  /**\n  By default, failure images are put in the './failures' folder.\n  If failedComparisonsRoot is set to false a separate folder will\n  not be created but failure images can still be found alongside\n  the original and new images.\n  */\n  failedComparisonsRoot?: string;\n\n  /**\n  You might want to keep master/baseline images in a completely\n  different folder to the diffs/failures.  Useful when working\n  with version control systems. By default this resolves to the\n  screenshotRoot folder.\n  */\n  comparisonResultRoot?: string;\n\n  /**\n  Don't add count number to images. If set to false (default), a filename is\n  required when capturing screenshots.\n  */\n  addIteratorToImage: boolean;\n\n  /**\n  Remove results directory tree after run.  Use in conjunction\n  with failedComparisonsRoot to see failed comparisons.\n  */\n  cleanupComparisonImages?: boolean;\n\n  /**\n   * Don't add label to generated failure image\n   */\n  addLabelToFailedImage?: boolean;\n  /**\n  Prefix the screenshot number to the filename, instead of suffixing it\n  */\n  prefixCount?: boolean;\n\n  hideElements?: string;\n  /**\n  Mismatch tolerance defaults to  0.05%. Increasing this value\n  will decrease test coverage\n  */\n  mismatchTolerance?: number;\n  /**\n  * Change the output screenshot filenames for your specific\n  * integration\n  */\n  fileNameGetter?: (rootPath: string, fileName?: string) => string;\n  onPass?: (test: IPhantomCSSTest) => void;\n  onFail?: (test: IPhantomCSSTest) => void;\n  onTimeout?: (test: IPhantomCSSTest) => void;\n  onComplete?: (tests: IPhantomCSSTest[], noOfFails: number, noOfErrors: number) => void;\n  /**\n  Called when creating new baseline images\n  */\n  onNewImage?: (test: IPhantomCSSTest) => void;\n}\n\n// Type definitions for PhantomJS API 1.9\n// Project: https://github.com/ariya/phantomjs/wiki/API-Reference\n// Definitions by: Jed Hunsaker <https://github.com/jedhunsaker>, Mike Keesey <https://github.com/keesey>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\n// declare function require(module: string): any;\n\nexport interface IPhantom {\n\n  // Properties\n  args: string[];  // DEPRECATED\n  cookies: ICookie[];\n  cookiesEnabled: boolean;\n  libraryPath: string;\n  scriptName: string;  // DEPRECATED\n  version: {\n    major: number;\n    minor: number;\n    patch: number;\n  };\n\n  // Callbacks\n  onError: (msg: string, trace: string[]) => any;\n\n  // Functions\n  addCookie(cookie: ICookie): boolean;\n  clearCookies(): void;\n  deleteCookie(cookieName: string): boolean;\n  exit(returnValue?: any): boolean;\n  injectJs(filename: string): boolean;\n}\n\nexport interface ISystem {\n  pid: number;\n  platform: string;\n  os: {\n    architecture: string;\n    name: string;\n    version: string;\n  };\n  env: { [name: string]: string; };\n  args: string[];\n}\n\nexport interface IWebPage {\n\n  // Properties\n  canGoBack: boolean;\n  canGoForward: boolean;\n  clipRect: IClipRect;\n  content: string;\n  cookies: ICookie[];\n  customHeaders: { [name: string]: string; };\n  event: any; // :TODO: elaborate this when documentation improves\n  focusedFrameName: string;\n  frameContent: string;\n  frameName: string;\n  framePlainText: string;\n  frameTitle: string;\n  frameUrl: string;\n  framesCount: number;\n  framesName: any; // :TODO: elaborate this when documentation improves\n  libraryPath: string;\n  navigationLocked: boolean;\n  offlineStoragePath: string;\n  offlineStorageQuota: number;\n  ownsPages: boolean;\n  pages: IWebPage[];\n  pagesWindowName: string;\n  paperSize: IPaperSize;\n  plainText: string;\n  scrollPosition: ITopLeft;\n  settings: IWebPageSettings;\n  title: string;\n  url: string;\n  viewportSize: ISize;\n  windowName: string;\n  zoomFactor: number;\n  onCallback: Function;  // EXPERIMENTAL\n\n  // Callbacks\n  onAlert: (msg: string) => any;\n  onClosing: (closingPage: IWebPage) => any;\n  onConfirm: (msg: string) => boolean;\n  onConsoleMessage: (msg: string, lineNum?: number, sourceId?: string) => any;\n  onError: (msg: string, trace: string[]) => any;\n  onFilePicker: (oldFile: string) => string;\n  onInitialized: () => any;\n  onLoadFinished: (status: string) => any;\n  onLoadStarted: () => any;\n  onNavigationRequested: (url: string, type: string, willNavigate: boolean, main: boolean) => any;\n  onPageCreated: (newPage: IWebPage) => any;\n  onPrompt: (msg: string, defaultVal: string) => string;\n  onResourceError: (resourceError: IResourceError) => any;\n  onResourceReceived: (response: IResourceResponse) => any;\n  onResourceRequested: (requestData: IResourceRequest, networkRequest: INetworkRequest) => any;\n  onUrlChanged: (targetUrl: string) => any;\n\n  // Functions\n  addCookie(cookie: ICookie): boolean;\n  childFramesCount(): number;  // DEPRECATED\n  childFramesName(): string;  // DEPRECATED\n  clearCookies(): void;\n  close(): void;\n  currentFrameName(): string;  // DEPRECATED\n  deleteCookie(cookieName: string): boolean;\n  evaluate(fn: Function, ...args: any[]): any;\n  evaluateAsync(fn: Function): void;\n  evaluateJavaScript(str: string): any; // :TODO: elaborate this when documentation improves\n  getPage(windowName: string): IWebPage;\n  go(index: number): void;\n  goBack(): void;\n  goForward(): void;\n  includeJs(url: string, callback: Function): void;\n  injectJs(filename: string): boolean;\n  open(url: string, callback: (status: string) => any): void;\n  open(url: string, method: string, callback: (status: string) => any): void;\n  open(url: string, method: string, data: any, callback: (status: string) => any): void;\n  openUrl(url: string, httpConf: any, settings: any): void; // :TODO: elaborate this when documentation improves\n  release(): void;  // DEPRECATED\n  reload(): void;\n  render(filename: string): void;\n  renderBase64(format: string): string;\n  sendEvent(mouseEventType: string, mouseX?: number, mouseY?: number, button?: string): void;\n  sendEvent(keyboardEventType: string, keyOrKeys: any, aNull?: any, bNull?: any, modifier?: number): void;\n  setContent(content: string, url: string): void;\n  stop(): void;\n  switchToFocusedFrame(): void;\n  switchToFrame(frameName: string): void;\n  switchToFrame(framePosition: number): void;\n  switchToChildFrame(frameName: string): void;\n  switchToChildFrame(framePosition: number): void;\n  switchToMainFrame(): void;  // DEPRECATED\n  switchToParentFrame(): void;  // DEPRECATED\n  uploadFile(selector: string, filename: string): void;\n\n  // Callback triggers\n  closing(closingPage: IWebPage): void;\n  initialized(): void;\n  javaScriptAlertSent(msg: string): void;\n  javaScriptConsoleMessageSent(msg: string, lineNum?: number, sourceId?: string): void;\n  loadFinished(status: string): void;\n  loadStarted(): void;\n  navigationRequested(url: string, type: string, willNavigate: boolean, main: boolean): void;\n  rawPageCreated(newPage: IWebPage): void;\n  resourceReceived(response: IResourceResponse): void;\n  resourceRequested(requestData: IResourceRequest, networkRequest: INetworkRequest): void;\n  urlChanged(targetUrl: string): void;\n}\n\nexport interface IResourceError {\n  id: number;\n  url: string;\n  errorCode: string;\n  errorString: string;\n}\n\nexport interface IResourceResponse {\n  id: number;\n  url: string;\n  time: Date;\n  headers: { [name: string]: string; };\n  bodySize: number;\n  contentType?: string;\n  redirectURL?: string;\n  stage: string;\n  status: number;\n  statusText: string;\n}\n\nexport interface IResourceRequest {\n  id: number;\n  method: string;\n  url: string;\n  time: Date;\n  headers: { [name: string]: string; };\n}\n\nexport interface INetworkRequest {\n  abort(): void;\n  changeUrl(url: string): void;\n  setHeader(name: string, value: string): void;\n}\n\nexport interface IPaperSize {\n  width?: string;\n  height?: string;\n  border: string;\n  format?: string;\n  orientation?: string;\n}\n\nexport interface IWebPageSettings {\n  javascriptEnabled: boolean;\n  loadImages: boolean;\n  localToRemoteUrlAccessEnabled: boolean;\n  userAgent: string;\n  userName: string;\n  password: string;\n  XSSAuditingEnabled: boolean;\n  webSecurityEnabled: boolean;\n  resourceTimeout: number;\n}\n\nexport interface IFileSystem {\n\n  // Properties\n  separator: string;\n  workingDirectory: string;\n\n  // Functions\n\n  // Query Functions\n  list(path: string): string[];\n  absolute(path: string): string;\n  exists(path: string): boolean;\n  isDirectory(path: string): boolean;\n  isFile(path: string): boolean;\n  isAbsolute(path: string): boolean;\n  isExecutable(path: string): boolean;\n  isReadable(path: string): boolean;\n  isWritable(path: string): boolean;\n  isLink(path: string): boolean;\n  readLink(path: string): string;\n\n  // Directory Functions\n  changeWorkingDirectory(path: string): void;\n  makeDirectory(path: string): void;\n  makeTree(path: string): void;\n  removeDirectory(path: string): void;\n  removeTree(path: string): void;\n  copyTree(source: string, destination: string): void;\n\n  // File Functions\n  open(path: string, mode: string): IStream;\n  open(path: string, options: { mode: string; charset?: string; }): IStream;\n  read(path: string): string;\n  write(path: string, content: string, mode: string): void;\n  size(path: string): number;\n  remove(path: string): void;\n  copy(source: string, destination: string): void;\n  move(source: string, destination: string): void;\n  touch(path: string): void;\n}\n\nexport interface IStream {\n  atEnd(): boolean;\n  close(): void;\n  flush(): void;\n  read(): string;\n  readLine(): string;\n  seek(position: number): void;\n  write(data: string): void;\n  writeLine(data: string): void;\n}\n\nexport interface IWebServer {\n  port: number;\n  listen(port: number, cb?: (request: IWebServerRequest, response: IWebServerResponse) => void): boolean;\n  listen(ipAddressPort: string, cb?: (request: IWebServerRequest, response: IWebServerResponse) => void): boolean;\n  close(): void;\n}\n\nexport interface IWebServerRequest {\n  method: string;\n  url: string;\n  httpVersion: number;\n  headers: { [name: string]: string; };\n  post: string;\n  postRaw: string;\n}\n\nexport interface IWebServerResponse {\n  headers: { [name: string]: string; };\n  statusCode: number;\n  setHeader(name: string, value: string): void;\n  header(name: string): string;\n  setEncoding(encoding: string): void;\n  write(data: string): void;\n  writeHead(statusCode: number, headers?: { [name: string]: string; }): void;\n  close(): void;\n  closeGracefully(): void;\n}\n\nexport interface ITopLeft {\n  top: number;\n  left: number;\n}\n\nexport interface ISize {\n  width: number;\n  height: number;\n}\n\nexport interface IClipRect extends ITopLeft, ISize {\n}\n\nexport interface ICookie {\n  name: string;\n  value: string;\n  domain?: string;\n}\n"]}