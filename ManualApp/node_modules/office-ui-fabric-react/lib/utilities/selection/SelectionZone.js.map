{"version":3,"file":"SelectionZone.js","sourceRoot":"../src/","sources":["utilities/selection/SelectionZone.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  KeyCodes,\n  autobind,\n  elementContains,\n  findScrollableParent,\n  getParent,\n  getDocument,\n  getWindow,\n  isElementTabbable\n} from '../../Utilities';\nimport { SelectionLayout } from './SelectionLayout';\nimport {\n  ISelection,\n  ISelectionLayout,\n  SelectionDirection,\n  SelectionMode\n} from './interfaces';\n\n// Selection definitions:\n//\n// Anchor index: the point from which a range selection starts.\n// Focus index: the point from which layout movement originates from.\n//\n// These two can differ. Tests:\n//\n// If you start at index 5\n// Shift click to index 10\n//    The focus is 10, the anchor is 5.\n// If you shift click at index 0\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\n// If you click index 8\n//    The anchor and focus are set to 8.\n\nconst SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';\nconst SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\nconst SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\nconst SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\nconst SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\n\nexport interface ISelectionZoneProps extends React.Props<SelectionZone> {\n  componentRef?: () => void;\n  selection: ISelection;\n  layout?: ISelectionLayout;\n  selectionMode?: SelectionMode;\n  selectionPreservedOnEmptyClick?: boolean;\n  isSelectedOnFocus?: boolean;\n  onItemInvoked?: (item?: any, index?: number, ev?: Event) => void;\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void;\n}\n\nexport class SelectionZone extends BaseComponent<ISelectionZoneProps, {}> {\n  public static defaultProps = {\n    layout: new SelectionLayout(SelectionDirection.vertical),\n    isMultiSelectEnabled: true,\n    isSelectedOnFocus: true,\n    selectionMode: SelectionMode.multiple\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance,\n    root: HTMLElement\n  };\n\n  private _isCtrlPressed: boolean;\n  private _isShiftPressed: boolean;\n  private _isMetaPressed: boolean;\n  private _shouldHandleFocus: boolean;\n  private _shouldHandleFocusTimeoutId: number | undefined;\n\n  public componentDidMount() {\n    let win = getWindow(this.refs.root);\n    let scrollElement = findScrollableParent(this.refs.root);\n\n    // Track the latest modifier keys globally.\n    this._events.on(win, 'keydown, keyup', this._updateModifiers, true);\n    this._events.on(scrollElement, 'click', this._tryClearOnEmptyClick);\n  }\n\n  public render() {\n    return (\n      <div\n        className='ms-SelectionZone'\n        ref='root'\n        onKeyDown={ this._onKeyDown }\n        onMouseDown={ this._onMouseDown }\n        onKeyDownCapture={ this._onKeyDownCapture }\n        onClick={ this._onClick }\n        role='presentation'\n\n        onDoubleClick={ this._onDoubleClick }\n        onContextMenu={ this._onContextMenu }\n        { ...{\n          onMouseDownCapture: this._onMouseDownCapture,\n          onFocusCapture: this._onFocus\n        } }\n      >\n        { this.props.children }\n      </div>\n    );\n  }\n\n  /**\n   * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\n   * react to the event. Note that focus events in IE <= 11 will occur asynchronously after .focus() has\n   * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\n   * focus event that occurs. This method does that.\n   */\n  @autobind\n  public ignoreNextFocus() {\n    this._handleNextFocus(false);\n  }\n\n  @autobind\n  private _onMouseDownCapture(ev: any) {\n    if (document.activeElement !== ev.target && !elementContains(document.activeElement as HTMLElement, ev.target)) {\n      this.ignoreNextFocus();\n    }\n  }\n\n  /**\n   * When we focus an item, for single/multi select scenarios, we should try to select it immediately\n   * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\n   * specially.\n   */\n  @autobind\n  private _onFocus(ev: React.FocusEvent<HTMLElement>) {\n    let target = ev.target as HTMLElement;\n    let { selection } = this.props;\n    let isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (this._shouldHandleFocus && selectionMode !== SelectionMode.none) {\n      let isToggle = this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\n      let itemRoot = this._findItemRoot(target);\n\n      if (!isToggle && itemRoot) {\n        let index = this._getItemIndex(itemRoot);\n\n        if (isToggleModifierPressed) {\n          // set anchor only.\n          selection.setIndexSelected(index, selection.isIndexSelected(index), true);\n        } else {\n          if (this.props.isSelectedOnFocus) {\n            this._onItemSurfaceClick(ev, index);\n          }\n        }\n      }\n    }\n\n    this._handleNextFocus(false);\n  }\n\n  @autobind\n  private _onMouseDown(ev: React.MouseEvent<HTMLElement>) {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    let itemRoot = this._findItemRoot(target);\n\n    while (target !== this.refs.root) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        break;\n      } else if (itemRoot) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          this._onInvokeMouseDown(ev, this._getItemIndex(itemRoot));\n          break;\n        } else if (target === itemRoot) {\n          break;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  }\n\n  @autobind\n  private _onClick(ev: React.MouseEvent<HTMLElement>) {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    let itemRoot = this._findItemRoot(target);\n\n    // No-op if selection is disabled\n    if (this._isSelectionDisabled(target)) {\n      return;\n    }\n\n    while (target !== this.refs.root) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        this._onToggleAllClick(ev);\n        break;\n      } else if (itemRoot) {\n        let index = this._getItemIndex(itemRoot);\n\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          if (this._isShiftPressed) {\n            this._onItemSurfaceClick(ev, index);\n          } else {\n            this._onToggleClick(ev, index);\n          }\n          break;\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          this._onInvokeClick(ev, index);\n          break;\n        } else if (target === itemRoot) {\n          this._onItemSurfaceClick(ev, index);\n          break;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  }\n\n  @autobind\n  private _onContextMenu(ev: React.MouseEvent<HTMLElement>) {\n    const target = ev.target as HTMLElement;\n\n    const { onItemContextMenu, selection } = this.props;\n    if (onItemContextMenu) {\n      const itemRoot = this._findItemRoot(target);\n\n      if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n        onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);\n        ev.preventDefault();\n      }\n    }\n  }\n\n  private _isSelectionDisabled(target: HTMLElement): boolean {\n    while (target !== this.refs.root) {\n      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {\n        return true;\n      }\n      target = getParent(target) as HTMLElement;\n    }\n\n    return false;\n  }\n\n  /**\n   * In multi selection, if you double click within an item's root (but not within the invoke element or input elements),\n   * we should execute the invoke handler.\n   */\n  @autobind\n  private _onDoubleClick(ev: React.MouseEvent<HTMLElement>) {\n    let target = ev.target as HTMLElement;\n\n    if (this._isSelectionDisabled(target)) {\n      return;\n    }\n\n    let { onItemInvoked } = this.props;\n    let itemRoot = this._findItemRoot(target);\n\n    const selectionMode = this._getSelectionMode();\n\n    if (itemRoot && onItemInvoked && selectionMode !== SelectionMode.none && !this._isInputElement(target)) {\n      let index = this._getItemIndex(itemRoot);\n\n      while (target !== this.refs.root) {\n        if (\n          this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (target === itemRoot) {\n          this._onInvokeClick(ev, index);\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  }\n\n  @autobind\n  private _onKeyDownCapture(ev: React.KeyboardEvent<HTMLElement>) {\n    this._updateModifiers(ev);\n\n    this._handleNextFocus(true);\n  }\n\n  @autobind\n  private _onKeyDown(ev: React.KeyboardEvent<HTMLElement>) {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n\n    if (this._isSelectionDisabled(target)) {\n      return;\n    }\n\n    let { selection } = this.props;\n    let isSelectAllKey = ev.which === KeyCodes.a && (this._isCtrlPressed || this._isMetaPressed);\n    let isClearSelectionKey = ev.which === KeyCodes.escape;\n\n    // Ignore key downs from input elements.\n    if (this._isInputElement(target)) {\n      // A key was pressed while an item in this zone was focused.\n      return;\n    }\n\n    const selectionMode = this._getSelectionMode();\n\n    // If ctrl-a is pressed, select all (if all are not already selected.)\n    if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {\n      selection.setAllSelected(true);\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    // If escape is pressed, clear selection (if any are selected.)\n    if (isClearSelectionKey && selection.getSelectedCount() > 0) {\n      selection.setAllSelected(false);\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    let itemRoot = this._findItemRoot(target);\n\n    // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\n    if (itemRoot) {\n      let index = this._getItemIndex(itemRoot);\n\n      while (target !== this.refs.root) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\n          // so we can no-op for any keydowns in this case.\n          break;\n        } else if ((ev.which === KeyCodes.enter || ev.which === KeyCodes.space) &&\n          (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT')) {\n          return false;\n        } else if (target === itemRoot) {\n          if (ev.which === KeyCodes.enter) {\n            this._onInvokeClick(ev, index);\n            ev.preventDefault();\n            return;\n          } else if (ev.which === KeyCodes.space) {\n            this._onToggleClick(ev, index);\n            ev.preventDefault();\n            return;\n          }\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n    }\n  }\n\n  private _onToggleAllClick(ev: React.MouseEvent<HTMLElement>) {\n    let { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleAllSelected();\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  }\n\n  private _onToggleClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number) {\n    let { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleIndexSelected(index);\n    } else if (selectionMode === SelectionMode.single) {\n      let isSelected = selection.isIndexSelected(index);\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, !isSelected, true);\n      selection.setChangeEvents(true);\n    } else {\n      return;\n    }\n\n    ev.stopPropagation();\n\n    // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\n    // for checkboxes if you use a checkbox for the toggle.\n  }\n\n  private _onInvokeClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number) {\n    let { selection, onItemInvoked } = this.props;\n\n    if (onItemInvoked) {\n      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onItemSurfaceClick(ev: React.SyntheticEvent<HTMLElement>, index: number) {\n    let { selection } = this.props;\n    let isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      if (this._isShiftPressed) {\n        selection.selectToIndex(index, !isToggleModifierPressed);\n      } else if (isToggleModifierPressed) {\n        selection.toggleIndexSelected(index);\n      } else {\n        this._clearAndSelectIndex(index);\n      }\n    } else if (selectionMode === SelectionMode.single) {\n      this._clearAndSelectIndex(index);\n    }\n  }\n\n  private _onInvokeMouseDown(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number) {\n    let { selection } = this.props;\n\n    // Only do work if item is not selected.\n    if (selection.isIndexSelected(index)) {\n      return;\n    }\n\n    this._clearAndSelectIndex(index);\n  }\n\n  private _tryClearOnEmptyClick(ev: MouseEvent) {\n    if (\n      !this.props.selectionPreservedOnEmptyClick &&\n      this._isNonHandledClick(ev.target as HTMLElement)\n    ) {\n      this.props.selection.setAllSelected(false);\n    }\n  }\n\n  private _clearAndSelectIndex(index: number) {\n    let { selection } = this.props;\n    let isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\n\n    if (!isAlreadySingleSelected) {\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, true, true);\n      selection.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * We need to track the modifier key states so that when focus events occur, which do not contain\n   * modifier states in the Event object, we know how to behave.\n   */\n  private _updateModifiers(ev: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>) {\n    this._isShiftPressed = ev.shiftKey;\n    this._isCtrlPressed = ev.ctrlKey;\n    this._isMetaPressed = ev.metaKey;\n  }\n\n  private _findItemRoot(target: HTMLElement): HTMLElement | undefined {\n    let { selection } = this.props;\n\n    while (target !== this.refs.root) {\n      let indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\n      let index = Number(indexValue);\n\n      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n\n    if (target === this.refs.root) {\n      return undefined;\n    }\n\n    return target;\n  }\n\n  private _getItemIndex(itemRoot: HTMLElement): number {\n    return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));\n  }\n\n  private _hasAttribute(element: HTMLElement, attributeName: string): boolean {\n    let isToggle = false;\n\n    while (!isToggle && element !== this.refs.root) {\n      isToggle = element.getAttribute(attributeName) === 'true';\n      element = getParent(element) as HTMLElement;\n    }\n\n    return isToggle;\n  }\n\n  private _isInputElement(element: HTMLElement): boolean {\n    return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA';\n  }\n\n  private _isNonHandledClick(element: HTMLElement): boolean {\n    let doc = getDocument();\n\n    if (doc && element) {\n      while (element && element !== doc.documentElement) {\n        if (isElementTabbable(element)) {\n          return false;\n        }\n\n        element = getParent(element) as HTMLElement;\n      }\n    }\n\n    return true;\n  }\n\n  private _handleNextFocus(handleFocus: boolean) {\n    if (this._shouldHandleFocusTimeoutId) {\n      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);\n      this._shouldHandleFocusTimeoutId = undefined;\n    }\n\n    this._shouldHandleFocus = handleFocus;\n\n    if (handleFocus) {\n      this._async.setTimeout(() => {\n        this._shouldHandleFocus = false;\n      }, 100);\n    }\n  }\n\n  private _getSelectionMode(): SelectionMode {\n    const {\n      selection\n    } = this.props;\n\n    const {\n      selectionMode = selection ? selection.mode : SelectionMode.none\n    } = this.props;\n\n    return selectionMode;\n  }\n}\n"]}