{"version":3,"file":"TextFieldPage.js","sourceRoot":"../src/","sources":["components/TextField/TextFieldPage.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,+DAKoC;AACpC,8EAA2E;AAC3E,4FAAyF;AAEzF,IAAM,yBAAyB,GAAG,OAAO,CAAC,kGAAkG,CAAW,CAAC;AACxJ,IAAM,gCAAgC,GAAG,OAAO,CAAC,yGAAyG,CAAW,CAAC;AAEtK;IAAmC,yCAA4C;IAA/E;;IAqEA,CAAC;IApEQ,8BAAM,GAAb;QACE,MAAM,CAAC,CACL,oBAAC,gCAAa,IACZ,KAAK,EAAC,WAAW,EACjB,aAAa,EAAC,kBAAkB,EAChC,YAAY,EACV;gBACE,oBAAC,8BAAW,IAAC,KAAK,EAAC,sBAAsB,EAAC,IAAI,EAAG,yBAAyB;oBACxE,oBAAC,+CAAqB,OAAG,CACb;gBACd,oBAAC,8BAAW,IAAC,KAAK,EAAC,oCAAoC,EAAC,IAAI,EAAG,gCAAgC;oBAC7F,oBAAC,6DAA4B,OAAG,CACpB,CACV,EAER,gBAAgB,EACd,oBAAC,qCAAkB,IACjB,OAAO,EAAG;oBACR,OAAO,CAAS,gFAAgF,CAAC;iBAClG,GACD,EAEJ,QAAQ,EACN;gBACE,8QAEI,CACA,EAER,aAAa,EACX,gCAAW,EAEb,GAAG,EACD;gBACE;oBACE,4FAAkE;oBAClE,4EAAkD;oBAClD,qHAA2F;oBAC3F,sIAA4G;oBAC5G,8HAAoG;oBACpG,mJAA+G;oBAC/G,kIAA8F;oBAC9F,qFAA2D;oBAC3D,oKAA0I;oBAC1I,uIAA6G;oBAC7G,iIAAuG;oBACvG,kIAAwG,CACrG,CACD,EAER,KAAK,EACH;gBACE;oBACE,uHAAwF;oBACxF,gIAAiG;oBACjG,wFAAyD;oBACzD,iFAAkD;oBAClD,sHAAuF,CACpF,CACD,EAER,OAAO,EACL,2BAAG,IAAI,EAAC,sEAAsE,gBAAc,EAE9F,eAAe,EAAG,IAAI,CAAC,KAAK,CAAC,eAAe,GAC9B,CACjB,CAAC;IACJ,CAAC;IACH,oBAAC;AAAD,CAAC,AArED,CAAmC,KAAK,CAAC,SAAS,GAqEjD;AArEY,sCAAa","sourcesContent":["import * as React from 'react';\nimport {\n  ExampleCard,\n  ComponentPage,\n  IComponentDemoPageProps,\n  PropertiesTableSet\n} from '@uifabric/example-app-base';\nimport { TextFieldBasicExample } from './examples/TextField.Basic.Example';\nimport { TextFieldErrorMessageExample } from './examples/TextField.ErrorMessage.Example';\n\nconst TextFieldBasicExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/TextField/examples/TextField.Basic.Example.tsx') as string;\nconst TextFieldErrorMessageExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/TextField/examples/TextField.ErrorMessage.Example.tsx') as string;\n\nexport class TextFieldPage extends React.Component<IComponentDemoPageProps, {}> {\n  public render() {\n    return (\n      <ComponentPage\n        title='TextField'\n        componentName='TextFieldExample'\n        exampleCards={\n          <div>\n            <ExampleCard title='TextField variations' code={ TextFieldBasicExampleCode }>\n              <TextFieldBasicExample />\n            </ExampleCard>\n            <ExampleCard title='TextField error message variations' code={ TextFieldErrorMessageExampleCode }>\n              <TextFieldErrorMessageExample />\n            </ExampleCard>\n          </div>\n        }\n        propertiesTables={\n          <PropertiesTableSet\n            sources={ [\n              require<string>('!raw-loader!office-ui-fabric-react/src/components/TextField/TextField.Props.ts')\n            ] }\n          />\n        }\n        overview={\n          <div>\n            <p>\n              The TextField component enables a user to type text into an app. It's typically used to capture a single line of text, but can be configured to capture multiple lines of text. The text displays on the screen in a simple, uniform format.\n            </p>\n          </div>\n        }\n        bestPractices={\n          <div></div>\n        }\n        dos={\n          <div>\n            <ul>\n              <li>Use the TextField to accept data input on a form or page.</li>\n              <li>Label the TextField with a helpful name. </li>\n              <li>Provide concise helper text that specifies what content is expected to be entered.</li>\n              <li>Provide all appropriate states for the control (static, hover, focus, engaged, unavailable, error).</li>\n              <li>When part of a form, provide clear designations for which fields are required vs. optional.</li>\n              <li>Provide all appropriate methods for submitting provided data (onEnter or a dedicated ‘Submit’ button).</li>\n              <li>Provide all appropriate methods of clearing provided data (‘X’ or something similar).</li>\n              <li>Allow for selection, copy and paste of field data.</li>\n              <li>Whenever possible, format TextField relative to the expected entry (4-digit PIN, 10-digit phone number (3 separate fields), etc).</li>\n              <li>When long entries are expected, provide a mechanism for overflow or expansion of the control itself.</li>\n              <li>Ensure that the TextField is functional through use of mouse/keyboard or touch when available.</li>\n              <li>Ensure that the TextField is accessible through screen reader and/or other accessibility tools.</li>\n            </ul>\n          </div>\n        }\n        donts={\n          <div>\n            <ul>\n              <li>Don’t use a TextField to render basic copy as part of a body element of a page.</li>\n              <li>Don’t provide an unlabeled TextField and expect that users will know what to do with it.</li>\n              <li>Don’t place a TextField inline with body copy.  </li>\n              <li>Don’t be overly verbose with helper text.</li>\n              <li>Don’t occlude the entry or allow entry when the active content is not visible.</li>\n            </ul>\n          </div>\n        }\n        related={\n          <a href='https://dev.office.com/fabric-js/Components/TextField/TextField.html'>Fabric JS</a>\n        }\n        isHeaderVisible={ this.props.isHeaderVisible }>\n      </ComponentPage>\n    );\n  }\n}\n"]}