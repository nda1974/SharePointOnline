{"version":3,"file":"SpinButton.js","sourceRoot":"../src/","sources":["components/SpinButton/SpinButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IconButton } from '../../Button';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  BaseComponent,\n  getId,\n  KeyCodes,\n  autobind,\n  customizable\n} from '../../Utilities';\nimport { ThemeSettingName } from '../../Styling';\nimport {\n  ISpinButton,\n  ISpinButtonProps,\n} from './SpinButton.Props';\nimport { Position } from '../../utilities/positioning';\nimport { getStyles, getArrowButtonStyles } from './SpinButton.styles';\nimport { getClassNames } from './SpinButton.classNames';\n\nexport enum KeyboardSpinDirection {\n  down = -1,\n  notSpinning = 0,\n  up = 1\n}\n\nexport interface ISpinButtonState {\n\n  /**\n   * Is true when the control has focus.\n   */\n  isFocused: boolean;\n\n  /**\n   * the value of the spin button\n   */\n  value: string;\n\n  /**\n   * keyboard spin direction, used to style the up or down button\n   * as active when up/down arrow is pressed\n   */\n  keyboardSpinDirection: KeyboardSpinDirection;\n}\n\n@customizable([ThemeSettingName])\nexport class SpinButton extends BaseComponent<ISpinButtonProps, ISpinButtonState> implements ISpinButton {\n\n  public static defaultProps: ISpinButtonProps = {\n    step: 1,\n    min: 0,\n    max: 100,\n    disabled: false,\n    labelPosition: Position.start,\n    label: '',\n    incrementButtonIcon: { iconName: 'ChevronUpSmall' },\n    decrementButtonIcon: { iconName: 'ChevronDownSmall' }\n  };\n\n  private _input: HTMLInputElement;\n  private _inputId: string;\n  private _labelId: string;\n  private _lastValidValue: string;\n  private _spinningByMouse: boolean;\n\n  private _onValidate?: (value: string) => string | void;\n  private _onIncrement?: (value: string) => string | void;\n  private _onDecrement?: (value: string) => string | void;\n\n  private _currentStepFunctionHandle: number;\n  private _initialStepDelay = 400;\n  private _stepDelay = 75;\n  private _formattedValidUnitOptions: string[] = [];\n\n  constructor(props: ISpinButtonProps) {\n    super(props);\n\n    this._warnMutuallyExclusive({\n      'value': 'defaultValue'\n    });\n\n    let value = props.value || props.defaultValue || String(props.min) || '0';\n    this._lastValidValue = value;\n\n    this.state = {\n      isFocused: false,\n      value: value,\n      keyboardSpinDirection: KeyboardSpinDirection.notSpinning\n    };\n\n    this._currentStepFunctionHandle = -1;\n    this._labelId = getId('Label');\n    this._inputId = getId('input');\n    this._spinningByMouse = false;\n\n    if (!props.defaultValue && props.value) {\n      this._onValidate = props.onValidate;\n      this._onIncrement = props.onIncrement;\n      this._onDecrement = props.onDecrement;\n    } else {\n      this._onValidate = this._defaultOnValidate;\n      this._onIncrement = this._defaultOnIncrement;\n      this._onDecrement = this._defaultOnDecrement;\n    }\n  }\n\n  /**\n  * Invoked when a component is receiving new props. This method is not called for the initial render.\n  */\n  public componentWillReceiveProps(newProps: ISpinButtonProps): void {\n    this._lastValidValue = this.state.value;\n    let value: string = newProps.value ? newProps.value : String(newProps.min);\n    if (newProps.defaultValue) {\n      value = String(Math.max(newProps.min as number, Math.min(newProps.max as number, Number(newProps.defaultValue))));\n    }\n\n    this.setState({\n      value: value\n    });\n  }\n\n  public render() {\n    const {\n      disabled,\n      label,\n      min,\n      max,\n      labelPosition,\n      iconProps,\n      incrementButtonIcon,\n      decrementButtonIcon,\n      title,\n      ariaLabel,\n      styles: customStyles,\n      upArrowButtonStyles: customUpArrowButtonStyles,\n      downArrowButtonStyles: customDownArrowButtonStyles,\n      theme\n    } = this.props;\n\n    const {\n      isFocused,\n      value,\n      keyboardSpinDirection\n    } = this.state;\n\n    const classNames = getClassNames(\n      getStyles(theme!, customStyles),\n      !!disabled,\n      !!isFocused,\n      keyboardSpinDirection,\n      labelPosition\n    );\n\n    return (\n      <div className={ classNames.root }>\n        { labelPosition !== Position.bottom && <div className={ classNames.labelWrapper }>\n          { iconProps && <Icon iconName={ iconProps.iconName } className={ classNames.icon } aria-hidden='true'></Icon> }\n          { label &&\n            <Label\n              id={ this._labelId }\n              htmlFor={ this._inputId }\n              className={ classNames.label }>{ label }\n            </Label>\n          }\n        </div> }\n        <div\n          className={ classNames.spinButtonWrapper }\n          title={ title && title }\n          aria-label={ ariaLabel && ariaLabel }\n        >\n          <input\n            value={ value }\n            id={ this._inputId }\n            onChange={ this._onChange }\n            onInput={ this._onInputChange }\n            className={ classNames.input }\n            type='text'\n            role='spinbutton'\n            aria-labelledby={ label && this._labelId }\n            aria-valuenow={ value }\n            aria-valuemin={ min && String(min) }\n            aria-valuemax={ max && String(max) }\n            onBlur={ this._onBlur }\n            ref={ this._resolveRef('_input') }\n            onFocus={ this._onFocus }\n            onKeyDown={ this._handleKeyDown }\n            onKeyUp={ this._handleKeyUp }\n            readOnly={ disabled }\n            disabled={ disabled }\n            aria-disabled={ disabled }\n          />\n          <span className={ classNames.arrowBox }>\n            <IconButton\n              styles={ getArrowButtonStyles(theme!, true, customUpArrowButtonStyles) }\n              className={ 'ms-UpButton' }\n              checked={ keyboardSpinDirection === KeyboardSpinDirection.up }\n              disabled={ disabled }\n              iconProps={ incrementButtonIcon }\n              aria-hidden='true'\n              onMouseDown={ () => this._onIncrementMouseDown() }\n              onMouseLeave={ this._stop }\n              onMouseUp={ this._stop }\n              tabIndex={ -1 }\n            />\n            <IconButton\n              styles={ getArrowButtonStyles(theme!, false, customDownArrowButtonStyles) }\n              className={ 'ms-DownButton' }\n              checked={ keyboardSpinDirection === KeyboardSpinDirection.down }\n              disabled={ disabled }\n              iconProps={ decrementButtonIcon }\n              aria-hidden='true'\n              onMouseDown={ () => this._onDecrementMouseDown() }\n              onMouseLeave={ this._stop }\n              onMouseUp={ this._stop }\n              tabIndex={ -1 }\n            />\n          </span>\n        </div>\n        { labelPosition === Position.bottom && <div className={ classNames.labelWrapper }>\n          { iconProps && <Icon iconName={ iconProps.iconName } className={ classNames.icon } aria-hidden='true'></Icon> }\n          { label &&\n            <Label\n              id={ this._labelId }\n              htmlFor={ this._inputId }\n              className={ classNames.label }>{ label }\n            </Label>\n          }\n        </div>\n        }\n      </div>\n    );\n  }\n\n  public focus(): void {\n    if (this._input) {\n      this._input.focus();\n    }\n  }\n\n  @autobind\n  private _onFocus(ev: React.FocusEvent<HTMLInputElement>) {\n    if (this._spinningByMouse || this.state.keyboardSpinDirection !== KeyboardSpinDirection.notSpinning) {\n      this._stop();\n    }\n\n    this._input.select();\n\n    this.setState({ isFocused: true });\n\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n  }\n\n  @autobind\n  private _onBlur(ev: React.FocusEvent<HTMLInputElement>): void {\n    this._validate(ev);\n    this.setState({ isFocused: false });\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n  }\n\n  /**\n   * Gets the value of the spin button.\n   */\n  public get value(): string | undefined {\n    return this.props.value === undefined ? this.state.value : this.props.value;\n  }\n\n  /**\n   * Validate function to use if one is not passed in\n   */\n  private _defaultOnValidate = (value: string) => {\n    if (isNaN(Number(value))) {\n      return this._lastValidValue;\n    }\n    const newValue = Math.min(this.props.max as number, Math.max(this.props.min as number, Number(value)));\n    return String(newValue);\n  }\n\n  /**\n   * Increment function to use if one is not passed in\n   */\n  private _defaultOnIncrement = (value: string) => {\n    let newValue = Math.min(Number(value) + (this.props.step as number), this.props.max as number);\n    return String(newValue);\n  }\n\n  /**\n   * Increment function to use if one is not passed in\n   */\n  private _defaultOnDecrement = (value: string) => {\n    let newValue = Math.max(Number(value) - (this.props.step as number), this.props.min as number);\n    return String(newValue);\n  }\n\n  private _onChange() {\n    /**\n     * A noop input change handler.\n     * https://github.com/facebook/react/issues/7027.\n     * Using the native onInput handler fixes the issue but onChange\n     * still need to be wired to avoid React console errors\n     * TODO: Check if issue is resolved when React 16 is available.\n     */\n  }\n\n  /**\n   * This is used when validating text entry\n   * in the input (not when changed via the buttons)\n   * @param event - the event that fired\n   */\n  @autobind\n  private _validate(event: React.FocusEvent<HTMLInputElement>) {\n    const element: HTMLInputElement = event.target as HTMLInputElement;\n    const value: string = element.value;\n    if (this.state.value) {\n      const newValue = this._onValidate!(value);\n      if (newValue) {\n        this._lastValidValue = newValue;\n        this.setState({ value: newValue });\n      }\n    }\n  }\n\n  /**\n   * The method is needed to ensure we are updating the actual input value.\n   * without this our value will never change (and validation will not have the correct number)\n   * @param event - the event that was fired\n   */\n  @autobind\n  private _onInputChange(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void {\n    const element: HTMLInputElement = event.target as HTMLInputElement;\n    const value: string = element.value;\n\n    this.setState({\n      value: value,\n    });\n  }\n\n  /**\n   * Update the value with the given stepFunction\n   * @param shouldSpin - should we fire off another updateValue when we are done here? This should be true\n   * when spinning in response to a mouseDown\n   * @param stepFunction - function to use to step by\n   */\n  @autobind\n  private _updateValue(shouldSpin: boolean, stepDelay: number, stepFunction: (string: string) => string | void) {\n    const newValue = stepFunction(this.state.value as string);\n    if (newValue) {\n      this._lastValidValue = newValue;\n      this.setState({ value: newValue });\n    }\n\n    if (this._spinningByMouse !== shouldSpin) {\n      this._spinningByMouse = shouldSpin;\n    }\n\n    if (shouldSpin) {\n      this._currentStepFunctionHandle = this._async.setTimeout(() => { this._updateValue(shouldSpin, this._stepDelay, stepFunction); }, stepDelay);\n    }\n  }\n\n  /**\n   * Stop spinning (clear any currently pending update and set spinning to false)\n   */\n  @autobind\n  private _stop() {\n    if (this._currentStepFunctionHandle >= 0) {\n      this._async.clearTimeout(this._currentStepFunctionHandle);\n      this._currentStepFunctionHandle = -1;\n    }\n\n    if (this._spinningByMouse || this.state.keyboardSpinDirection !== KeyboardSpinDirection.notSpinning) {\n      this._spinningByMouse = false;\n      this.setState({ keyboardSpinDirection: KeyboardSpinDirection.notSpinning });\n    }\n  }\n\n  /**\n   * Handle keydown on the text field. We need to update\n   * the value when up or down arrow are depressed\n   * @param event - the keyboardEvent that was fired\n   */\n  @autobind\n  private _handleKeyDown(event: React.KeyboardEvent<HTMLElement>) {\n    if (this.props.disabled) {\n      this._stop();\n\n      // eat the up and down arrow keys to keep the page from scrolling\n      if (event.which === KeyCodes.up || event.which === KeyCodes.down) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      return;\n    }\n\n    let spinDirection = KeyboardSpinDirection.notSpinning;\n\n    if (event.which === KeyCodes.up) {\n\n      spinDirection = KeyboardSpinDirection.up;\n      this._updateValue(false /* shouldSpin */, this._initialStepDelay, this._onIncrement!);\n    } else if (event.which === KeyCodes.down) {\n\n      spinDirection = KeyboardSpinDirection.down;\n      this._updateValue(false /* shouldSpin */, this._initialStepDelay, this._onDecrement!);\n    } else if (event.which === KeyCodes.enter) {\n      event.currentTarget.blur();\n      this.focus();\n    } else if (event.which === KeyCodes.escape) {\n      if (this.state.value !== this._lastValidValue) {\n        this.setState({ value: this._lastValidValue });\n      }\n    }\n\n    // style the increment/decrement button to look active\n    // when the corresponding up/down arrow keys trigger a step\n    if (this.state.keyboardSpinDirection !== spinDirection) {\n      this.setState({ keyboardSpinDirection: spinDirection });\n    }\n  }\n\n  /**\n   * Make sure that we have stopped spinning on keyUp\n   * if the up or down arrow fired this event\n   * @param event stop spinning if we\n   */\n  @autobind\n  private _handleKeyUp(event: React.KeyboardEvent<HTMLElement>) {\n\n    if (this.props.disabled || event.which === KeyCodes.up || event.which === KeyCodes.down) {\n      this._stop();\n      return;\n    }\n  }\n\n  @autobind\n  private _onIncrementMouseDown() {\n    this._updateValue(true /* shouldSpin */, this._initialStepDelay, this._onIncrement!);\n  }\n\n  @autobind\n  private _onDecrementMouseDown() {\n    this._updateValue(true /* shouldSpin */, this._initialStepDelay, this._onDecrement!);\n  }\n}\n"]}