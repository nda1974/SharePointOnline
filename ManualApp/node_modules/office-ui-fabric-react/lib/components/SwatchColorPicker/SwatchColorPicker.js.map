{"version":3,"file":"SwatchColorPicker.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/SwatchColorPicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  autobind,\n  BaseComponent,\n  css,\n  findIndex,\n  getId\n} from '../../Utilities';\nimport {\n  ISwatchColorPicker,\n  ISwatchColorPickerProps,\n  IColorCellProps\n} from './SwatchColorPicker.Props';\nimport { getColorFromString } from '../../utilities/color/colors';\nimport { Grid } from '../../utilities/grid/Grid';\nimport { GridCell } from '../../utilities/grid/GridCell';\nimport { IGridCellProps } from '../../utilities/grid/GridCell.Props';\nimport { CommandButton } from '../../Button';\nimport * as stylesImport from './SwatchColorPicker.scss';\nconst styles: any = stylesImport;\n\nexport interface ISwatchColorPickerState {\n  selectedIndex?: number;\n}\n\nclass ColorPickerGridCell extends GridCell<IColorCellProps, IGridCellProps<IColorCellProps>> {\n}\n\nexport class SwatchColorPicker extends BaseComponent<ISwatchColorPickerProps, ISwatchColorPickerState> implements ISwatchColorPicker {\n\n  public static defaultProps = {\n    cellShape: 'circle',\n    disabled: false,\n    shouldFocusCircularNavigate: true\n  };\n\n  private _id: string;\n\n  constructor(props: ISwatchColorPickerProps) {\n    super(props);\n\n    this._id = props.id || getId('swatchColorPicker');\n\n    let selectedIndex: number | undefined;\n    if (props.selectedId) {\n      selectedIndex = this._getSelectedIndex(props.colorCells, props.selectedId);\n    }\n\n    this.state = {\n      selectedIndex\n    };\n  }\n\n  public componentWillReceiveProps(newProps: ISwatchColorPickerProps) {\n    let newSelectedIndex;\n\n    if (newProps.selectedId) {\n      newSelectedIndex = this._getSelectedIndex(newProps.colorCells, newProps.selectedId);\n    }\n\n    if (newSelectedIndex !== this.state.selectedIndex) {\n      this.setState({\n        selectedIndex: newSelectedIndex\n      });\n    }\n  }\n\n  public render() {\n    let {\n      disabled,\n      colorCells,\n      columnCount,\n      positionInSet,\n      setSize,\n      shouldFocusCircularNavigate,\n      className,\n      onCellFocused\n    } = this.props;\n\n    return (\n      <Grid\n        key={ this._id + colorCells[0].id + '-grid' }\n        items={ colorCells.map((item, index) => { return { ...item, index }; }) }\n        columnCount={ this.props.columnCount }\n        onRenderItem={ this._renderOption }\n        positionInSet={ positionInSet && positionInSet }\n        setSize={ setSize && setSize }\n        shouldFocusCircularNavigate={ shouldFocusCircularNavigate }\n        onBlur={ this._onSwatchColorPickerBlur }\n        containerClassName={ css('ms-swatchColorPickerBodyContainer', styles.swatchColorPickerContainer, className) }\n      />);\n  }\n\n  /**\n   * When the whole swatchColorPicker is blurred,\n   * make sure to clear the pending focused stated\n   */\n  @autobind\n  private _onSwatchColorPickerBlur() {\n    if (this.props.onCellFocused) {\n      this.props.onCellFocused();\n    }\n  }\n\n  /**\n   * Get the selected item's index\n   * @param items - The items to search\n   * @param selectedId - The selected item's id to find\n   * @returns {number} - The index of the selected item's id, -1 if there was no match\n   */\n  private _getSelectedIndex(items: IColorCellProps[], selectedId: string): number | undefined {\n    let selectedIndex = findIndex(items, (item => (item.id === selectedId)));\n    return selectedIndex >= 0 ? selectedIndex : undefined;\n  }\n\n  /**\n   * Render a color cell\n   * @param item - The item to render\n   * @returns {JSX.Element} - Element representing the item\n   */\n  @autobind\n  private _renderOption(item: IColorCellProps): JSX.Element {\n    let id = this._id;\n\n    return (\n      <ColorPickerGridCell\n        item={ item }\n        id={ id }\n        key={ id + item.id }\n        disabled={ this.props.disabled }\n        className={ styles.cell }\n        onClick={ this._onCellClick }\n        onHover={ this._onGridCellHovered }\n        onFocus={ this._onGridCellFocused }\n        onRenderItem={ this._onRenderColorOption }\n        role={ 'gridcell' }\n        selected={ this.state.selectedIndex !== undefined && (this.state.selectedIndex === item.index) }\n        cellIsSelectedStyle={ ['is-selected ' + styles.cellIsSelected] }\n        cellDisabledStyle={ ['is-disabled ' + styles.disabled] }\n        label={ item.label }\n      />\n    );\n  }\n\n  /**\n   * Callback passed to the GridCell class that will trigger the onCellHovered callback of the SwatchColorPicker\n   */\n  @autobind\n  private _onGridCellHovered(item?: IColorCellProps): void {\n    if (this.props && this.props.onCellHovered) {\n      if (item) {\n        this.props.onCellHovered(item.id, item.color);\n      } else {\n        this.props.onCellHovered();\n      }\n    }\n  }\n\n  /**\n   * Callback passed to the GridCell class that will trigger the onCellFocus callback of the SwatchColorPicker\n   */\n  @autobind\n  private _onGridCellFocused(item?: IColorCellProps): void {\n    if (this.props && this.props.onCellFocused) {\n      if (item) {\n        this.props.onCellFocused(item.id, item.color);\n      } else {\n        this.props.onCellFocused();\n      }\n    }\n  }\n\n  /**\n   * Render the core of a color cell\n   * @returns {JSX.Element} - Element representing the core of the item\n   */\n  @autobind\n  private _onRenderColorOption(colorOption: IColorCellProps): JSX.Element {\n    // Build an SVG for the cell with the given shape and color properties\n    return (\n      <svg className={ css(styles.svg, this.props.cellShape, this.props.cellShape === 'circle' ? styles.circle : '') } viewBox='0 0 20 20' fill={ getColorFromString(colorOption.color as string).str } >\n        {\n          this.props.cellShape === 'circle' ?\n            <circle cx='50%' cy='50%' r='50%' /> :\n            <rect width='100%' height='100%' />\n        }\n      </svg>\n    );\n  }\n\n  /**\n   * Handle the click on a cell\n   * @param item - The cell that the click was fired against\n   */\n  @autobind\n  private _onCellClick(item: IColorCellProps) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    let index = item.index as number;\n\n    // If we have a valid index and it is not already\n    // selected, select it\n    if (index >= 0 && index !== this.state.selectedIndex) {\n      if (this.props.onColorChanged) {\n        this.props.onColorChanged(item.id, item.color);\n      }\n\n      this.setState({\n        selectedIndex: index\n      });\n    }\n  }\n\n  /**\n   * Clear the colors by calling the given callbacks\n   * @param callbacks - The callbacks to handle the clear operation\n   */\n  private _clearColors(callbacks: ((id?: string, color?: string) => void)[]) {\n    callbacks.forEach((callback) => {\n      if (callback) {\n        callback();\n      }\n    });\n  }\n}"]}