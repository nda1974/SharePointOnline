{"version":3,"file":"Calendar.Props.js","sourceRoot":"../src/","sources":["components/Calendar/Calendar.Props.ts"],"names":[],"mappings":";;AAEA,oEAAiF;AAExE,oBAFA,sBAAS,CAEA;AAAE,wBAFA,0BAAa,CAEA","sourcesContent":["import * as React from 'react';\nimport { Calendar } from './Calendar';\nimport { DayOfWeek, DateRangeType } from '../../utilities/dateValues/DateValues';\n\nexport { DayOfWeek, DateRangeType };\n\nexport interface ICalendar {\n  /** Sets focus to the selected date. */\n  focus: () => void;\n}\n\nexport interface ICalendarProps extends React.Props<Calendar> {\n  /**\n   * Optional callback to access the ICalendar interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: ICalendar) => void;\n\n  /**\n  * Callback issued when a date is selected\n  * @param date - The date the user selected\n  * @param selectedDateRangeArray - The resultant list of dates that are selected based on the date range type set for the component.\n  */\n  onSelectDate?: (date: Date, selectedDateRangeArray?: Date[]) => void;\n\n  /**\n   * Callback issued when calendar is closed\n   */\n  onDismiss?: () => void;\n\n  /**\n   * Whether the month picker is shown beside the day picker or hidden.\n   * @defaultvalue true\n   */\n  isMonthPickerVisible?: boolean;\n\n  /**\n  * Whether the day picker is shown beside the month picker or hidden.\n  * @defaultvalue true\n  */\n  isDayPickerVisible?: boolean;\n\n  /**\n  * Show month picker on top of date picker when visible.\n  * @defaultvalue false\n  */\n  showMonthPickerAsOverlay?: boolean;\n\n  /**\n    * Value of today. If null, current time in client machine will be used.\n    */\n  today?: Date;\n\n  /**\n   * Default value of the Calendar, if any\n   */\n  value?: Date;\n\n  /**\n   * The first day of the week for your locale.\n   * @defaultvalue DayOfWeek.Sunday\n   */\n  firstDayOfWeek?: DayOfWeek;\n\n  /**\n   * The date range type indicating how  many days should be selected as the user\n   * selects days\n   * @defaultValue DateRangeType.Day\n   */\n  dateRangeType?: DateRangeType;\n\n  /**\n   * Whether the month view should automatically navigate to the next or previous date range\n   * depending on the selected date. If this property is set to true and the currently displayed\n   * month is March 2017, if the user clicks on a day outside the month, i.e., April 1st, the\n   * picker will automatically navigate to the month of April.\n   * @defaultValue false\n   */\n  autoNavigateOnSelection?: boolean;\n\n  /**\n   * Whether the \"Go to today\" link should be shown or not\n   */\n  showGoToToday?: boolean;\n\n  /**\n   * This property has been removed at 0.80.0 in place of the focus method, to be removed @ 1.0.0.\n   * @deprecated\n   */\n  shouldFocusOnMount?: boolean;\n\n  /**\n   * Localized strings to use in the Calendar\n   */\n  strings: ICalendarStrings | null;\n\n  /**\n  * Whether the month picker should highlight the current month\n  * @defaultvalue false\n  */\n  highlightCurrentMonth?: boolean;\n\n  /**\n  * Customize navigation icons using ICalendarIconStrings\n  */\n  navigationIcons?: ICalendarIconStrings;\n\n  /**\n  * Apply additional formating to dates, for example localized date formatting.\n  */\n  dateTimeFormatter?: ICalendarFormatDateCallbacks;\n}\n\nexport interface ICalendarStrings {\n  /**\n   * An array of strings for the full names of months.\n   * The array is 0-based, so months[0] should be the full name of January.\n   */\n  months: string[];\n\n  /**\n   * An array of strings for the short names of months.\n   * The array is 0-based, so shortMonths[0] should be the short name of January.\n   */\n  shortMonths: string[];\n\n  /**\n   * An array of strings for the full names of days of the week.\n   * The array is 0-based, so days[0] should be the full name of Sunday.\n   */\n  days: string[];\n\n  /**\n   * An array of strings for the initials of the days of the week.\n   * The array is 0-based, so days[0] should be the initial of Sunday.\n   */\n  shortDays: string[];\n\n  /**\n   * String to render for button to direct the user to today's date.\n   */\n  goToToday: string;\n\n  /**\n   * Aria-label for the \"previous month\" button.\n   */\n  prevMonthAriaLabel?: string;\n\n  /**\n   * Aria-label for the \"next month\" button.\n   */\n  nextMonthAriaLabel?: string;\n\n  /**\n   * Aria-label for the \"previous year\" button.\n   */\n  prevYearAriaLabel?: string;\n\n  /**\n   * Aria-label for the \"next year\" button.\n   */\n  nextYearAriaLabel?: string;\n}\n\nexport interface ICalendarIconStrings {\n  /**\n  * FabricMDL2Icons name for the left navigation icon.  Previous default: ChevronLeft.\n  * @defaultvalue  'Up'\n  */\n  leftNavigation?: string;\n\n  /**\n  * FabricMDL2Icons name for the right navigation icon.  Previous default: ChevronRight.\n  * @defaultvalue  'Down'\n  */\n  rightNavigation?: string;\n\n}\n\nexport interface ICalendarFormatDateCallbacks {\n  /**\n * Callback to apply formatting to mmmm d, yyyy formated dates\n */\n  formatMonthDayYear: (date: Date, strings?: ICalendarStrings) => string;\n\n  /**\n  * Callback to apply formatting to the month and year in the Day Picker header\n  */\n  formatMonthYear: (date: Date, strings?: ICalendarStrings) => string;\n\n  /**\n  * Callback to apply formatting to the days in the Day Picker calendar\n  */\n  formatDay: (date: Date) => string;\n\n  /**\n  * Callback to apply formatting to the year in the Month Picker header\n  */\n  formatYear: (date: Date) => string;\n\n}"]}