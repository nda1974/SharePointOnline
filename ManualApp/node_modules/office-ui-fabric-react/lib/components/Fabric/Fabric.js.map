{"version":3,"file":"Fabric.js","sourceRoot":"../src/","sources":["components/Fabric/Fabric.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,6CAOyB;AAIzB,iDAA4C;AAE5C,IAAM,qBAAqB,GAAG;;;;;;;;;;CAU7B,CAAC;AAUF,qFAAqF;AACrF,yEAAyE;AACzE,IAAI,mBAAmB,GAAY,KAAK,CAAC;AAEzC,6HAA6H;AAC7H,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,QAAQ,IAAI,QAAQ,CAAC,eAAe,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAChH,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACtD,CAAC;AAGD;IAA4B,kCAAyC;IAInE;QAAA,YACE,iBAAO,SAKR;QAHC,KAAI,CAAC,KAAK,GAAG;YACX,cAAc,EAAE,mBAAmB;SACpC,CAAC;;IACJ,CAAC;IAEM,kCAAiB,GAAxB;QACE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QACrE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACnE,CAAC;IAEM,uBAAM,GAAb;QACU,IAAA,0CAAc,CAAgB;QACtC,IAAM,MAAM,GAAG,yBAAS,CAAC,IAAI,CAAC,KAAK,CAAC,KAAM,CAAC,CAAC;QAE5C,IAAM,SAAS,GAAG,eAAG,CACnB,WAAW,EACX,MAAM,CAAC,IAAI,EACX,IAAI,CAAC,KAAK,CAAC,SAAS,EACpB,cAAc,IAAI,iBAAiB,CAC1B,CAAC;QAEZ,IAAI,QAAQ,GAAG,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAa,CAAC,CAAC;QACzD,MAAM,CAAC,CACL,gDACO,QAAQ,IACb,SAAS,EAAG,SAAS,EACrB,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAC/B,CACH,CAAC;IACJ,CAAC;IAEO,6BAAY,GAApB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,QAAQ,CAAC;gBACZ,cAAc,EAAE,KAAK;aACtB,CAAC,CAAC;YAEH,mBAAmB,GAAG,KAAK,CAAC;QAC9B,CAAC;IACH,CAAC;IAEO,2BAAU,GAAlB,UAAmB,EAAiB;QAClC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,qBAAqB,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/E,IAAI,CAAC,QAAQ,CAAC;gBACZ,cAAc,EAAE,IAAI;aACrB,CAAC,CAAC;YAEH,mBAAmB,GAAG,IAAI,CAAC;QAC7B,CAAC;IACH,CAAC;IAxDU,MAAM;QADlB,wBAAY,CAAC,CAAC,OAAO,CAAC,CAAC;OACX,MAAM,CAyDlB;IAAD,aAAC;CAAA,AAzDD,CAA4B,yBAAa,GAyDxC;AAzDY,wBAAM","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  KeyCodes,\n  customizable,\n  css,\n  getNativeProps,\n  divProperties\n} from '../../Utilities';\nimport {\n  ITheme\n} from '../../Styling';\nimport { getStyles } from './Fabric.styles';\n\nconst DIRECTIONAL_KEY_CODES = [\n  KeyCodes.up,\n  KeyCodes.down,\n  KeyCodes.left,\n  KeyCodes.right,\n  KeyCodes.home,\n  KeyCodes.end,\n  KeyCodes.tab,\n  KeyCodes.pageUp,\n  KeyCodes.pageDown\n];\n\nexport interface IFabricProps extends React.HTMLAttributes<HTMLDivElement> {\n  componentRef?: () => void;\n  theme?: ITheme;\n}\nexport interface IFabricState {\n  isFocusVisible?: boolean;\n}\n\n// We will track the last focus visibility state so that if we tear down and recreate\n// the Fabric component, we will use the last known value as the default.\nlet _lastIsFocusVisible: boolean = false;\n\n// Ensure that the HTML element has a dir specified. This helps to ensure RTL/LTR macros in css for all components will work.\nif (typeof (document) === 'object' && document.documentElement && !document.documentElement.getAttribute('dir')) {\n  document.documentElement.setAttribute('dir', 'ltr');\n}\n\n@customizable(['theme'])\nexport class Fabric extends BaseComponent<IFabricProps, IFabricState> {\n  // tslint:disable-next-line:no-unused-variable\n  private _root: HTMLElement;\n\n  constructor() {\n    super();\n\n    this.state = {\n      isFocusVisible: _lastIsFocusVisible\n    };\n  }\n\n  public componentDidMount() {\n    this._events.on(document.body, 'mousedown', this._onMouseDown, true);\n    this._events.on(document.body, 'keydown', this._onKeyDown, true);\n  }\n\n  public render() {\n    const { isFocusVisible } = this.state;\n    const styles = getStyles(this.props.theme!);\n\n    const rootClass = css(\n      'ms-Fabric',\n      styles.root,\n      this.props.className,\n      isFocusVisible && 'is-focusVisible'\n    ) as string;\n\n    let divProps = getNativeProps(this.props, divProperties);\n    return (\n      <div\n        { ...divProps }\n        className={ rootClass }\n        ref={ this._resolveRef('_root') }\n      />\n    );\n  }\n\n  private _onMouseDown() {\n    if (this.state.isFocusVisible) {\n      this.setState({\n        isFocusVisible: false\n      });\n\n      _lastIsFocusVisible = false;\n    }\n  }\n\n  private _onKeyDown(ev: KeyboardEvent) {\n    if (!this.state.isFocusVisible && DIRECTIONAL_KEY_CODES.indexOf(ev.which) > -1) {\n      this.setState({\n        isFocusVisible: true\n      });\n\n      _lastIsFocusVisible = true;\n    }\n  }\n}\n"]}