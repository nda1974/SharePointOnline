{"version":3,"file":"Facepile.Props.js","sourceRoot":"../src/","sources":["components/Facepile/Facepile.Props.ts"],"names":[],"mappings":";;AA4GA,IAAY,kBASX;AATD,WAAY,kBAAkB;IAC5B,kBAAkB;IAClB,2DAAQ,CAAA;IACR,uBAAuB;IACvB,yEAAe,CAAA;IACf,yBAAyB;IACzB,2DAAQ,CAAA;IACR,4BAA4B;IAC5B,qEAAa,CAAA;AACf,CAAC,EATW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAS7B","sourcesContent":["import * as React from 'react';\nimport { Facepile } from './Facepile';\nimport { IButtonProps } from '../Button/index';\nimport {\n  IPersonaProps,\n  PersonaInitialsColor,\n  PersonaSize\n} from '../Persona/index';\n\nexport interface IFacepile {\n\n}\n\nexport interface IFacepileProps extends React.Props<Facepile> {\n  /**\n   * Optional callback to access the IFacepile interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: IFacepile) => void;\n\n  /**\n   * Array of IPersonaProps that define each Persona. Note that the size\n   * is fixed at PersonaSize.extraSmall regardless of what is specified.\n   */\n  personas: IFacepilePersona[];\n\n  /** Maximum number of personas to show */\n  maxDisplayablePersonas?: number;\n\n  /** Size to display the personas */\n  personaSize?: PersonaSize;\n\n  /** ARIA label for persona list */\n  ariaDescription?: string;\n\n  /** Show add person button */\n  showAddButton?: boolean;\n\n  /** Button properties for the add face button */\n  addButtonProps?: IButtonProps;\n\n  /**\n   * Deprecated at v0.70, use 'overflowButtonProps' instead;\n   * @deprecated\n   */\n  chevronButtonProps?: IButtonProps;\n\n  /** Properties for the overflow icon */\n  overflowButtonProps?: IButtonProps;\n\n  /** Type of overflow icon to use */\n  overflowButtonType?: OverflowButtonType;\n\n  /** Method to access properties on the underlying Persona control */\n  getPersonaProps?: (persona: IFacepilePersona) => IPersonaProps;\n\n  /**\n   * Optional class for Facepile root element.\n   */\n  className?: string;\n}\n\nexport interface IFacepilePersona extends React.ButtonHTMLAttributes<HTMLButtonElement | HTMLDivElement> {\n  /**\n   * Name of the person.\n   */\n  personaName?: string;\n\n  /**\n   * Url to the image to use, should be a square aspect ratio and big enough to fit in the image area.\n   */\n  imageUrl?: string;\n\n  /**\n   * The user's initials to display in the image area when there is no image.\n   * @defaultvalue [Derived from personaName]\n   */\n  imageInitials?: string;\n\n  /**\n   * The background color when the user's initials are displayed.\n   * @defaultvalue [Derived from personaName]\n   */\n  initialsColor?: PersonaInitialsColor;\n\n  /**\n   * If provided, persona will be rendered with cursor:pointer and the handler will be\n   * called on click.\n   */\n  onClick?: (ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void;\n\n  /**\n   * If provided, the handler will be called on mouse move.\n   */\n  onMouseMove?: (ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void;\n\n  /**\n   * If provided, the handler will be called when mouse moves out of the component.\n   */\n  onMouseOut?: (ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void;\n\n  /**\n   * Extra data - not used directly but can be handy for passing additional data to custom event\n   * handlers.\n   */\n  data?: any;\n}\n\nexport enum OverflowButtonType {\n  /** No overflow */\n  none = 0,\n  /** +1 overflow icon */\n  descriptive = 1,\n  /** More overflow icon */\n  more = 2,\n  /** Chevron overflow icon */\n  downArrow = 3\n}\n"]}