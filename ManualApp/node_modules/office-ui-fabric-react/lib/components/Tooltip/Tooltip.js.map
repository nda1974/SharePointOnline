{"version":3,"file":"Tooltip.js","sourceRoot":"../src/","sources":["components/Tooltip/Tooltip.tsx"],"names":[],"mappings":";;;AAAA,uCAAuC;AACvC,6BAA+B;AAC/B,sCAAsC;AACtC,6CAKyB;AACzB,iDAA8D;AAC9D,yCAAwC;AACxC,gEAA+D;AAC/D,6CAA+C;AAC/C,IAAM,MAAM,GAAQ,YAAY,CAAC;AACjC,yCAAiE;AAEjE;IAA6B,mCAAiC;IAA9D;;IAyDA,CAAC;IAzCQ,wBAAM,GAAb;QACQ,IAAA,eASM,EARV,gCAAa,EACb,8BAAY,EACZ,oCAAe,EACf,gDAAqB,EACrB,gBAAK,EACL,UAAE,EACF,sBAAQ,EACR,uBAAuC,EAAvC,4DAAuC,CAC5B;QAEb,MAAM,CAAC,CACL,oBAAC,iBAAO,qBACN,SAAS,EAAG,qBAAW,CACrB,YAAY,EACZ,6BAAmB,CAAC,SAAS,EAC7B,MAAM,CAAC,IAAI,EACX,CAAC,KAAK,KAAK,4BAAY,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,cAAc,EACxD,CAAC,QAAQ,KAAK,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,CACpC,EACX,aAAa,EAAG,aAAa,EAC7B,eAAe,EAAG,eAAe,EACjC,qBAAqB,EAAG,qBAAqB,IACzC,YAAY,EACX,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAa,CAAC;YAE9C,6BAAK,SAAS,EAAG,eAAG,CAAC,oBAAoB,EAAE,MAAM,CAAC,OAAO,CAAC,EAAG,EAAE,EAAG,EAAE,EAAG,IAAI,EAAC,SAAS,IACjF,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAChD,CACG,CACZ,CAAC;IACJ,CAAC;IAEO,kCAAgB,GAAxB,UAAyB,KAAoB;QAC3C,MAAM,CAAC,CACL,2BAAG,SAAS,EAAG,eAAG,CAAC,oBAAoB,EAAE,MAAM,CAAC,OAAO,CAAC,IACpD,KAAK,CAAC,OAAO,CACb,CACL,CAAC;IACJ,CAAC;IAtDD,+BAA+B;IACjB,oBAAY,GAAG;QAC3B,eAAe,EAAE,iCAAe,CAAC,SAAS;QAC1C,KAAK,EAAE,4BAAY,CAAC,MAAM;QAC1B,QAAQ,EAAE,OAAO;QACjB,YAAY,EAAE;YACZ,aAAa,EAAE,IAAI;YACnB,SAAS,EAAE,EAAE;YACb,QAAQ,EAAE,CAAC;YACX,eAAe,EAAE,IAAI;YACrB,UAAU,EAAE,KAAK;SAClB;KACF,CAAC;IA2CJ,cAAC;CAAA,AAzDD,CAA6B,yBAAa,GAyDzC;AAzDY,0BAAO","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport * as React from 'react';\n/* tslint:enable:no-unused-variable */\nimport {\n  BaseComponent,\n  css,\n  getNativeProps,\n  divProperties\n} from '../../Utilities';\nimport { ITooltipProps, TooltipDelay } from './Tooltip.Props';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport * as stylesImport from './Tooltip.scss';\nconst styles: any = stylesImport;\nimport { AnimationClassNames, mergeStyles } from '../../Styling';\n\nexport class Tooltip extends BaseComponent<ITooltipProps, any> {\n\n  // Specify default props values\n  public static defaultProps = {\n    directionalHint: DirectionalHint.topCenter,\n    delay: TooltipDelay.medium,\n    maxWidth: '364px',\n    calloutProps: {\n      isBeakVisible: true,\n      beakWidth: 16,\n      gapSpace: 0,\n      setInitialFocus: true,\n      doNotLayer: false\n    }\n  };\n\n  public render() {\n    const {\n      targetElement,\n      calloutProps,\n      directionalHint,\n      directionalHintForRTL,\n      delay,\n      id,\n      maxWidth,\n      onRenderContent = this._onRenderContent\n  } = this.props;\n\n    return (\n      <Callout\n        className={ mergeStyles(\n          'ms-Tooltip',\n          AnimationClassNames.fadeIn200,\n          styles.root,\n          (delay === TooltipDelay.medium) && styles.hasMediumDelay,\n          (maxWidth !== null) && { maxWidth: maxWidth }\n        ) as string }\n        targetElement={ targetElement }\n        directionalHint={ directionalHint }\n        directionalHintForRTL={ directionalHintForRTL }\n        {...calloutProps}\n        { ...getNativeProps(this.props, divProperties) }\n      >\n        <div className={ css('ms-Tooltip-content', styles.content) } id={ id } role='tooltip'>\n          { onRenderContent(this.props, this._onRenderContent) }\n        </div>\n      </Callout >\n    );\n  }\n\n  private _onRenderContent(props: ITooltipProps): JSX.Element {\n    return (\n      <p className={ css('ms-Tooltip-subText', styles.subText) }>\n        { props.content }\n      </p>\n    );\n  }\n}\n"]}