{"version":3,"file":"Tooltip.Overflow.Example.js","sourceRoot":"../src/","sources":["components/Tooltip/examples/Tooltip.Overflow.Example.tsx"],"names":[],"mappings":";;;AAAA,uCAAuC;AACvC,6BAA+B;AAC/B,sCAAsC;AACtC,kEAAiF;AACjF,4DAAkE;AAClE,8DAG4C;AAO5C;IAA4C,kDAA+C;IAGzF,gCAAY,KAAU;QAAtB,YACE,kBAAM,KAAK,CAAC,SAMb;QATgB,eAAS,GAAG,iBAAK,CAAC,cAAc,CAAC,CAAC;QAKjD,KAAI,CAAC,KAAK,GAAG;YACX,QAAQ,EAAE,KAAK;YACf,gBAAgB,EAAE,KAAK;SACxB,CAAC;;IACJ,CAAC;IAEM,uCAAM,GAAb;QAAA,iBA0BC;QAzBC,MAAM,CAAC,CACL;YACE,oBAAC,sBAAa,IAAC,OAAO,EAAG,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAjD,CAAiD,8BAA0C;YAE1H,6BAAK,KAAK,EAAG;oBACX,SAAS,EAAE,MAAM;iBAClB;gBACC,6BAAK,KAAK,EAAG;wBACX,QAAQ,EAAE,QAAQ;wBAClB,YAAY,EAAE,UAAU;wBACxB,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,QAAQ;wBAC3C,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,OAAO;wBACrC,MAAM,EAAE,iBAAiB;qBAC1B;oBACC,oBAAC,qBAAW,IACV,OAAO,EAAC,qBAAqB,EAC7B,EAAE,EAAG,IAAI,CAAC,SAAS,EACnB,YAAY,EAAG,6BAAmB,CAAC,MAAM,EACzC,eAAe,EAAG,UAAA,gBAAgB,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,EAAE,gBAAgB,kBAAA,EAAE,CAAC,EAAnC,CAAmC;wBACzE,kDAAyB,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,SAAS,GAAG,SAAS,iMAAoM,CACzQ,CACV,CACF,CACF,CACP,CAAC;IACJ,CAAC;IACH,6BAAC;AAAD,CAAC,AAvCD,CAA4C,yBAAa,GAuCxD;AAvCY,wDAAsB","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport * as React from 'react';\n/* tslint:enable:no-unused-variable */\nimport { BaseComponent, css, getId } from 'office-ui-fabric-react/lib/Utilities';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport {\n  TooltipHost,\n  TooltipOverflowMode\n} from 'office-ui-fabric-react/lib/Tooltip';\n\nexport interface ITooltipOverflowExampleState {\n  overflow: boolean;\n  isTooltipVisible: boolean;\n}\n\nexport class TooltipOverflowExample extends BaseComponent<{}, ITooltipOverflowExampleState> {\n  private readonly tooltipId = getId('text-tooltip');\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      overflow: false,\n      isTooltipVisible: false,\n    };\n  }\n\n  public render() {\n    return (\n      <div>\n        <DefaultButton onClick={ () => this.setState({ overflow: !this.state.overflow }) }>Toggle showing overflow</DefaultButton>\n\n        <div style={ {\n          marginTop: '40px'\n        } }>\n          <div style={ {\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: this.state.overflow && 'nowrap',\n            width: this.state.overflow && '200px',\n            border: '1px solid black'\n          } }>\n            <TooltipHost\n              content='This is the tooltip'\n              id={ this.tooltipId }\n              overflowMode={ TooltipOverflowMode.Parent }\n              onTooltipToggle={ isTooltipVisible => this.setState({ isTooltipVisible }) }>\n              <span aria-describedby={ this.state.isTooltipVisible ? this.tooltipId : undefined }>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec volutpat lectus ut magna sodales, sit amet accumsan arcu accumsan. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\n            </TooltipHost>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}"]}