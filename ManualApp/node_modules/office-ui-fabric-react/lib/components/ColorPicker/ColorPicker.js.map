{"version":3,"file":"ColorPicker.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorPicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  autobind,\n  css\n} from '../../Utilities';\nimport { IColorPickerProps } from './ColorPicker.Props';\nimport { TextField } from '../../TextField';\nimport { ColorRectangle } from './ColorRectangle';\nimport { ColorSlider } from './ColorSlider';\nimport {\n  MAX_COLOR_HUE,\n  IColor,\n  getColorFromString,\n  getColorFromRGBA,\n  updateA,\n  updateH,\n  updateSV\n} from '../../utilities/color/colors';\nimport { FontClassNames } from '../../Styling';\nimport * as stylesImport from './ColorPicker.scss';\nconst styles: any = stylesImport;\n\nexport interface IColorPickerState {\n  isOpen: boolean;\n  color: IColor;\n}\n\nexport class ColorPicker extends BaseComponent<IColorPickerProps, IColorPickerState> {\n  private hexText: TextField;\n  private rText: TextField;\n  private gText: TextField;\n  private bText: TextField;\n  private aText: TextField;\n\n  constructor(props: IColorPickerProps) {\n    super(props);\n\n    this.state = {\n      color: getColorFromString(props.color)\n    } as IColorPickerState;\n  }\n\n  public componentWillReceiveProps(newProps: IColorPickerProps) {\n    if (newProps.color) {\n      this._updateColor(getColorFromString(newProps.color));\n    }\n  }\n\n  public render() {\n    let { color } = this.state;\n\n    return (\n      <div className={ css('ms-ColorPicker', styles.root) }>\n        <div className={ css('ms-ColorPicker-panel', styles.panel) }>\n          <ColorRectangle color={ color } onSVChanged={ this._onSVChanged } />\n          <ColorSlider\n            className={ css('is-hue', styles.colorSliderIsHue) }\n            minValue={ 0 }\n            maxValue={ MAX_COLOR_HUE }\n            value={ color.h }\n            onChanged={ this._onHChanged }\n          />\n          { !this.props.alphaSliderHidden && (\n            <ColorSlider\n              className={ css('is-alpha', styles.colorSliderIsAlpha) }\n              overlayStyle={ { background: `linear-gradient(to right, transparent 0, ${color.str} 100%)` } }\n              minValue={ 0 }\n              maxValue={ 100 }\n              value={ color.a }\n              onChanged={ this._onAChanged }\n            />) }\n          <table className='ms-ColorPicker-table' cellPadding='0' cellSpacing='0'>\n            <thead>\n              <tr className={ FontClassNames.small }>\n                <td>Hex</td>\n                <td>Red</td>\n                <td>Green</td>\n                <td>Blue</td>\n                { !this.props.alphaSliderHidden && (\n                  <td>Alpha</td>) }\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>\n                  <TextField\n                    className={ css('ms-ColorPicker-input', styles.input) }\n                    value={ color.hex }\n                    ref={ (ref) => this.hexText = ref! }\n                    onBlur={ this._onHexChanged }\n                  />\n                </td>\n                <td style={ { width: '18%' } }>\n                  <TextField\n                    className={ css('ms-ColorPicker-input', styles.input) }\n                    onBlur={ this._onRGBAChanged }\n                    value={ String(color.r) }\n                    ref={ (ref) => this.rText = ref! }\n                  />\n                </td>\n                <td style={ { width: '18%' } }>\n                  <TextField\n                    className={ css('ms-ColorPicker-input', styles.input) }\n                    onBlur={ this._onRGBAChanged }\n                    value={ String(color.g) }\n                    ref={ (ref) => this.gText = ref! }\n                  />\n                </td>\n                <td style={ { width: '18%' } }>\n                  <TextField\n                    className={ css('ms-ColorPicker-input', styles.input) }\n                    onBlur={ this._onRGBAChanged }\n                    value={ String(color.b) }\n                    ref={ (ref) => this.bText = ref! }\n                  />\n                </td>\n                { !this.props.alphaSliderHidden && (\n                  <td style={ { width: '18%' } }>\n                    <TextField\n                      className={ css('ms-ColorPicker-input', styles.input) }\n                      onBlur={ this._onRGBAChanged }\n                      value={ String(color.a) }\n                      ref={ (ref) => this.aText = ref! }\n                    />\n                  </td>\n                ) }\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  @autobind\n  private _onSVChanged(s: number, v: number) {\n    this._updateColor(updateSV(this.state.color, s, v));\n  }\n\n  @autobind\n  private _onHChanged(h: number) {\n    this._updateColor(updateH(this.state.color, h));\n  }\n\n  @autobind\n  private _onAChanged(a: number) {\n    this._updateColor(updateA(this.state.color, a));\n  }\n\n  @autobind\n  private _onHexChanged() {\n    this._updateColor(getColorFromString('#' + this.hexText.value));\n  }\n\n  @autobind\n  private _onRGBAChanged() {\n    this._updateColor(getColorFromRGBA({\n      r: Number(this.rText.value),\n      g: Number(this.gText.value),\n      b: Number(this.bText.value),\n      a: Number(this.aText.value)\n    }));\n  }\n\n  private _updateColor(newColor: IColor) {\n    let { onColorChanged } = this.props;\n\n    if (newColor.str !== this.state.color.str) {\n      this.setState({\n        color: newColor\n      } as IColorPickerState, () => {\n        if (onColorChanged) {\n          onColorChanged(newColor.str);\n        }\n      });\n    }\n  }\n}\n"]}