{"version":3,"file":"ScrollablePane.Default.Example.js","sourceRoot":"../src/","sources":["components/ScrollablePane/examples/ScrollablePane.Default.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,4EAA2E;AAC3E,4DAA+E;AAC/E,+DAAmD;AACnD,yCAAuC;AAEvC;IAAkD,wDAAyB;IACzE;eACE,iBAAO;IACT,CAAC;IAEM,6CAAM,GAAb;QACE,IAAI,YAAY,GAAkB,EAAE,CAAC;QACrC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAC3B,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC;QAED,MAAM,CAAC,CACL,oBAAC,+BAAc,IAAC,SAAS,EAAC,8BAA8B,IACpD,YAAY,CAAC,GAAG,CAAC,UAAC,GAAG;YACrB,MAAM,CAAC,GAAG,CAAC;QACb,CAAC,CAAC,CACa,CAClB,CAAC;IACJ,CAAC;IAEO,sDAAe,GAAvB;QACE,IAAI,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAChC,IAAI,KAAK,GAAG,GAAG,CAAC;QAChB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAC3B,KAAK,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/D,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAEO,yDAAkB,GAA1B,UAA2B,KAAa;QACtC,IAAM,KAAK,GAAG;YACZ,eAAe,EAAE,IAAI,CAAC,eAAe,EAAE;SACxC,CAAC;QAEF,MAAM,CAAC,CACL,6BAAK,GAAG,EAAG,KAAK;YACd,oBAAC,eAAM,IACL,cAAc,EAAG,2BAAkB,CAAC,IAAI,EACxC,eAAe,EAAC,WAAW;gBAC3B,6BAAK,SAAS,EAAC,QAAQ,EAAC,KAAK,EAAG,KAAK;;oBACf,KAAK,GAAG,CAAC,CACzB,CACC;YACT,6BAAK,SAAS,EAAC,aAAa,IACxB,wBAAK,CAAC,GAAG,CAAC,CACR,CACF,CACP,CAAC;IACJ,CAAC;IACH,mCAAC;AAAD,CAAC,AAjDD,CAAkD,KAAK,CAAC,SAAS,GAiDhE;AAjDY,oEAA4B","sourcesContent":["import * as React from 'react';\nimport { ScrollablePane } from 'office-ui-fabric-react/lib/ScrollablePane';\nimport { Sticky, StickyPositionType } from 'office-ui-fabric-react/lib/Sticky';\nimport { lorem } from '@uifabric/example-app-base';\nimport './ScrollablePane.Example.scss';\n\nexport class ScrollablePaneDefaultExample extends React.Component<any, any> {\n  constructor() {\n    super();\n  }\n\n  public render() {\n    let contentAreas: JSX.Element[] = [];\n    for (let i = 0; i < 4; i++) {\n      contentAreas.push(this._createContentArea(i));\n    }\n\n    return (\n      <ScrollablePane className='scrollablePaneDefaultExample'>\n        { contentAreas.map((ele) => {\n          return ele;\n        }) }\n      </ScrollablePane>\n    );\n  }\n\n  private _getRandomColor() {\n    let letters = 'BCDEF'.split('');\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * letters.length)];\n    }\n    return color;\n  }\n\n  private _createContentArea(index: number) {\n    const style = {\n      backgroundColor: this._getRandomColor()\n    };\n\n    return (\n      <div key={ index }>\n        <Sticky\n          stickyPosition={ StickyPositionType.Both }\n          stickyClassName='largeFont'>\n          <div className='sticky' style={ style }>\n            Sticky Component #{ index + 1 }\n          </div>\n        </Sticky>\n        <div className='textContent'>\n          { lorem(200) }\n        </div>\n      </div>\n    );\n  }\n}\n"]}