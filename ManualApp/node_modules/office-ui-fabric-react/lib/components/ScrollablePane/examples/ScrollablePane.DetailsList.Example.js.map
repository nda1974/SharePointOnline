{"version":3,"file":"ScrollablePane.DetailsList.Example.js","sourceRoot":"../src/","sources":["components/ScrollablePane/examples/ScrollablePane.DetailsList.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport * as React from 'react';\n/* tslint:enable:no-unused-variable */\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\nimport {\n  DetailsList,\n  DetailsListLayoutMode,\n  IDetailsHeaderProps,\n  Selection,\n  IColumn\n} from 'office-ui-fabric-react/lib/DetailsList';\nimport {\n  IRenderFunction\n} from 'office-ui-fabric-react/lib/Utilities';\nimport {\n  TooltipHost,\n  ITooltipHostProps\n} from 'office-ui-fabric-react/lib/Tooltip';\nimport {\n  ScrollablePane\n} from 'office-ui-fabric-react/lib/ScrollablePane';\nimport {\n  Sticky\n} from 'office-ui-fabric-react/lib/Sticky';\nimport { MarqueeSelection } from 'office-ui-fabric-react/lib/MarqueeSelection';\n\nlet _items: {\n  key: number,\n  name: string,\n  value: number\n}[] = [];\n\nlet _columns: IColumn[] = [\n  {\n    key: 'column1',\n    name: 'Name',\n    fieldName: 'name',\n    minWidth: 100,\n    maxWidth: 200,\n    isResizable: true,\n    ariaLabel: 'Operations for name'\n  },\n  {\n    key: 'column2',\n    name: 'Value',\n    fieldName: 'value',\n    minWidth: 100,\n    maxWidth: 200,\n    isResizable: true,\n    ariaLabel: 'Operations for value'\n  },\n];\n\nexport class ScrollablePaneDetailsListExample extends React.Component<any, any> {\n  private _selection: Selection;\n\n  constructor() {\n    super();\n\n    // Populate with items for demos.\n    if (_items.length === 0) {\n      for (let i = 0; i < 200; i++) {\n        _items.push({\n          key: i,\n          name: 'Item ' + i,\n          value: i\n        });\n      }\n    }\n\n    this._selection = new Selection({\n      onSelectionChanged: () => this.setState({ selectionDetails: this._getSelectionDetails() })\n    });\n\n    this.state = {\n      items: _items,\n      selectionDetails: this._getSelectionDetails()\n    };\n  }\n\n  public render() {\n    let { items, selectionDetails } = this.state;\n\n    return (\n      <ScrollablePane>\n        <Sticky>{ selectionDetails }</Sticky>\n        <TextField\n          label='Filter by name:'\n          onChanged={ text => this.setState({ items: text ? _items.filter(i => i.name.toLowerCase().indexOf(text) > -1) : _items }) }\n        />\n        <Sticky>\n          <h1 style={ { margin: '0px' } }>Item List</h1>\n        </Sticky>\n        <MarqueeSelection selection={ this._selection }>\n          <DetailsList\n            items={ items }\n            columns={ _columns }\n            setKey='set'\n            layoutMode={ DetailsListLayoutMode.fixedColumns }\n            onRenderDetailsHeader={\n              (detailsHeaderProps: IDetailsHeaderProps, defaultRender: IRenderFunction<IDetailsHeaderProps>) => (\n                <Sticky>\n                  { defaultRender({\n                    ...detailsHeaderProps,\n                    onRenderColumnHeaderTooltip: (tooltipHostProps: ITooltipHostProps) => <TooltipHost { ...tooltipHostProps } />\n                  }) }\n                </Sticky>\n              ) }\n            selection={ this._selection }\n            selectionPreservedOnEmptyClick={ true }\n            ariaLabelForSelectionColumn='Toggle selection'\n            ariaLabelForSelectAllCheckbox='Toggle selection for all items'\n            onItemInvoked={ (item) => alert(`Item invoked: ${item.name}`) }\n          />\n        </MarqueeSelection>\n      </ScrollablePane>\n    );\n  }\n\n  private _getSelectionDetails(): string {\n    let selectionCount = this._selection.getSelectedCount();\n\n    switch (selectionCount) {\n      case 0:\n        return 'No items selected';\n      case 1:\n        return '1 item selected: ' + (this._selection.getSelection()[0] as any).name;\n      default:\n        return `${selectionCount} items selected`;\n    }\n  }\n}\n"]}