{"version":3,"file":"ContextualMenu.Props.js","sourceRoot":"../src/","sources":["components/ContextualMenu/ContextualMenu.Props.ts"],"names":[],"mappings":";;AAWA,gEAA+D;AAAtD,4CAAA,eAAe,CAAA;AAExB,IAAY,sBAIX;AAJD,WAAY,sBAAsB;IAChC,uEAAU,CAAA;IACV,yEAAW,CAAA;IACX,uEAAU,CAAA;AACZ,CAAC,EAJW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAIjC","sourcesContent":["import * as React from 'react';\nimport { ContextualMenu } from './ContextualMenu';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { FocusZoneDirection } from '../../FocusZone';\nimport { IIconProps } from '../Icon/Icon.Props';\nimport { ICalloutProps } from '../../Callout';\nimport {\n  IPoint,\n  IRectangle\n} from '../../Utilities';\nimport { IWithResponsiveModeState } from '../../utilities/decorators/withResponsiveMode';\nexport { DirectionalHint } from '../../common/DirectionalHint';\n\nexport enum ContextualMenuItemType {\n  Normal = 0,\n  Divider = 1,\n  Header = 2\n}\n\nexport interface IContextualMenu {\n\n}\n\nexport interface IContextualMenuProps extends React.Props<ContextualMenu>, IWithResponsiveModeState {\n  /**\n   * Optional callback to access the IContextualMenu interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: IContextualMenu) => void;\n\n  /**\n   * The target that the ContextualMenu should try to position itself based on.\n   * It can be either an HTMLElement a querySelector string of a valid HTMLElement\n   * or a MouseEvent. If MouseEvent is given then the origin point of the event will be used.\n   */\n  target?: HTMLElement | string | MouseEvent;\n\n  /**\n   * Deprecated at version 0.72.1 and will no longer exist after 1.0 use 'target' instead.\n   * @deprecated\n   */\n  targetElement?: HTMLElement;\n\n  /**\n   * How the element should be positioned\n   * @default DirectionalHint.bottomAutoEdge\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * How the element should be positioned in RTL layouts.\n   * If not specified, a mirror of `directionalHint` will be used instead\n   */\n  directionalHintForRTL?: DirectionalHint;\n\n  /**\n   * The gap between the ContextualMenu and the target\n   * @default 0\n   */\n  gapSpace?: number;\n\n  /**\n   * The width of the beak.\n   * @default 16\n   */\n  beakWidth?: number;\n\n  /**\n   * If true the context menu will render as the same width as the target element\n   * @default false\n   */\n  useTargetWidth?: boolean;\n\n  /**\n   * The bounding rectangle for which the contextual menu can appear in.\n   */\n  bounds?: IRectangle;\n\n  /**\n   * If true use a point rather than rectangle to position the ContextualMenu.\n   * For example it can be used to position based on a click.\n   */\n  useTargetPoint?: boolean;\n\n  /**\n   * Point used to position the ContextualMenu\n   */\n  targetPoint?: IPoint;\n\n  /**\n   * If true then the beak is visible. If false it will not be shown.\n   */\n  isBeakVisible?: boolean;\n\n  /**\n   * If true the position returned will have the menu element cover the target.\n   * If false then it will position next to the target;\n   * @default false\n   */\n\n  coverTarget?: boolean;\n\n  /**\n   * Collection of menu items.\n   * @default []\n   */\n  items: IContextualMenuItem[];\n\n  /**\n   * Aria Labelled by labelElementId\n   * @default null\n   */\n  labelElementId?: string;\n\n  /**\n   * Whether to focus on the menu when mounted.\n   * @default true\n   */\n  shouldFocusOnMount?: boolean;\n\n  /**\n   * Callback when the ContextualMenu tries to close. If dismissAll is true then all\n   * submenus will be dismissed.\n   */\n  onDismiss?: (ev?: any, dismissAll?: boolean) => void;\n\n  /**\n   * Click handler which is invoked if onClick is not passed for individual contextual\n   * menu item\n   */\n  onItemClick?: (ev?: React.MouseEvent<HTMLElement>, item?: IContextualMenuItem) => void;\n\n  /**\n   * CSS class to apply to the context menu.\n   * @default null\n   */\n  className?: string;\n\n  /**\n   * Whether this menu is a submenu of another menu or not.\n   */\n  isSubMenu?: boolean;\n\n  /**\n   * DOM id to tag the ContextualMenu with, for reference.\n   * Should be used for 'aria-owns' and other such uses, rather than direct reference for programmatic purposes.\n   */\n  id?: string;\n\n  /**\n   * Aria label for accessibility for the ContextualMenu.\n   * If none specified no aria label will be applied to the ContextualMenu.\n   */\n  ariaLabel?: string;\n\n  /**\n   * If true do not render on a new layer. If false render on a new layer.\n   * @default false\n   */\n  doNotLayer?: boolean;\n\n  /**\n   * Direction for arrow navigation of the ContextualMenu. Should only be specified if using custom-rendered menu items.\n   * @default FocusZoneDirection.vertical\n   */\n  arrowDirection?: FocusZoneDirection;\n\n  /**\n   * If true the position will not change sides in an attempt to fit the ContextualMenu within bounds.\n   * It will still attempt to align it to whatever bounds are given.\n   * @default false\n   */\n  directionalHintFixed?: boolean;\n\n  /**\n   * Callback for when the contextualmenu has been opened.\n   */\n  onMenuOpened?: (contextualMenu?: IContextualMenuProps) => void;\n\n  /**\n   * Pass in custom callout props\n   */\n  calloutProps?: ICalloutProps;\n}\n\nexport interface IContextualMenuItem {\n  /**\n   * Unique id to identify the item\n   */\n  key: string;\n\n  /**\n   * Text description for the menu item to display\n   */\n  name?: string;\n\n  itemType?: ContextualMenuItemType;\n\n  /**\n   * Props that go to the IconComponent\n   */\n  iconProps?: IIconProps;\n\n  /**\n   * Props that go to the IconComponent used for the chevron.\n   */\n  submenuIconProps?: IIconProps;\n\n  /**\n   * Deprecated at v0.69.0 and will no longer exist after 1.0 use IconProps instead.\n   * @deprecated\n   */\n  icon?: string;\n\n  /**\n   * Whether the menu item is disabled\n   * @defaultvalue false\n   */\n  disabled?: boolean;\n\n  /**\n   * Deprecated at v0.65.1 and will be removed by v 1.0. Use 'disabled' instead.\n   * @deprecated\n   */\n  isDisabled?: boolean;\n\n  /**\n   * [TODO] Not Yet Implemented\n   */\n  shortCut?: string;\n\n  /**\n   * Whether or not this menu item can be checked\n   * @defaultvalue false\n   */\n  canCheck?: boolean;\n\n  /**\n   * Whether or not this menu item is currently checked.\n   * @defaultvalue false\n   */\n  checked?: boolean;\n\n  /**\n   * Deprecated at v.65.1 and will be removed by v 1.0. Use 'checked' instead.\n   * @deprecated\n   */\n  isChecked?: boolean;\n\n  /**\n   * Any custom data the developer wishes to associate with the menu item.\n   */\n  data?: any;\n\n  /**\n   * Callback issued when the menu item is invoked\n   */\n  onClick?: (ev?: React.MouseEvent<HTMLElement>, item?: IContextualMenuItem) => void;\n\n  /**\n   * An optional URL to navigate to upon selection\n   */\n  href?: string;\n\n  /**\n   * An optional target when using href\n   */\n  target?: string;\n\n  /**\n   * Deprecated at v.80.0 and will be removed by v 1.0. Use 'subMenuProps' instead.\n   * @deprecated\n   */\n  items?: IContextualMenuItem[];\n\n  /**\n   * Properties to apply to a submenu to this item.\n   * The ContextualMenu will provide default values for 'target', 'onDismiss', 'isSubMenu',\n   *  'id', 'shouldFocusOnMount', 'directionalHint', 'className', and 'gapSpace', all of which\n   *  can be overridden.\n   */\n  subMenuProps?: IContextualMenuProps;\n\n  /**\n   * Additional css class to apply to the menu item\n   * @defaultvalue undefined\n   */\n  className?: string;\n\n  /**\n   * Additional styles to apply to the menu item\n   * @defaultvalue undefined\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * Optional accessibility label (aria-label) attribute that will be stamped on to the element.\n   * If none is specified, the aria-label attribute will contain the item name\n   */\n  ariaLabel?: string;\n\n  /**\n   * Optional title for displaying text when hovering over an item.\n   */\n  title?: string;\n\n  /**\n   * Method to custom render this menu item.\n   * For keyboard accessibility, the top-level rendered item should be a focusable element\n   * (like an anchor or a button) or have the `data-is-focusable` property set to true.\n   * @defaultvalue undefined\n   */\n  onRender?: (item: any) => React.ReactNode;\n\n  /**\n   * A function to be executed onMouseDown. This is executed before an onClick event and can\n   * be used to interrupt native on click events as well. The click event should still handle\n   * the commands. This should only be used in special cases when react and non-react are mixed.\n   */\n  onMouseDown?: (item: IContextualMenuItem, event: any) => void;\n\n  /**\n   * Optional override for the role attribute on the menu button. If one is not provided, it will\n   * have a value of menuitem or menuitemcheckbox.\n   */\n  role?: string;\n\n  /**\n   * Any additional properties to use when custom rendering menu items.\n   */\n  [propertyName: string]: any;\n}\n"]}