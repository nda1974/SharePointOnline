{"version":3,"file":"Dialog.js","sourceRoot":"../src/","sources":["components/Dialog/Dialog.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  css,\n  getId\n} from '../../Utilities';\nimport { IDialogProps } from './Dialog.Props';\nimport { DialogType } from './DialogContent.Props';\nimport { Modal } from '../../Modal';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\nimport * as stylesImport from './Dialog.scss';\nconst styles: any = stylesImport;\n\nimport { DialogContent } from './DialogContent';\n\n@withResponsiveMode\nexport class Dialog extends BaseComponent<IDialogProps, {}> {\n  public static defaultProps: IDialogProps = {\n    modalProps: {\n      isDarkOverlay: true,\n      isBlocking: false,\n      className: '',\n      containerClassName: ''\n    },\n    dialogContentProps: {\n      type: DialogType.normal,\n      className: '',\n      topButtonsProps: [],\n    },\n    hidden: true,\n  };\n\n  private _id: string;\n  private _defaultTitleTextId: string;\n  private _defaultSubTextId: string;\n\n  constructor(props: IDialogProps) {\n    super(props);\n\n    this._id = getId('Dialog');\n    this._defaultTitleTextId = this._id + '-title';\n    this._defaultSubTextId = this._id + '-subText';\n\n    this._warnDeprecations({\n      'isOpen': 'hidden',\n      'type': 'dialogContentProps.type',\n      'subText': 'dialogContentProps.subText',\n      'contentClassName': 'dialogContentProps.className',\n      'topButtonsProps': 'dialogContentProps.topButtonsProps',\n      'className': 'modalProps.className',\n      'isDarkOverlay': 'modalProps.isDarkOverlay',\n      'isBlocking': 'modalProps.isBlocking',\n      'containerClassName': 'modalProps.containerClassName',\n      'onDismissed': 'modalProps.onDismissed',\n      'onLayerDidMount': 'modalProps.onLayerDidMount',\n      'ariaDescribedById': 'modalProps.subtitleAriaId',\n      'ariaLabelledById': 'modalProps.titleAriaId'\n    });\n  }\n\n  public render() {\n    let {\n      ariaDescribedById,\n      ariaLabelledById,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      ignoreExternalFocusing,\n      isBlocking,\n      isClickableOutsideFocusTrap,\n      isDarkOverlay,\n      isOpen,\n      className,\n      onDismiss,\n      onDismissed,\n      onLayerDidMount,\n      onLayerMounted,\n      responsiveMode,\n      subText,\n      title,\n      type,\n      contentClassName,\n      topButtonsProps,\n      dialogContentProps,\n      modalProps,\n      containerClassName,\n      hidden\n    } = this.props;\n\n    return (\n      <Modal\n        elementToFocusOnDismiss={ elementToFocusOnDismiss }\n        firstFocusableSelector={ firstFocusableSelector }\n        forceFocusInsideTrap={ forceFocusInsideTrap }\n        ignoreExternalFocusing={ ignoreExternalFocusing }\n        isClickableOutsideFocusTrap={ isClickableOutsideFocusTrap }\n        onDismissed={ onDismissed }\n        onLayerDidMount={ onLayerDidMount }\n        responsiveMode={ responsiveMode }\n        { ...modalProps }\n        isDarkOverlay={ isDarkOverlay !== undefined ? isDarkOverlay : modalProps!.isDarkOverlay }\n        isBlocking={ isBlocking !== undefined ? isBlocking : modalProps!.isBlocking }\n        isOpen={ isOpen !== undefined ? isOpen : !hidden }\n        className={ css('ms-Dialog', className ? className : modalProps!.className) }\n        containerClassName={ css(styles.main, containerClassName ? containerClassName : modalProps!.containerClassName) }\n        onDismiss={ onDismiss ? onDismiss : modalProps!.onDismiss }\n        subtitleAriaId={ this._getSubTextId() }\n        titleAriaId={ this._getTitleTextId() }\n      >\n        <DialogContent\n          titleId={ this._defaultTitleTextId }\n          subTextId={ this._defaultSubTextId }\n          title={ title }\n          subText={ subText }\n          showCloseButton={ isBlocking !== undefined ? !isBlocking : !modalProps!.isBlocking }\n          topButtonsProps={ topButtonsProps ? topButtonsProps : dialogContentProps!.topButtonsProps }\n          type={ type !== undefined ? type : dialogContentProps!.type }\n          onDismiss={ onDismiss ? onDismiss : dialogContentProps!.onDismiss }\n          className={ css(contentClassName ? contentClassName : dialogContentProps!.className) }\n          { ...dialogContentProps }\n        >\n          { this.props.children }\n        </DialogContent>\n      </Modal>\n    );\n  }\n\n  private _getSubTextId = (): string | undefined => {\n    let { ariaDescribedById, modalProps, dialogContentProps, subText } = this.props;\n    let id = ariaDescribedById || (modalProps && modalProps.subtitleAriaId);\n\n    if (!id) {\n      id = (subText || (dialogContentProps && dialogContentProps.subText)) && this._defaultSubTextId;\n    }\n\n    return id;\n  }\n\n  private _getTitleTextId = (): string | undefined => {\n    let { ariaLabelledById, modalProps, dialogContentProps, title } = this.props;\n    let id = ariaLabelledById || (modalProps && modalProps.titleAriaId);\n\n    if (!id) {\n      id = (title || (dialogContentProps && dialogContentProps.title)) && this._defaultTitleTextId;\n    }\n\n    return id;\n  }\n}\n"]}