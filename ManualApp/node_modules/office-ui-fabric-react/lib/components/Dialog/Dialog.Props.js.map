{"version":3,"file":"Dialog.Props.js","sourceRoot":"../src/","sources":["components/Dialog/Dialog.Props.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { IModalProps } from '../../Modal';\nimport { Dialog } from './Dialog';\nimport { DialogType, IDialogContentProps } from './DialogContent.Props';\nimport { IButtonProps } from '../Button/Button.Props';\nimport { IWithResponsiveModeState } from '../../utilities/decorators/withResponsiveMode';\nimport { IAccessiblePopupProps } from '../../common/IAccessiblePopupProps';\n\nexport interface IDialog {\n\n}\n\nexport interface IDialogProps extends React.Props<Dialog>, IWithResponsiveModeState, IAccessiblePopupProps {\n\n  /**\n   * Optional callback to access the IDialog interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: IDialog) => void;\n\n  /**\n  * Props to be passed through to Dialog Content\n  */\n  dialogContentProps?: IDialogContentProps;\n\n  /**\n  * A callback function for when the Dialog is dismissed from the close button or light dismiss. Can also be specified separately in content and modal.\n  */\n  onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement>) => any;\n\n  /**\n  * Whether the dialog is hidden.\n  * @default false\n  */\n  hidden?: boolean;\n\n  /**\n  * Props to be passed through to Modal\n  */\n  modalProps?: IModalProps;\n\n  /**\n  * Whether the dialog is displayed.\n  * @default false\n  * @deprecated Use hidden instead\n  */\n  isOpen?: boolean;\n\n  /**\n  * Whether the overlay is dark themed.\n  * @default true\n  * @deprecated Pass through via modalProps instead\n  */\n  isDarkOverlay?: boolean;\n\n  /**\n   * A callback function which is called after the Dialog is dismissed and the animation is complete.\n   * @deprecated Pass through via modalProps instead\n   */\n  onDismissed?: () => any;\n\n  /**\n  * Whether the dialog can be light dismissed by clicking outside the dialog (on the overlay).\n  * @default false\n  * @deprecated Pass through via modalProps instead\n  */\n  isBlocking?: boolean;\n\n  /**\n   * Optional class name to be added to the root class\n   * @deprecated Pass through via modalProps.className instead\n   */\n  className?: string;\n\n  /**\n  * Optional override for container class\n  * @deprecated Pass through via modalProps.className instead\n  */\n  containerClassName?: string;\n\n  /**\n   * A callback function for when the Dialog content is mounted on the overlay layer\n   * @deprecated Pass through via modalProps instead\n   */\n  onLayerDidMount?: () => void;\n\n  /**\n * Deprecated at 0.81.2, use 'onLayerDidMount' instead.\n * @deprecated\n */\n  onLayerMounted?: () => void;\n\n  /**\n  * The type of Dialog to display.\n  * @default DialogType.normal\n  * @deprecated Pass through via dialogContentProps instead\n  */\n  type?: DialogType;\n\n  /**\n  * The title text to display at the top of the dialog.\n  * @deprecated Pass through via dialogContentProps instead\n  */\n  title?: string;\n\n  /**\n  * The subtext to display in the dialog.\n  * @deprecated Pass through via dialogContentProps instead\n  */\n  subText?: string;\n\n  /**\n  * Optional override content class\n  * @deprecated Pass through via dialogContentProps instead as className\n  */\n  contentClassName?: string;\n\n  /**\n   * Other top buttons that will show up next to the close button\n   * @deprecated Pass through via dialogContentProps instead\n   */\n  topButtonsProps?: IButtonProps[];\n\n  /**\n  * Optional id for aria-LabelledBy\n  * @deprecated Pass through via modalProps.titleAriaId instead\n  */\n  ariaLabelledById?: string;\n\n  /**\n  * Optional id for aria-DescribedBy\n  * @deprecated Pass through via modalProps.subtitleAriaId instead\n  */\n  ariaDescribedById?: string;\n\n}"]}