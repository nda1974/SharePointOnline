{"version":3,"file":"ProgressIndicator.js","sourceRoot":"../src/","sources":["components/ProgressIndicator/ProgressIndicator.tsx"],"names":[],"mappings":";;;AAAA,uCAAuC;AACvC,6BAA+B;AAC/B,sCAAsC;AAEtC,6CAGyB;AAEzB,uDAAyD;AACzD,IAAM,MAAM,GAAQ,YAAY,CAAC;AAEjC,sDAAsD;AACtD,mDAAmD;AACnD,IAAM,cAAc,GAAG,IAAI,CAAC;AAE5B;IAAuC,6CAA0C;IAQ/E,2BAAY,KAA8B;QAA1C,YACE,kBAAM,KAAK,CAAC,SAMb;QAJC,KAAI,CAAC,iBAAiB,CAAC;YACrB,KAAK,EAAE,OAAO;SACf,CAAC,CAAC;;IAEL,CAAC;IAEM,kCAAM,GAAb;QACM,IAAA,eAAqF,EAAnF,gBAAK,EAAE,gBAAK,EAAE,4BAAW,EAAE,oCAAe,EAAE,wBAAS,EAAE,gCAAa,CAAgB;QAE1F,2BAA2B;QAC3B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,KAAK,GAAG,KAAK,CAAC;QAChB,CAAC;QAED,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,eAAgB,GAAG,GAAG,CAAC,CAAC,CAAC;QAErE,MAAM,CAAC,CACL,6BAAK,SAAS,EAAG,eAAG,CAAC,sBAAsB,EAAE,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC;YAClE,6BAAK,SAAS,EAAG,eAAG,CAAC,+BAA+B,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAK,KAAK,CAAQ;YACxF,6BAAK,SAAS,EAAG,eAAG,CAAC,mCAAmC,EAAE,MAAM,CAAC,YAAY,CAAC;gBAC5E,6BAAK,SAAS,EAAG,eAAG,CAAC,oCAAoC,EAAE,MAAM,CAAC,aAAa,CAAC,GAAS;gBACzF,6BACE,SAAS,EAAG,eAAG,CACb,kCAAkC,EAClC,MAAM,CAAC,WAAW,EAClB,eAAe,GAAG,cAAc,IAAI,kBAAkB,CACvD,EACD,KAAK,EAAG,EAAE,KAAK,EAAE,eAAe,GAAG,GAAG,EAAE,EACxC,IAAI,EAAC,aAAa,mBACJ,GAAG,mBACH,KAAK,mBACH,eAAe,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,oBACnC,aAAa,GAC1B,CACF;YACN,6BAAK,SAAS,EAAG,eAAG,CAAC,sCAAsC,EAAE,MAAM,CAAC,eAAe,CAAC,IAAK,WAAW,CAAQ,CACxG,CACP,CAAC;IACJ,CAAC;IAhDa,8BAAY,GAAG;QAC3B,KAAK,EAAE,EAAE;QACT,WAAW,EAAE,EAAE;QACf,eAAe,EAAE,CAAC;QAClB,KAAK,EAAE,GAAG;KACX,CAAC;IA4CJ,wBAAC;CAAA,AAlDD,CAAuC,yBAAa,GAkDnD;AAlDY,8CAAiB","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport * as React from 'react';\n/* tslint:enable:no-unused-variable */\n\nimport {\n  BaseComponent,\n  css\n} from '../../Utilities';\nimport { IProgressIndicatorProps } from './ProgressIndicator.Props';\nimport * as stylesImport from './ProgressIndicator.scss';\nconst styles: any = stylesImport;\n\n// if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\nconst ZERO_THRESHOLD = 0.01;\n\nexport class ProgressIndicator extends BaseComponent<IProgressIndicatorProps, {}> {\n  public static defaultProps = {\n    label: '',\n    description: '',\n    percentComplete: 0,\n    width: 180\n  };\n\n  constructor(props: IProgressIndicatorProps) {\n    super(props);\n\n    this._warnDeprecations({\n      title: 'label'\n    });\n\n  }\n\n  public render() {\n    let { title, label, description, percentComplete, className, ariaValueText } = this.props;\n\n    // Handle deprecated value.\n    if (title) {\n      label = title;\n    }\n\n    percentComplete = Math.min(100, Math.max(0, percentComplete! * 100));\n\n    return (\n      <div className={ css('ms-ProgressIndicator', styles.root, className) }>\n        <div className={ css('ms-ProgressIndicator-itemName', styles.itemName) }>{ label }</div>\n        <div className={ css('ms-ProgressIndicator-itemProgress', styles.itemProgress) }>\n          <div className={ css('ms-ProgressIndicator-progressTrack', styles.progressTrack) }></div>\n          <div\n            className={ css(\n              'ms-ProgressIndicator-progressBar',\n              styles.progressBar,\n              percentComplete > ZERO_THRESHOLD && 'smoothTransition'\n            ) }\n            style={ { width: percentComplete + '%' } }\n            role='progressbar'\n            aria-valuemin='0'\n            aria-valuemax='100'\n            aria-valuenow={ percentComplete.toFixed().toString() }\n            aria-valuetext={ ariaValueText }>\n          </div>\n        </div>\n        <div className={ css('ms-ProgressIndicator-itemDescription', styles.itemDescription) }>{ description }</div>\n      </div>\n    );\n  }\n}\n"]}