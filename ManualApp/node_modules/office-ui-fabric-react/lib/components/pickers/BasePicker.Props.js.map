{"version":3,"file":"BasePicker.Props.js","sourceRoot":"../src/","sources":["components/pickers/BasePicker.Props.ts"],"names":[],"mappings":";;AAuLA,IAAY,eAIX;AAJD,WAAY,eAAe;IACzB,uDAAK,CAAA;IACL,2DAAO,CAAA;IACP,2DAAO,CAAA;AACT,CAAC,EAJW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAI1B","sourcesContent":["import * as React from 'react';\nimport { IPickerItemProps } from './PickerItem.Props';\nimport { IPersonaProps } from '../Persona/Persona.Props';\nimport { IRenderFunction } from '../../Utilities';\nimport { ISuggestionModel } from './Suggestions/SuggestionsController';\nimport { BaseAutoFill } from './AutoFill/BaseAutoFill';\n\nexport interface IBasePicker<T> {\n  /** Gets the current value of the input. */\n  items: T[] | undefined;\n\n  /** Sets focus to the input. */\n  focus: () => void;\n}\n\n// Type T is the type of the item that is displayed\n// and searched for by the people picker. For example, if the picker is\n// displaying persona's than type T could either be of Persona or Ipersona props\nexport interface IBasePickerProps<T> extends React.Props<any> {\n  componentRef?: (component?: IBasePicker<T>) => void;\n\n  /**\n   * Function that specifies how the selected item will appear.\n   */\n  onRenderItem?: (props: IPickerItemProps<T>) => JSX.Element;\n  /**\n   * Function that specifies how an individual suggestion item will appear.\n   */\n  onRenderSuggestionsItem?: (props: T, itemProps: any) => JSX.Element;\n  /**\n   * A callback for what should happen when a person types text into the input.\n   * Returns the already selected items so the resolver can filter them out.\n   */\n  onResolveSuggestions: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>;\n  /**\n   * A callback for what should happen when a user clicks the input.\n   */\n  onEmptyInputFocus?: (selectedItems?: T[]) => T[] | PromiseLike<T[]>;\n  /**\n   * Initial items that have already been selected and should appear in the people picker.\n   */\n  defaultSelectedItems?: T[];\n  /**\n   * A callback for when the selected list of items changes.\n   */\n  onChange?: (items?: T[]) => void;\n\n  /**\n   * A callback for when the user put focus on the picker\n   */\n  onFocus?: React.FocusEventHandler<HTMLInputElement | BaseAutoFill>;\n\n  /**\n   * A callback for when the user moves the focus away from the picker\n   */\n  onBlur?: React.FocusEventHandler<HTMLInputElement | BaseAutoFill>;\n\n  /**\n   * A callback to get text from an item. Used to autofill text in the pickers.\n   */\n  getTextFromItem?: (item: T, currentValue?: string) => string;\n  /**\n   * A callback that gets the rest of the results when a user clicks get more results.\n   */\n  onGetMoreResults?: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>;\n  /**\n   * ClassName for the picker.\n   */\n  className?: string;\n  /**\n   * The properties that will get passed to the Suggestions component.\n   */\n  pickerSuggestionsProps?: IBasePickerSuggestionsProps;\n  /**\n   * AutoFill input native props\n   * @default undefined\n   */\n  inputProps?: IInputProps;\n  /**\n   * A callback for when a persona is removed from the suggestion list\n   */\n  onRemoveSuggestion?: (item: IPersonaProps) => void;\n  /**\n   * A function used to validate if raw text entered into the well can be added into the selected items list\n   */\n  onValidateInput?: (input: string) => ValidationState;\n  /**\n   * The text to display while searching for more results in a limited suggestions list\n   */\n  searchingText?: ((props: { input: string }) => string) | string;\n  /**\n   * Flag for disabling the picker.\n   * @default false\n   */\n  disabled?: boolean;\n\n  /**\n   * Restrict the amount of selectable items.\n   * @default undefined\n   */\n  itemLimit?: number;\n  /**\n   * Function that specifies how arbitrary text entered into the well is handled.\n   */\n  createGenericItem?: (input: string, ValidationState: ValidationState) => ISuggestionModel<T>;\n  /**\n   * Aria label for the \"X\" button in the selected item component.\n   * @default ''\n   */\n  removeButtonAriaLabel?: string;\n  /**\n   * A callback to process a selection after the user selects something from the picker.\n   */\n  onItemSelected?: (selectedItem?: T) => T | PromiseLike<T>;\n  /**\n   * The items that the base picker should currently display as selected. If this is provided then the picker will act as a controlled component.\n   */\n  selectedItems?: T[];\n}\n\nexport interface IBasePickerSuggestionsProps {\n  /**\n  * Function that specifies what to render when no results are found.\n  */\n  onRenderNoResultFound?: IRenderFunction<void>;\n  /**\n   * The text that should appear at the top of the suggestion box.\n   */\n  suggestionsHeaderText?: string;\n  /**\n   * The text that should appear at the top of the most recenty used box.\n   */\n  mostRecentlyUsedHeaderText?: string;\n  /**\n   * the text that should appear when no results are returned.\n   */\n  noResultsFoundText?: string;\n  /**\n   * ClassName for the picker.\n   */\n  className?: string;\n  /**\n   * Classname for the suggestion box.\n   */\n  suggestionsClassName?: string;\n  /**\n   * ClassName for suggestion items.\n   */\n  suggestionsItemClassName?: string;\n  /**\n   * The text that should appear on the button to search for more.\n   */\n  searchForMoreText?: string;\n  /**\n   * The text to display while the results are loading.\n   */\n  loadingText?: string;\n  /**\n   * The text to display while searching for more results in a limited sugesstions list.\n   */\n  searchingText?: string;\n  /**\n   * A renderer that adds an element at the end of the suggestions list it has more items than resultsMaximumNumber.\n   */\n  resultsFooterFull?: () => JSX.Element;\n  /**\n   * A renderer that adds an element at the end of the suggestions list when there are fewer than resultsMaximumNumber.\n   */\n  resultsFooter?: () => JSX.Element;\n  /**\n   * Maximum number of suggestions to show in the full suggestion list.\n   */\n  resultsMaximumNumber?: number;\n  /**\n   * Indicates whether to show a button with each suggestion to remove that suggestion.\n   */\n  showRemoveButtons?: boolean;\n  /**\n   * Screen reader message to read when there are suggestions available.\n   */\n  suggestionsAvailableAlertText?: string;\n}\n\nexport enum ValidationState {\n  valid,\n  warning,\n  invalid\n}\n\nexport interface IInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Screen reader label to apply to an input element.\n   */\n  'aria-label'?: string;\n}"]}