{"version":3,"file":"Suggestions.Props.js","sourceRoot":"../src/","sources":["components/pickers/Suggestions/Suggestions.Props.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { ISuggestionModel } from './SuggestionsController';\nimport { IRenderFunction, KeyCodes } from '../../../Utilities';\nimport { IPersonaProps } from '../../Persona/Persona.Props';\n\nexport interface ISuggestionsProps<T> extends React.Props<any> {\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: () => void;\n\n  /**\n   * How the suggestion should look in the suggestion list.\n   */\n  onRenderSuggestion?: (props: T, suggestionItemProps: T) => JSX.Element;\n  /**\n   * What should occur when a suggestion is clicked\n   */\n  onSuggestionClick: (ev?: React.MouseEvent<HTMLElement>, item?: any, index?: number) => void;\n  /**\n   * The list of Suggestions that will be displayed\n   */\n  suggestions: ISuggestionModel<T>[];\n  /**\n  * How the \"no result found\" should look in the suggestion list.\n  */\n  onRenderNoResultFound?: IRenderFunction<void>;\n  /**\n   * The text that appears at the top of the suggestions list.\n   */\n  suggestionsHeaderText?: string;\n  /**\n   * The text that should appear at the top of the most recenty used box.\n   */\n  mostRecentlyUsedHeaderText?: string;\n  /**\n   * The text that appears indicating to the user that they can search for more results.\n   */\n  searchForMoreText?: string;\n  /**\n   * The callback that should be called when the user attempts to get more results\n   */\n  onGetMoreResults?: () => void;\n  /**\n   * The CSS classname of the suggestions list.\n   */\n  className?: string;\n  /**\n   * The text that should appear if there is a search error.\n   */\n  searchErrorText?: string;\n  /**\n   * The text that should appear if no results are found when searching.\n   */\n  noResultsFoundText?: string;\n  /**\n   * the classname of the suggestionitem.\n   */\n  suggestionsItemClassName?: string;\n  /**\n   * Used to indicate whether or not the user can request more suggestions.\n   * Dictates whether or not the searchForMore button is displayed.\n   */\n  moreSuggestionsAvailable?: boolean;\n  /**\n   * Used to indicate whether or not the suggestions are loading.\n   */\n  isLoading?: boolean;\n  /**\n   * Used to indicate whether or not the component is searching for more results.\n   */\n  isSearching?: boolean;\n  /**\n   * The text to display while the results are loading.\n   */\n  loadingText?: string;\n  /**\n   * The text to display while searching for more results in a limited sugesstions list.\n   */\n  searchingText?: string;\n  /**\n   * Indicates if a short list of recent suggestions should be shown.\n   */\n  isMostRecentlyUsedVisible?: boolean;\n  /**\n   * Function to fire when one of the optional remove buttons on a suggestion is clicked.\n   */\n  onSuggestionRemove?: (ev?: React.MouseEvent<HTMLElement>, item?: IPersonaProps, index?: number) => void;\n  /**\n   * Indicates if the text in resultsFooter or resultsFooterFull should be shown at the end of the suggestion list.\n   */\n  isResultsFooterVisible?: boolean;\n  /**\n   * Maximum number of suggestions to show in the full suggestion list.\n   */\n  resultsMaximumNumber?: number;\n  /**\n   * A renderer that adds an element at the end of the suggestions list it has more items than resultsMaximumNumber.\n   */\n  resultsFooterFull?: (props: ISuggestionsProps<T>) => JSX.Element;\n  /**\n   * A renderer that adds an element at the end of the suggestions list it has fewer items than resultsMaximumNumber.\n   */\n  resultsFooter?: (props: ISuggestionsProps<T>) => JSX.Element;\n  /**\n   * Indicates whether to show a button with each suggestion to remove that suggestion.\n   */\n  showRemoveButtons?: boolean;\n  /**\n   * Screen reader message to read when there are suggestions available.\n   */\n  suggestionsAvailableAlertText?: string;\n  /**\n   * A function that resets focus to the expected item in the suggestion list\n   */\n  refocusSuggestions?: (keyCode: KeyCodes) => void;\n}\n\nexport interface ISuggestionItemProps<T> {\n  componentRef?: () => void;\n  suggestionModel: ISuggestionModel<T>;\n  RenderSuggestion: (item: T, suggestionItemProps?: ISuggestionItemProps<T>) => JSX.Element;\n  onClick: (ev: React.MouseEvent<HTMLButtonElement>) => void;\n  onRemoveItem: (ev: React.MouseEvent<HTMLButtonElement>) => void;\n  className?: string;\n  id?: string;\n  showRemoveButton?: boolean;\n}"]}