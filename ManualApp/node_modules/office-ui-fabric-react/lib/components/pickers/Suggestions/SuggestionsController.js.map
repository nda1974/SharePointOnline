{"version":3,"file":"SuggestionsController.js","sourceRoot":"../src/","sources":["components/pickers/Suggestions/SuggestionsController.ts"],"names":[],"mappings":"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","sourcesContent":["export interface ISuggestionModel<T> {\n  item: T;\n  selected: boolean;\n}\n\nexport class SuggestionsController<T> {\n  public currentIndex: number;\n  public currentSuggestion: ISuggestionModel<T> | undefined;\n  public suggestions: ISuggestionModel<T>[];\n\n  constructor() {\n    this.suggestions = [];\n    this.currentIndex = -1;\n  }\n\n  public updateSuggestions(newSuggestions: T[], selectedIndex?: number) {\n    if (newSuggestions && newSuggestions.length > 0) {\n      this.suggestions = this.convertSuggestionsToSuggestionItems(newSuggestions);\n      this.currentIndex = 0;\n      if (selectedIndex !== undefined) {\n        this.suggestions[selectedIndex].selected = true;\n        this.currentSuggestion = this.suggestions[selectedIndex];\n      }\n    } else {\n      this.suggestions = [];\n      this.currentIndex = -1;\n      this.currentSuggestion = undefined;\n    }\n  }\n\n  /**\n   * Increments the suggestion index and gets the next suggestion in the list.\n   */\n  public nextSuggestion(): boolean {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex < (this.suggestions.length - 1)) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.currentIndex === (this.suggestions.length - 1)) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Decrements the suggestion index and gets the previous suggestion in the list.\n   */\n  public previousSuggestion(): boolean {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.currentIndex === 0) {\n        this.setSelectedSuggestion(this.suggestions.length - 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getSuggestions(): ISuggestionModel<T>[] {\n    return this.suggestions;\n  }\n\n  public getCurrentItem(): ISuggestionModel<T> {\n    return this.currentSuggestion!;\n  }\n\n  public getSuggestionAtIndex(index: number): ISuggestionModel<T> {\n    return this.suggestions[index];\n  }\n\n  public hasSelectedSuggestion(): boolean {\n    return this.currentSuggestion ? true : false;\n  }\n\n  public removeSuggestion(index: number) {\n    this.suggestions.splice(index, 1);\n  }\n\n  public createGenericSuggestion(itemToConvert: ISuggestionModel<T>) {\n    let itemToAdd = this.convertSuggestionsToSuggestionItems([itemToConvert])[0];\n    this.currentSuggestion = itemToAdd;\n  }\n\n  public convertSuggestionsToSuggestionItems(suggestions: any[]): ISuggestionModel<T>[] {\n    let converted: ISuggestionModel<T>[] = [];\n    suggestions.forEach((suggestion: any) => converted.push({ item: suggestion, selected: false }));\n    return converted;\n  }\n\n  public deselectAllSuggestions(): void {\n    this.currentIndex = -1;\n    this.suggestions[this.currentIndex].selected = false;\n  }\n\n  public setSelectedSuggestion(index: number): void {\n    if (index > this.suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion!.selected = false;\n      this.currentSuggestion = this.suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1) {\n        this.suggestions[this.currentIndex].selected = false;\n      }\n      this.suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = this.suggestions[index];\n    }\n  }\n}"]}