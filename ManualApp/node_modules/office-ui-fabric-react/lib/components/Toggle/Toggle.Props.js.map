{"version":3,"file":"Toggle.Props.js","sourceRoot":"../src/","sources":["components/Toggle/Toggle.Props.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { Toggle } from './Toggle';\nimport { IStyle, ITheme } from '../../Styling';\n\nexport interface IToggle {\n  focus: () => void;\n}\n\n/**\n * Toggle component props.\n */\nexport interface IToggleProps extends React.HTMLAttributes<HTMLElement | Toggle> {\n  /**\n   * Optional callback to access the IToggle interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: IToggle) => void;\n\n  /**\n   * A label for the toggle.\n   */\n  label?: string;\n\n  /**\n   * Text to display when toggle is ON.\n   */\n  onText?: string;\n\n  /**\n   * Text to display when toggle is OFF.\n   */\n  offText?: string;\n\n  /**\n   * Text for screen-reader to announce when toggle is ON.\n   */\n  onAriaLabel?: string;\n\n  /**\n   * Text for screen-reader to announce when toggle is OFF.\n   */\n  offAriaLabel?: string;\n\n  /**\n   * Checked state of the toggle. If you are maintaining state yourself, use this property. Otherwise refer to 'defaultChecked'.\n   */\n  checked?: boolean;\n\n  /**\n   * Initial state of the toggle. If you want the toggle to maintain its own state, use this. Otherwise refer to 'checked'.\n   */\n  defaultChecked?: boolean;\n\n  /**\n   * Optional disabled flag.\n   */\n  disabled?: boolean;\n\n  /**\n   * onchange callback.\n   */\n  onChanged?: (checked: boolean) => void;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Custom styles for this component\n   */\n  styles?: IToggleStyles;\n}\n\nexport interface IToggleStyles {\n  /**\n   * Style for the root element in the default enabled/unchecked state.\n   */\n  root?: IStyle;\n\n  /*\n   * Style for the text before the actual toggle switch.\n   */\n  label?: IStyle;\n\n  /**\n   * Style for the container wrapping switch and the state (on/off) text.\n   */\n  container?: IStyle;\n\n  /**\n   * Style for the toggle \"pill\" element, which is inside of the container and contains the thumb.\n   */\n  pill?: IStyle;\n\n  /**\n   * Style override for the pill element when enabled/checked.\n   */\n  pillChecked?: IStyle;\n\n  /**\n   * Style override for the pill element when enabled/unchecked/hovered.\n   */\n  pillHovered?: IStyle;\n\n  /**\n   * Style override for the pill element when enabled/checked/hovered.\n   */\n  pillCheckedHovered?: IStyle;\n\n  /**\n   * Style override for the pill element when disabled/unchecked.\n   */\n  pillDisabled?: IStyle;\n\n  /**\n   * Style override for the pill element when disabled/checked.\n   */\n  pillCheckedDisabled?: IStyle;\n\n  /**\n   * Style for the thumb element inside of the pill, in the normal unchecked enabled state.\n   */\n  thumb?: IStyle;\n\n  /**\n   * Style override for the thumb when enabled/unchecked/hovered.\n   */\n  thumbHovered?: IStyle;\n\n  /**\n   * Style override for the thumb when enabled/checked.\n   */\n  thumbChecked?: IStyle;\n\n  /**\n   * Style override for the thumb when enabled/checked/hovered.\n   */\n  thumbCheckedHovered?: IStyle;\n\n  /**\n   * Style override for the thumb when disabled/unchecked.\n   */\n  thumbDisabled?: IStyle;\n\n  /**\n   * Style override for the thumb when disabled/checked.\n   */\n  thumbCheckedDisabled?: IStyle;\n\n  /**\n   * Style for the text indicating the on/off state of the control.\n   */\n  text?: IStyle;\n}\n"]}