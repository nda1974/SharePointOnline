{"version":3,"file":"Toggle.js","sourceRoot":"../src/","sources":["components/Toggle/Toggle.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  autobind,\n  getId,\n  inputProperties,\n  getNativeProps,\n  memoize\n} from '../../Utilities';\nimport {\n  IToggleProps,\n  IToggle,\n  IToggleStyles\n} from './Toggle.Props';\nimport { Label } from '../../Label';\nimport {\n  customizable\n} from '../../Utilities';\nimport {\n  mergeStyles\n} from '../../Styling';\nimport { getClassNames } from './Toggle.classNames';\n\nexport interface IToggleState {\n  isChecked: boolean;\n}\n\n@customizable(['theme'])\nexport class Toggle extends BaseComponent<IToggleProps, IToggleState> implements IToggle {\n\n  private _id: string;\n  private _toggleButton: HTMLButtonElement;\n\n  constructor(props: IToggleProps) {\n    super();\n\n    this._warnMutuallyExclusive({\n      checked: 'defaultChecked'\n    });\n\n    this.state = {\n      isChecked: !!(props.checked || props.defaultChecked)\n    };\n    this._id = props.id || getId('Toggle');\n  }\n\n  /**\n   * Gets the current checked state of the toggle.\n   */\n  public get checked(): boolean {\n    return this.state.isChecked;\n  }\n\n  public componentWillReceiveProps(newProps: IToggleProps) {\n    if (newProps.checked !== undefined) {\n      this.setState({\n        isChecked: !!newProps.checked // convert null to false\n      });\n    }\n  }\n\n  public render() {\n    // This control is using an input element for more universal accessibility support.\n    // Previously a button and the aria-pressed attribute were used. This technique works well with Narrator + Edge and NVDA + FireFox.\n    // However, JAWS and VoiceOver did not announce anything when the toggle was checked or unchecked.\n    // In the future when more screenreaders support aria-pressed it would be a good idea to change this control back to using it as it is\n    // more semantically correct.\n\n    let {\n      className,\n      theme,\n      styles: customStyles,\n      disabled,\n      label,\n      offAriaLabel,\n      offText,\n      onAriaLabel,\n      onText\n      } = this.props;\n    let { isChecked } = this.state;\n    let stateText = isChecked ? onText : offText;\n    const ariaLabel = isChecked ? onAriaLabel : offAriaLabel;\n    const toggleNativeProps = getNativeProps(this.props, inputProperties, ['defaultChecked']);\n    const classNames = getClassNames(\n      theme!,\n      customStyles!,\n      className!,\n      disabled!,\n      isChecked\n    );\n\n    return (\n      <div className={ classNames.root }>\n\n        { label && (\n          <Label htmlFor={ this._id } className={ classNames.label }>{ label }</Label>\n        ) }\n\n        <div className={ classNames.container } >\n          <button\n            { ...toggleNativeProps }\n            className={ classNames.pill }\n            disabled={ disabled }\n            id={ this._id }\n            type='button'\n            ref={ this._resolveRef('_toggleButton') }\n            aria-disabled={ disabled }\n            aria-pressed={ isChecked }\n            aria-label={ ariaLabel }\n            data-is-focusable={ true }\n            onChange={ () => { /* no-op */ } }\n            onClick={ this._onClick }\n          >\n            <div className={ classNames.thumb } />\n          </button>\n          { stateText && (\n            <Label htmlFor={ this._id } className={ classNames.text }>{ stateText }</Label>\n          ) }\n        </div>\n      </div >\n    );\n  }\n\n  public focus() {\n    if (this._toggleButton) {\n      this._toggleButton.focus();\n    }\n  }\n\n  @autobind\n  private _onClick(ev: React.MouseEvent<HTMLElement>) {\n    let { disabled, checked, onChanged, onClick } = this.props;\n    let { isChecked } = this.state;\n\n    if (!disabled) {\n      // Only update the state if the user hasn't provided it.\n      if (checked === undefined) {\n        this.setState({\n          isChecked: !isChecked\n        });\n      }\n\n      if (onChanged) {\n        onChanged(!isChecked);\n      }\n\n      if (onClick) {\n        onClick(ev);\n      }\n    }\n  }\n\n}\n"]}