{"version":3,"file":"Image.js","sourceRoot":"../src/","sources":["components/Image/Image.tsx"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport * as React from 'react';\n/* tslint:enable:no-unused-variable */\nimport {\n  autobind,\n  BaseComponent,\n  css,\n  getNativeProps,\n  imageProperties\n} from '../../Utilities';\nimport { IImageProps, ImageFit, ImageLoadState, ImageCoverStyle } from './Image.Props';\nimport { AnimationClassNames } from '../../Styling';\nimport * as stylesImport from './Image.scss';\nconst styles: any = stylesImport;\n\nexport interface IImageState {\n  loadState?: ImageLoadState;\n}\n\nexport const CoverStyleMap = {\n  [ImageCoverStyle.landscape]: 'ms-Image-image--landscape ' + styles.imageIsLandscape,\n  [ImageCoverStyle.portrait]: 'ms-Image-image--portrait ' + styles.imageIsPortrait\n};\n\nexport const ImageFitMap = {\n  [ImageFit.center]: 'ms-Image-image--center ' + styles.imageIsCenter,\n  [ImageFit.contain]: 'ms-Image-image--contain ' + styles.imageIsContain,\n  [ImageFit.cover]: 'ms-Image-image--cover ' + styles.imageIsCover,\n  [ImageFit.none]: 'ms-Image-image--none ' + styles.imageIsNone\n};\n\nconst KEY_PREFIX: string = 'fabricImage';\n\nexport class Image extends BaseComponent<IImageProps, IImageState> {\n  public static defaultProps = {\n    shouldFadeIn: true\n  };\n\n  private static _svgRegex = /\\.svg$/i;\n\n  // Make an initial assumption about the image layout until we can\n  // check the rendered element. The value here only takes effect when\n  // shouldStartVisible is true.\n  private _coverStyle: ImageCoverStyle = ImageCoverStyle.portrait;\n  private _imageElement: HTMLImageElement;\n  private _frameElement: HTMLDivElement;\n\n  constructor(props: IImageProps) {\n    super(props);\n\n    this.state = {\n      loadState: ImageLoadState.notLoaded\n    };\n  }\n\n  public componentWillReceiveProps(nextProps: IImageProps) {\n    if (nextProps.src !== this.props.src) {\n      this.setState({\n        loadState: ImageLoadState.notLoaded\n      });\n    } else if (this.state.loadState === ImageLoadState.loaded) {\n      this._computeCoverStyle(nextProps);\n    }\n  }\n\n  public componentDidUpdate(prevProps: IImageProps, prevState: IImageState) {\n    this._checkImageLoaded();\n    if (this.props.onLoadingStateChange\n      && prevState.loadState !== this.state.loadState) {\n      this.props.onLoadingStateChange(this.state.loadState!);\n    }\n  }\n\n  public render() {\n    let imageProps = getNativeProps(this.props, imageProperties, ['width', 'height']);\n    let { src, alt, width, height, shouldFadeIn, className, imageFit, role, maximizeFrame } = this.props;\n    let { loadState } = this.state;\n    let coverStyle = this.props.coverStyle !== undefined ? this.props.coverStyle : this._coverStyle;\n    let loaded = loadState === ImageLoadState.loaded || (loadState === ImageLoadState.notLoaded && this.props.shouldStartVisible);\n\n    // If image dimensions aren't specified, the natural size of the image is used.\n    return (\n      <div\n        className={ css(\n          'ms-Image',\n          styles.root,\n          className,\n          {\n            ['ms-Image--maximizeFrame ' + styles.rootIsMaximizeFrame]: maximizeFrame\n          })\n        }\n        style={ { width: width, height: height } }\n        ref={ this._resolveRef('_frameElement') }\n      >\n        <img\n          { ...imageProps }\n          onLoad={ this._onImageLoaded }\n          onError={ this._onImageError }\n          key={ KEY_PREFIX + this.props.src || '' }\n          className={\n            css(\n              'ms-Image-image',\n              styles.image,\n              CoverStyleMap[coverStyle],\n              (imageFit !== undefined) && ImageFitMap[imageFit],\n              !loaded && 'is-notLoaded',\n              loaded && 'is-loaded ' + styles.imageIsLoaded,\n              shouldFadeIn && 'is-fadeIn',\n              loadState === ImageLoadState.error && 'is-error',\n              loaded && shouldFadeIn && AnimationClassNames.fadeIn400,\n              {\n                ['ms-Image-image--scaleWidth ' + styles.imageIsScaleWidth]: (imageFit === undefined && !!width && !height),\n                ['ms-Image-image--scaleHeight ' + styles.imageIsScaleHeight]: (imageFit === undefined && !width && !!height),\n                ['ms-Image-image--scaleWidthHeight ' + styles.imageIsScaleWidthHeight]: (imageFit === undefined && !!width && !!height)\n              }) }\n          ref={ this._resolveRef('_imageElement') }\n          src={ src }\n          alt={ alt }\n          role={ role }\n        />\n      </div>\n    );\n  }\n\n  @autobind\n  private _onImageLoaded(ev: React.SyntheticEvent<HTMLImageElement>): void {\n    let { src, onLoad } = this.props;\n    if (onLoad) {\n      onLoad(ev);\n    }\n\n    this._computeCoverStyle(this.props);\n\n    if (src) {\n      this.setState({\n        loadState: ImageLoadState.loaded\n      });\n    }\n  }\n\n  private _checkImageLoaded(): void {\n    let { src } = this.props;\n    let { loadState } = this.state;\n\n    if (loadState === ImageLoadState.notLoaded) {\n      // testing if naturalWidth and naturalHeight are greater than zero is better than checking\n      // .complete, because .complete will also be set to true if the image breaks. However,\n      // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back\n      // to checking .complete for these images.\n      let isLoaded: boolean = src && this._imageElement && (this._imageElement.naturalWidth > 0 && this._imageElement.naturalHeight > 0) ||\n        (this._imageElement.complete && Image._svgRegex.test(src!));\n\n      if (isLoaded) {\n        this._computeCoverStyle(this.props);\n        this.setState({\n          loadState: ImageLoadState.loaded\n        });\n      }\n    }\n  }\n\n  private _computeCoverStyle(props: IImageProps) {\n    let { imageFit, width, height } = props;\n\n    // Do not compute cover style if it was already specified in props\n    if ((imageFit === ImageFit.cover || imageFit === ImageFit.contain) &&\n      this.props.coverStyle === undefined &&\n      this._imageElement) {\n      // Determine the desired ratio using the width and height props.\n      // If those props aren't available, measure measure the frame.\n      let desiredRatio;\n      if (!!width && !!height) {\n        desiredRatio = (width as number) / (height as number);\n      } else {\n        desiredRatio = this._frameElement.clientWidth / this._frameElement.clientHeight;\n      }\n\n      // Examine the source image to determine its original ratio.\n      let naturalRatio = this._imageElement.naturalWidth / this._imageElement.naturalHeight;\n\n      // Should we crop from the top or the sides?\n      if (naturalRatio > desiredRatio) {\n        this._coverStyle = ImageCoverStyle.landscape;\n      } else {\n        this._coverStyle = ImageCoverStyle.portrait;\n      }\n    }\n  }\n\n  @autobind\n  private _onImageError(ev: React.SyntheticEvent<HTMLImageElement>) {\n    if (this.props.onError) {\n      this.props.onError(ev);\n    }\n    this.setState({\n      loadState: ImageLoadState.error\n    });\n  }\n}\n"]}