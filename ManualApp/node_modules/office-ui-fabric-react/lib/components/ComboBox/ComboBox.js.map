{"version":3,"file":"ComboBox.js","sourceRoot":"../src/","sources":["components/ComboBox/ComboBox.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IComboBoxOption, IComboBoxProps } from './ComboBox.Props';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { Callout } from '../../Callout';\nimport { Label } from '../../Label';\nimport {\n  CommandButton,\n  IconButton\n} from '../../Button';\nimport { BaseAutoFill } from '../pickers/AutoFill/BaseAutoFill';\nimport {\n  autobind,\n  BaseComponent,\n  divProperties,\n  findIndex,\n  getId,\n  getNativeProps,\n  KeyCodes,\n} from '../../Utilities';\nimport { SelectableOptionMenuItemType, ISelectableOption } from '../../utilities/selectableOption/SelectableOption.Props';\n\nimport {\n  customizable,\n} from '../../Utilities';\nimport {\n  getStyles,\n  getOptionStyles,\n  getCaretDownButtonStyles\n} from './ComboBox.styles';\nimport {\n  IComboBoxClassNames,\n  getClassNames,\n} from './ComboBox.classNames';\n\nexport interface IComboBoxState {\n\n  // The open state\n  isOpen?: boolean;\n\n  // The currently selected index (-1 if no index is selected)\n  selectedIndex: number;\n\n  // The focused state of the comboBox\n  focused?: boolean;\n\n  // This value is used for the autocomplete hint value\n  suggestedDisplayValue?: string;\n\n  // The options currently available for the callout\n  currentOptions: IComboBoxOption[];\n\n  // when taking input, this will store the index the\n  // that the options input matches (-1 if no input or match)\n  currentPendingValueValidIndex: number;\n\n  // when taking input, this will store\n  // the actual text that is being entered\n  currentPendingValue: string;\n}\n\nenum SearchDirection {\n  backward = -1,\n  none = 0,\n  forward = 1\n}\n\n@customizable(['theme'])\nexport class ComboBox extends BaseComponent<IComboBoxProps, IComboBoxState> {\n\n  public static defaultProps: IComboBoxProps = {\n    options: [],\n    allowFreeform: false,\n    autoComplete: 'on',\n    buttonIconProps: { iconName: 'ChevronDown' }\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance,\n    root: HTMLElement\n  };\n\n  // The input aspect of the comboBox\n  private _comboBox: BaseAutoFill;\n\n  // The wrapping div of the input and button\n  private _comboBoxWrapper: HTMLDivElement;\n\n  // The callout element\n  private _comboBoxMenu: HTMLElement;\n\n  // The menu item element that is currently selected\n  private _selectedElement: HTMLElement;\n\n  // The base id for the comboBox\n  private _id: string;\n\n  // This is used to clear any pending autocomplete\n  // text (used when autocomplete is true and allowFreeform is false)\n  private readonly _readOnlyPendingAutoCompleteTimeout: number = 1000 /* ms */;\n\n  // After a character is inserted when autocomplete is true and\n  // allowFreeform is false, remember the task that will clear\n  // the pending string of characters\n  private _lastReadOnlyAutoCompleteChangeTimeoutId: number;\n\n  // Promise used when resolving the comboBox options\n  private _currentPromise: PromiseLike<IComboBoxOption[]>;\n\n  // The current visible value sent to the auto fill on render\n  private _currentVisibleValue: string | undefined;\n\n  private _classNames: IComboBoxClassNames;\n\n  constructor(props: IComboBoxProps) {\n    super(props);\n\n    this._warnMutuallyExclusive({\n      'defaultSelectedKey': 'selectedKey',\n      'value': 'defaultSelectedKey',\n      'selectedKey': 'value'\n    });\n\n    this._id = props.id || getId('ComboBox');\n\n    let selectedKey = props.defaultSelectedKey !== undefined ? props.defaultSelectedKey : props.selectedKey;\n    this._lastReadOnlyAutoCompleteChangeTimeoutId = -1;\n\n    let index: number = this._getSelectedIndex(props.options, selectedKey);\n\n    this.state = {\n      isOpen: false,\n      selectedIndex: index,\n      focused: false,\n      suggestedDisplayValue: '',\n      currentOptions: this.props.options,\n      currentPendingValueValidIndex: -1,\n      currentPendingValue: ''\n    };\n  }\n\n  public componentDidMount() {\n    // hook up resolving the options if needed on focus\n    this._events.on(this._comboBoxWrapper, 'focus', this._onResolveOptions, true);\n  }\n\n  public componentWillReceiveProps(newProps: IComboBoxProps) {\n    // Update the selectedIndex and currentOptions state if\n    // the selectedKey, value, or options have changed\n    if (newProps.selectedKey !== this.props.selectedKey ||\n      newProps.value !== this.props.value ||\n      newProps.options !== this.props.options) {\n      let index: number = this._getSelectedIndex(newProps.options, newProps.selectedKey);\n      this.setState({\n        selectedIndex: index,\n        currentOptions: newProps.options\n      });\n    }\n  }\n\n  public componentDidUpdate(prevProps: IComboBoxProps, prevState: IComboBoxState) {\n    let {\n      allowFreeform,\n      value\n    } = this.props;\n    let {\n      isOpen,\n      focused,\n      selectedIndex,\n      currentPendingValueValidIndex\n    } = this.state;\n\n    // If we are newly open or are open and the pending valid index changed,\n    // make sure the currently selected/pending option is scrolled into view\n    if (isOpen &&\n      (!prevState.isOpen ||\n        prevState.currentPendingValueValidIndex !== currentPendingValueValidIndex)) {\n      this._scrollIntoView();\n    }\n\n    // If we are open or we are focused but are not the activeElement,\n    // set focus on the input\n    if (isOpen || (focused && document.activeElement !== this._comboBox.inputElement)) {\n      this.focus();\n    }\n\n    // If we just opened/closed the menu OR\n    // are focused AND\n    //   updated the selectedIndex with the menu closed OR\n    //   are not allowing freeform OR\n    //   the value changed\n    // we need to set selection\n    if (prevState.isOpen !== isOpen ||\n      (focused &&\n        ((!isOpen && prevState.selectedIndex !== selectedIndex) ||\n          !allowFreeform ||\n          value !== prevProps.value)\n      )) {\n      this._select();\n    }\n  }\n\n  public componentWillUnmount() {\n    super.componentWillUnmount();\n\n    // remove the eventHanlder that was added in componentDidMount\n    this._events.off(this._comboBoxWrapper);\n  }\n\n  // Primary Render\n  public render() {\n    let id = this._id;\n    let {\n      className,\n      label,\n      disabled,\n      ariaLabel,\n      required,\n      errorMessage,\n      onRenderContainer = this._onRenderContainer,\n      allowFreeform,\n      autoComplete,\n      buttonIconProps,\n      styles: customStyles,\n      theme,\n    } = this.props;\n    let { isOpen, selectedIndex, focused, suggestedDisplayValue } = this.state;\n    this._currentVisibleValue = this._getVisibleValue();\n\n    let divProps = getNativeProps(this.props, divProperties);\n\n    let hasErrorMessage = (errorMessage && errorMessage.length > 0) ? true : false;\n\n    this._classNames = getClassNames(\n      getStyles(theme!, customStyles),\n      className!,\n      !!isOpen,\n      !!disabled,\n      !!required,\n      !!focused,\n      !!allowFreeform,\n      !!hasErrorMessage\n    );\n\n    return (\n      <div {...divProps } ref='root' className={ this._classNames.container }>\n        { label && (\n          <Label id={ id + '-label' } required={ required } htmlFor={ id } className={ this._classNames.label }>{ label }</Label>\n        ) }\n        <div\n          ref={ this._resolveRef('_comboBoxWrapper') }\n          id={ id + 'wrapper' }\n          className={ this._classNames.root }\n        >\n          <BaseAutoFill\n            data-is-interactable={ !disabled }\n            ref={ this._resolveRef('_comboBox') }\n            id={ id + '-input' }\n            className={ this._classNames.input }\n            type='text'\n            onFocus={ this._select }\n            onBlur={ this._onBlur }\n            onKeyDown={ this._onInputKeyDown }\n            onKeyUp={ this._onInputKeyUp }\n            onClick={ allowFreeform ? this.focus : this._onComboBoxClick }\n            onInputValueChange={ this._onInputChange }\n            aria-expanded={ isOpen }\n            aria-autocomplete={ (!disabled && autoComplete === 'on') }\n            role='combobox'\n            aria-readonly={ ((allowFreeform || disabled) ? null : 'true') }\n            readOnly={ disabled || !allowFreeform }\n            aria-labelledby={ (label && (id + '-label')) }\n            aria-label={ ((ariaLabel && !label) && ariaLabel) }\n            aria-describedby={ (id + '-option') }\n            aria-activedescendant={ (isOpen && (selectedIndex as number) >= 0 ? (id + '-list' + selectedIndex) : null) }\n            aria-disabled={ disabled }\n            aria-owns={ (id + '-list') }\n            spellCheck={ false }\n            defaultVisibleValue={ this._currentVisibleValue }\n            suggestedDisplayValue={ suggestedDisplayValue }\n            updateValueInWillReceiveProps={ this._onUpdateValueInAutoFillWillReceiveProps }\n            shouldSelectFullInputValueInComponentDidUpdate={ this._onShouldSelectFullInputValueInAutoFillComponentDidUpdate } />\n          <IconButton\n            className={ 'ms-ComboBox-CaretDown-button' }\n            styles={ this._getCaretButtonStyles() }\n            role='presentation'\n            aria-hidden='true'\n            tabIndex={ -1 }\n            onClick={ this._onComboBoxClick }\n            iconProps={ buttonIconProps }\n            disabled={ disabled } />\n        </div>\n\n        { isOpen && (\n          (onRenderContainer as any)({ ...this.props as any }, this._onRenderContainer)\n        ) }\n        {\n          errorMessage &&\n          <div\n            className={ this._classNames.errorMessage }>\n            { errorMessage }\n          </div>\n        }\n      </div>\n    );\n  }\n\n  /**\n   * Set focus on the input\n   */\n  @autobind\n  public focus() {\n    if (this._comboBox) {\n      this._comboBox.focus();\n    }\n  }\n\n  /**\n   * componentWillReceiveProps handler for the auto fill component\n   * Checks/updates the iput value to set, if needed\n   * @param {IBaseAutoFillProps} defaultVisibleValue - the defaultVisibleValue that got passed\n   *  in to the auto fill's componentWillReceiveProps\n   * @returns {string} - the updated value to set, if needed\n   */\n  @autobind\n  private _onUpdateValueInAutoFillWillReceiveProps(): string | null {\n    if (this._comboBox === null || this._comboBox === undefined) {\n      return null;\n    }\n\n    if (this._currentVisibleValue && this._currentVisibleValue !== '' && this._comboBox.value !== this._currentVisibleValue) {\n      return this._currentVisibleValue;\n    }\n\n    return this._comboBox.value;\n  }\n\n  /**\n   * componentDidUpdate handler for the auto fill component\n   *\n   * @param { string } defaultVisibleValue - the current defaultVisibleValue in the auto fill's componentDidUpdate\n   * @param { string } suggestedDisplayValue - the current suggestedDisplayValue in the auto fill's componentDidUpdate\n   * @returns {boolean} - should the full value of the input be selected?\n   * True if the defaultVisibleValue equals the suggestedDisplayValue, false otherwise\n   */\n  @autobind\n  private _onShouldSelectFullInputValueInAutoFillComponentDidUpdate(): boolean {\n    return this._currentVisibleValue === this.state.suggestedDisplayValue;\n  }\n\n  /**\n   * Get the correct value to pass to the input\n   * to show to the user based off of the current props and state\n   * @returns {string} the value to pass to the input\n   */\n  @autobind\n  private _getVisibleValue(): string | undefined {\n    let {\n      value,\n      allowFreeform,\n      autoComplete\n    } = this.props;\n    let {\n      selectedIndex,\n      currentPendingValueValidIndex,\n      currentOptions,\n      currentPendingValue,\n      suggestedDisplayValue,\n      isOpen\n    } = this.state;\n\n    let currentPendingIndexValid = this._indexWithinBounds(currentOptions, currentPendingValueValidIndex);\n\n    // If the user passed is a value prop, use that\n    // unless we are open and have a valid current pending index\n    if (!(isOpen && currentPendingIndexValid) && value) {\n      return value;\n    }\n\n    let index = selectedIndex;\n\n    if (allowFreeform) {\n\n      // If we are allowing freeform and autocomplete is also true\n      // and we've got a pending value that matches an option, remember\n      // the matched option's index\n      if (autoComplete === 'on' && currentPendingIndexValid) {\n        index = currentPendingValueValidIndex;\n      }\n\n      // Since we are allowing freeform, if there is currently a nonempty pending value, use that\n      // otherwise use the index determined above (falling back to '' if we did not get a valid index)\n      return currentPendingValue !== '' ? currentPendingValue :\n        (this._indexWithinBounds(currentOptions, index) ? currentOptions[index].text : '');\n    } else {\n\n      // If we are not allowing freeform and have a\n      // valid index that matches the pending value,\n      // we know we will need some version of the pending value\n      if (currentPendingIndexValid) {\n\n        // If autoComplete is on, return the\n        // raw pending value, otherwise remember\n        // the matched option's index\n        if (autoComplete === 'on') {\n          return currentPendingValue;\n        }\n\n        index = currentPendingValueValidIndex;\n      }\n\n      // If we have a valid index then return the text value of that option,\n      // otherwise return the suggestedDisplayValue\n      return this._indexWithinBounds(currentOptions, index) ? currentOptions[index].text : suggestedDisplayValue;\n    }\n  }\n\n  /**\n   * Is the index within the bounds of the array?\n   * @param options - options to check if the index is valid for\n   * @param index - the index to check\n   * @returns {boolean} - true if the index is valid for the given options, false otherwise\n   */\n  private _indexWithinBounds(options: IComboBoxOption[] | undefined, index: number): boolean {\n    if (!options) {\n      return false;\n    }\n    return index >= 0 && index < options.length;\n  }\n\n  /**\n   * Handler for typing changes on the input\n   * @param updatedValue - the newly changed value\n   */\n  @autobind\n  private _onInputChange(updatedValue: string) {\n    if (this.props.disabled) {\n      this._handleInputWhenDisabled(null /* event */);\n      return;\n    }\n\n    this.props.allowFreeform ?\n      this._processInputChangeWithFreeform(updatedValue) :\n      this._processInputChangeWithoutFreeform(updatedValue);\n  }\n\n  /**\n   * Process the new input's new value when the comboBox\n   * allows freeform entry\n   * @param updatedValue - the input's newly changed value\n   */\n  private _processInputChangeWithFreeform(updatedValue: string) {\n    let {\n      currentOptions\n    } = this.state;\n\n    // if the new value is empty, nothing needs to be done\n    if (updatedValue === '') {\n      return;\n    }\n\n    // Remember the original value and then,\n    // make the value lowercase for comparison\n    let originalUpdatedValue: string = updatedValue;\n    updatedValue = updatedValue.toLocaleLowerCase();\n\n    let newSuggestedDisplayValue = '';\n    let newCurrentPendingValueValidIndex = -1;\n\n    // If autoComplete is on, attempt to find a match from the available options\n    if (this.props.autoComplete === 'on') {\n\n      // If autoComplete is on, attempt to find a match where the text of an option starts with the updated value\n      let items = currentOptions.map((item, index) => { return { ...item, index }; }).filter((option) => option.itemType !== SelectableOptionMenuItemType.Header && option.itemType !== SelectableOptionMenuItemType.Divider).filter((option) => option.text.toLocaleLowerCase().indexOf(updatedValue) === 0);\n      if (items.length > 0) {\n        // If the user typed out the complete option text, we don't need any suggested display text anymore\n        newSuggestedDisplayValue = items[0].text.toLocaleLowerCase() !== updatedValue ? items[0].text : '';\n\n        // remember the index of the match we found\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n    } else {\n\n      // If autoComplete is off, attempt to find a match only when the value is exactly equal to the text of an option\n      let items = currentOptions.map((item, index) => { return { ...item, index }; }).filter((option) => option.itemType !== SelectableOptionMenuItemType.Header && option.itemType !== SelectableOptionMenuItemType.Divider).filter((option) => option.text.toLocaleLowerCase() === updatedValue);\n\n      // if we fould a match remember the index\n      if (items.length === 1) {\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n    }\n\n    // Set the updated state\n    this._setPendingInfo(originalUpdatedValue, newCurrentPendingValueValidIndex, newSuggestedDisplayValue);\n  }\n\n  /**\n   * Process the new input's new value when the comboBox\n   * does not allow freeform entry\n   * @param updatedValue - the input's newly changed value\n   */\n  private _processInputChangeWithoutFreeform(updatedValue: string) {\n    let {\n      currentPendingValue,\n      currentPendingValueValidIndex,\n      currentOptions,\n      selectedIndex\n    } = this.state;\n\n    if (this.props.autoComplete === 'on') {\n\n      // If autoComplete is on while allow freeform is off,\n      // we will remember the keypresses and build up a string to attempt to match\n      // as long as characters are typed within a the timeout span of each other,\n      // otherwise we will clear the string and start building a new one on the next keypress.\n      // Also, only do this processing if we have a non-empty value\n      if (updatedValue !== '') {\n\n        // If we have a pending autocomplete clearing task,\n        // we know that the user is typing with keypresses happening\n        // within the timeout of each other so remove the clearing task\n        // and continue building the pending value with the udpated value\n        if (this._lastReadOnlyAutoCompleteChangeTimeoutId > 0) {\n          this._async.clearTimeout(this._lastReadOnlyAutoCompleteChangeTimeoutId);\n          this._lastReadOnlyAutoCompleteChangeTimeoutId = -1;\n          updatedValue = currentPendingValue + updatedValue;\n        }\n\n        let originalUpdatedValue: string = updatedValue;\n        updatedValue = updatedValue.toLocaleLowerCase();\n\n        // If autoComplete is on, attempt to find a match where the text of an option starts with the updated value\n        let items = currentOptions.map((item, i) => { return { ...item, index: i }; }).filter((option) => option.itemType !== SelectableOptionMenuItemType.Header && option.itemType !== SelectableOptionMenuItemType.Divider).filter((option) => option.text.toLocaleLowerCase().indexOf(updatedValue) === 0);\n\n        // If we found a match, udpdate the state\n        if (items.length > 0) {\n          this._setPendingInfo(originalUpdatedValue, items[0].index, items[0].text);\n        }\n\n        // Schedule a timeout to clear the pending value after the timeout span\n        this._lastReadOnlyAutoCompleteChangeTimeoutId =\n          this._async.setTimeout(\n            () => { this._lastReadOnlyAutoCompleteChangeTimeoutId = -1; },\n            this._readOnlyPendingAutoCompleteTimeout\n          );\n        return;\n      }\n    }\n\n    // If we get here, either autoComplete is on or we did not find a match with autoComplete on.\n    // Remember we are not allowing freeform, so at this point, if we have a pending valid value index\n    // use that; otherwise use the selectedIndex\n    let index = currentPendingValueValidIndex >= 0 ? currentPendingValueValidIndex : selectedIndex;\n\n    // Since we are not allowing freeform, we need to\n    // set both the pending and suggested values/index\n    // to allow us to select all content in the input to\n    // give the illusion that we are readonly (e.g. freeform off)\n    this._setPendingInfoFromIndex(index);\n  }\n\n  /**\n   * Walk along the options starting at the index, stepping by the delta (positive or negative)\n   * looking for the next valid selectable index (e.g. skipping headings and dividers)\n   * @param index - the index to get the next selectable index from\n   * @param delta - optional delta to step by when finding the next index, defaults to 0\n   * @returns {number} - the next valid selectable index. If the new index is outside of the bounds,\n   * it will snap to the edge of the options array. If delta == 0 and the given index is not selectable\n   */\n  private _getNextSelectableIndex(index: number, searchDirection: SearchDirection): number {\n    let { currentOptions } = this.state;\n\n    let newIndex = index + searchDirection;\n\n    newIndex = Math.max(0, Math.min(currentOptions.length - 1, newIndex));\n\n    let option: IComboBoxOption = currentOptions[newIndex];\n\n    // attempt to skip headers and dividers\n    if ((option.itemType === SelectableOptionMenuItemType.Header ||\n      option.itemType === SelectableOptionMenuItemType.Divider)) {\n\n      // Should we continue looking for an index to select?\n      if (searchDirection !== SearchDirection.none &&\n        ((newIndex !== 0 && searchDirection < SearchDirection.none) ||\n          (newIndex !== currentOptions.length - 1 && searchDirection > SearchDirection.none))) {\n        newIndex = this._getNextSelectableIndex(newIndex, searchDirection);\n      } else {\n        // If we cannot perform a useful search just return the index we were given\n        return index;\n      }\n    }\n\n    // We have the next valid selectable index, return it\n    return newIndex;\n  }\n\n  /**\n   * Set the selected index. Note, this is\n   * the \"real\" selected index, not the pending selected index\n   * @param index - the index to set (or the index to set from if a search direction is provided)\n   * @param searchDirection - the direction to search along the options from the given index\n   */\n  private _setSelectedIndex(index: number, searchDirection: SearchDirection = SearchDirection.none) {\n    let { onChanged } = this.props;\n    let { selectedIndex, currentOptions } = this.state;\n\n    // Find the next selectable index, if searchDirection is none\n    // we will get our starting index back\n    index = this._getNextSelectableIndex(index, searchDirection);\n\n    // Are we at a new index? If so, update the state, otherwise\n    // there is nothing to do\n    if (index !== selectedIndex) {\n      let option: IComboBoxOption = currentOptions[index];\n\n      // Set the selected option\n      this.setState({\n        selectedIndex: index\n      });\n\n      // Did the creator give us an onChanged callback?\n      if (onChanged) {\n        onChanged(option, index);\n      }\n\n      // if we have a new selected index,\n      // clear all of the pending info\n      this._clearPendingInfo();\n    }\n  }\n\n  /**\n   * Focus (and select) the content of the input\n   * and set the focused state\n   */\n  @autobind\n  private _select() {\n    this._comboBox.inputElement.select();\n\n    if (!this.state.focused) {\n      this.setState({ focused: true });\n    }\n  }\n\n  /**\n   * Callback issued when the options should be resolved, if they have been updated or\n   * if they need to be passed in the first time. This only does work if an onResolveOptions\n   * callback was passed in\n   */\n  @autobind\n  private _onResolveOptions() {\n    if (this.props.onResolveOptions) {\n\n      // get the options\n      let newOptions = this.props.onResolveOptions({ ...this.state.currentOptions });\n\n      // Check to see if the returned value is an array, if it is update the state\n      // If the returned value is not an array then check to see if it's a promise or PromiseLike. If it is then resolve it asynchronously.\n      if (Array.isArray(newOptions)) {\n        this.setState({\n          currentOptions: newOptions\n        });\n      } else if (newOptions && newOptions.then) {\n\n        // Ensure that the promise will only use the callback if it was the most recent one\n        // and update the state when the promise returns\n        let promise: PromiseLike<IComboBoxOption[]> = this._currentPromise = newOptions;\n        promise.then((newOptionsFromPromise: IComboBoxOption[]) => {\n          if (promise === this._currentPromise) {\n            this.setState({\n              currentOptions: newOptionsFromPromise\n            });\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * OnBlur handler. Set the focused state to false\n   * and submit any pending value\n   */\n  @autobind\n  private _onBlur() {\n    if (this.state.focused) {\n      this.setState({ focused: false });\n      this._submitPendingValue();\n    }\n  }\n\n  /**\n   * Submit a pending value if there is one\n   */\n  private _submitPendingValue() {\n    let {\n      onChanged,\n      allowFreeform\n    } = this.props;\n    let {\n      currentPendingValue,\n      currentPendingValueValidIndex,\n      currentOptions\n    } = this.state;\n\n    // If we allow freeform and we have a pending value, we\n    // need to handle that\n    if (allowFreeform && currentPendingValue !== '') {\n\n      // Check to see if the user typed an exact match\n      if (currentPendingValueValidIndex >= 0) {\n        let pendingOptionText: string = currentOptions[currentPendingValueValidIndex].text.toLocaleLowerCase();\n\n        // By exact match, that means: our pending value is the same as the the pending option text OR\n        // the peding option starts with the pending value and we have an \"autoComplete\" selection\n        // where the total lenght is equal to pending option length; update the state\n        if (currentPendingValue.toLocaleLowerCase() === pendingOptionText ||\n          (pendingOptionText.indexOf(currentPendingValue.toLocaleLowerCase()) === 0 &&\n            this._comboBox.isValueSelected &&\n            currentPendingValue.length + (this._comboBox.selectionEnd - this._comboBox.selectionStart) === pendingOptionText.length)) {\n          this._setSelectedIndex(currentPendingValueValidIndex);\n          this._clearPendingInfo();\n          return;\n        }\n      }\n\n      if (onChanged) {\n        onChanged(undefined, undefined, currentPendingValue);\n      } else {\n        // If we are not controlled, create a new option\n        let newOption: IComboBoxOption = { key: currentPendingValue, text: currentPendingValue };\n        let newOptions: IComboBoxOption[] = [...currentOptions, newOption];\n\n        this.setState({\n          currentOptions: newOptions,\n          selectedIndex: newOptions.length - 1\n        });\n      }\n    } else if (currentPendingValueValidIndex >= 0) {\n      // Since we are not allowing freeform, we must have a matching\n      // to be able to update state\n      this._setSelectedIndex(currentPendingValueValidIndex);\n    }\n\n    // Finally, clear the pending info\n    this._clearPendingInfo();\n  }\n\n  // Render Callout container and pass in list\n  @autobind\n  private _onRenderContainer(props: IComboBoxProps): JSX.Element {\n    let {\n      onRenderList = this._onRenderList,\n      calloutProps\n    } = props;\n\n    return (\n      <Callout\n        isBeakVisible={ false }\n        gapSpace={ 0 }\n        doNotLayer={ false }\n        directionalHint={ DirectionalHint.bottomLeftEdge }\n        directionalHintFixed={ true }\n        { ...calloutProps }\n        className={ this._classNames.callout }\n        targetElement={ this._comboBoxWrapper }\n        onDismiss={ this._onDismiss }\n        setInitialFocus={ false }\n      >\n        <div ref={ this._resolveRef('_comboBoxMenu') } style={ { width: this._comboBoxWrapper.clientWidth - 2 } }>\n          { (onRenderList as any)({ ...props }, this._onRenderList) }\n        </div>\n      </Callout>\n    );\n  }\n\n  // Render List of items\n  @autobind\n  private _onRenderList(props: IComboBoxProps): JSX.Element {\n    let {\n      onRenderItem = this._onRenderItem\n    } = this.props;\n\n    let id = this._id;\n    let { selectedIndex } = this.state;\n\n    return (\n      <div\n        id={ id + '-list' }\n        className={ this._classNames.optionsContainer }\n        aria-labelledby={ id + '-label' }\n        role='listbox'\n      >\n        { this.state.currentOptions.map((item, index) => onRenderItem({ ...item, index } as ISelectableOption, this._onRenderItem)) }\n      </div>\n    );\n  }\n\n  // Render items\n  @autobind\n  private _onRenderItem(item: IComboBoxOption): JSX.Element | null {\n\n    switch (item.itemType) {\n      case SelectableOptionMenuItemType.Divider:\n        return this._renderSeparator(item);\n      case SelectableOptionMenuItemType.Header:\n        return this._renderHeader(item);\n      default:\n        return this._renderOption(item);\n    }\n  }\n\n  // Render separator\n  private _renderSeparator(item: IComboBoxOption): JSX.Element | null {\n    let { index, key } = item;\n\n    if (index && index > 0) {\n      return <div\n        role='separator'\n        key={ key }\n        className={ this._classNames.divider } />;\n    }\n    return null;\n  }\n\n  private _renderHeader(item: IComboBoxOption): JSX.Element {\n    let { onRenderOption = this._onRenderOption } = this.props;\n\n    return (\n      <div key={ item.key } className={ this._classNames.header } role='heading'>\n        { onRenderOption(item, this._onRenderOption) }\n      </div>);\n  }\n\n  // Render menu item\n  @autobind\n  private _renderOption(item: IComboBoxOption): JSX.Element {\n    let { onRenderOption = this._onRenderOption } = this.props;\n    let id = this._id;\n    let isSelected: boolean = this._isOptionSelected(item.index);\n    return (\n      <CommandButton\n        id={ id + '-list' + item.index }\n        key={ item.key }\n        data-index={ item.index }\n        className={ 'ms-ComboBox-option' }\n        styles={ this._getCurrentOptionStyles(item) }\n        checked={ isSelected }\n        onClick={ () => this._onItemClick(item.index) }\n        role='option'\n        aria-selected={ isSelected ? 'true' : 'false' }\n        ariaLabel={ item.text }\n      > { <span ref={ this._resolveRef(isSelected ? '_selectedElement' : '') }>\n        { onRenderOption(item, this._onRenderOption) }\n      </span>\n        }\n      </CommandButton>\n    );\n  }\n\n  /**\n   * Use the current valid pending index if it exists OR\n   * we do not have a valid index and we currently have a pending input value,\n   * otherwise use the selected index\n   * */\n  private _isOptionSelected(index: number | undefined): boolean {\n    let {\n      currentPendingValueValidIndex,\n      currentPendingValue,\n      selectedIndex\n    } = this.state;\n    return ((currentPendingValueValidIndex >= 0 || currentPendingValue !== '') ?\n      currentPendingValueValidIndex === index : selectedIndex === index);\n  }\n\n  /**\n   * Scroll the selected element into view\n   */\n  private _scrollIntoView() {\n    if (this._selectedElement) {\n      let alignToTop = true;\n      if (this._comboBoxMenu.offsetParent) {\n        let scrollableParentRect = this._comboBoxMenu.offsetParent.getBoundingClientRect();\n        let selectedElementRect = this._selectedElement.offsetParent.getBoundingClientRect();\n\n        if (scrollableParentRect.top + scrollableParentRect.height <= selectedElementRect.top) {\n          alignToTop = false;\n        }\n      }\n\n      this._selectedElement.offsetParent.scrollIntoView(alignToTop);\n    }\n  }\n\n  // Render content of item\n  @autobind\n  private _onRenderOption(item: IComboBoxOption): JSX.Element {\n    const optionStyles = this._getCurrentOptionStyles(item);\n    return <span className={ optionStyles.optionText as string }>{ item.text }</span>;\n  }\n\n  /**\n   * Click handler for the menu items\n   * to select the item and also close the menu\n   * @param index - the index of the item that was clicked\n   */\n  private _onItemClick(index: number | undefined) {\n    this._setSelectedIndex(index as number);\n    this.setState({\n      isOpen: false\n    });\n  }\n\n  /**\n   * Handles dismissing (cancelling) the menu\n   */\n  @autobind\n  private _onDismiss() {\n\n    // reset the selected index\n    // to the last valud state\n    this._resetSelectedIndex();\n\n    // close the menu and focus the input\n    this.setState({ isOpen: false });\n    this._comboBox.focus();\n  }\n\n  /**\n   * Get the index of the option that is marked as selected\n   * @param options - the comboBox options\n   * @param selectedKey - the known selected key to find\n   * @returns {number} - the index of the selected option, -1 if not found\n   */\n  private _getSelectedIndex(options: IComboBoxOption[] | undefined, selectedKey: string | number | undefined): number {\n    if (options === undefined || selectedKey === undefined) {\n      return -1;\n    }\n\n    return findIndex(options, (option => (option.selected || option.key === selectedKey)));\n  }\n\n  /**\n   * Reset the selected index by clearing the\n   * input (of any pending text), clearing the pending state,\n   * and setting the suggested display value to the last\n   * selected state text\n   */\n  private _resetSelectedIndex() {\n    let {\n      selectedIndex,\n      currentOptions\n    } = this.state;\n    this._comboBox.clear();\n    this._clearPendingInfo();\n\n    if (selectedIndex > 0 && selectedIndex < currentOptions.length) {\n      this.setState({\n        suggestedDisplayValue: currentOptions[selectedIndex].text\n      });\n    } else if (this.props.value) {\n      // If we had a value initially, restore it\n      this.setState({\n        suggestedDisplayValue: this.props.value\n      });\n    }\n  }\n\n  /**\n   * Clears the pending info state\n   */\n  private _clearPendingInfo() {\n    this._setPendingInfo('' /* suggestedDisplayValue */, -1 /* currentPendingValueValidIndex */, '' /* currentPendingValue */);\n  }\n\n  /**\n   * Set the pending info\n   * @param currentPendingValue - new pending value to set\n   * @param currentPendingValueValidIndex - new pending value index to set\n   * @param suggestedDisplayValue - new suggest display value to set\n   */\n  private _setPendingInfo(currentPendingValue: string, currentPendingValueValidIndex: number, suggestedDisplayValue: string) {\n    this.setState({\n      currentPendingValue: currentPendingValue,\n      currentPendingValueValidIndex: currentPendingValueValidIndex,\n      suggestedDisplayValue: suggestedDisplayValue\n    });\n  }\n\n  /**\n   * Set the pending info from the given index\n   * @param index - the index to set the pending info from\n   */\n  private _setPendingInfoFromIndex(index: number) {\n    let {\n      currentOptions\n    } = this.state;\n\n    if (index >= 0 && index < currentOptions.length) {\n      let option = currentOptions[index];\n      this._setPendingInfo(option.text, index, option.text);\n    } else {\n      this._clearPendingInfo();\n    }\n\n  }\n\n  /**\n   * Sets either the pending info or the\n   * selected index depending of if the comboBox is open\n   * @param index - the index to search from\n   * @param searchDirection - the direction to search\n   */\n  private _setInfoForIndexAndDirection(index: number, searchDirection: SearchDirection) {\n    let {\n      isOpen,\n      selectedIndex\n    } = this.state;\n\n    if (isOpen) {\n      index = this._getNextSelectableIndex(index, searchDirection);\n      this._setPendingInfoFromIndex(index);\n    } else {\n      this._setSelectedIndex(selectedIndex, searchDirection);\n    }\n  }\n\n  /**\n   * Handle keydown on the input\n   * @param ev - The keyboard event that was fired\n   */\n  @autobind\n  private _onInputKeyDown(ev: React.KeyboardEvent<HTMLElement | BaseAutoFill>) {\n    let {\n      disabled,\n      allowFreeform,\n      autoComplete\n    } = this.props;\n    let {\n      isOpen,\n      currentPendingValueValidIndex,\n      selectedIndex,\n      currentOptions\n    } = this.state;\n\n    if (disabled) {\n      this._handleInputWhenDisabled(ev);\n      return;\n    }\n\n    let index = currentPendingValueValidIndex >= 0 ? currentPendingValueValidIndex : selectedIndex;\n\n    switch (ev.which) {\n      case KeyCodes.enter:\n        // On enter submit the pending value\n        this._submitPendingValue();\n\n        // if we are open or\n        // if we are not allowing freeform or\n        // our we have no pending value\n        // and no valid pending index\n        // flip the open state\n        if ((isOpen ||\n          ((!allowFreeform ||\n            this.state.currentPendingValue === undefined ||\n            this.state.currentPendingValue === null ||\n            this.state.currentPendingValue.length <= 0) &&\n            this.state.currentPendingValueValidIndex < 0))) {\n          this.setState({\n            isOpen: !isOpen\n          });\n        }\n\n        // Allow TAB to propigate\n        if (ev.which as number === KeyCodes.tab) {\n          return;\n        }\n        break;\n\n      case KeyCodes.tab:\n        // On enter submit the pending value\n        this._submitPendingValue();\n\n        // If we are not allowing freeform\n        // or the comboBox is open, flip the open state\n        if (isOpen) {\n          this.setState({\n            isOpen: !isOpen\n          });\n        }\n\n        // Allow TAB to propigate\n        return;\n\n      case KeyCodes.escape:\n        // reset the selected index\n        this._resetSelectedIndex();\n\n        // Close the menu if opened\n        if (isOpen) {\n          this.setState({\n            isOpen: false\n          });\n        }\n        break;\n\n      case KeyCodes.up:\n        // Go to the previous option\n        this._setInfoForIndexAndDirection(index, SearchDirection.backward);\n        break;\n\n      case KeyCodes.down:\n        // Expand the comboBox on ALT + DownArrow\n        if (ev.altKey || ev.metaKey) {\n          this.setState({ isOpen: true });\n        } else {\n          // Got to the next option\n          this._setInfoForIndexAndDirection(index, SearchDirection.forward);\n        }\n        break;\n\n      case KeyCodes.home:\n      case KeyCodes.end:\n        if (allowFreeform) {\n          return;\n        }\n\n        // Set the initial values to respond to HOME\n        // which goes to the first selectable option\n        index = -1;\n        let directionToSearch = SearchDirection.forward;\n\n        // If end, update the values to respond to END\n        // which goes to the last selectable option\n        if (ev.which === KeyCodes.end) {\n          index = currentOptions.length;\n          directionToSearch = SearchDirection.backward;\n        }\n\n        this._setInfoForIndexAndDirection(index, directionToSearch);\n        break;\n\n      case KeyCodes.space:\n        // event handled in _onComboBoxKeyUp\n        if (!allowFreeform && autoComplete === 'off') {\n          break;\n        }\n\n      default:\n\n        // are we processing a function key? if so bail out\n        if (ev.which >= 112 /* F1 */ && ev.which <= 123 /* F12 */) {\n          return;\n        }\n\n        // If we get here and we got either and ALT key\n        // or meta key and we are current open, let's close the menu\n        if ((ev.altKey || ev.metaKey) && isOpen) {\n          this.setState({ isOpen: !isOpen });\n        }\n\n        // If we are not allowing freeform and\n        // allowing autoComplete, handle the input here\n        // since we have marked the input as readonly\n        if (!allowFreeform && autoComplete === 'on') {\n          this._onInputChange(String.fromCharCode(ev.which));\n          break;\n        }\n\n        // allow the key to propigate by default\n        return;\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  }\n\n  /**\n   * Handle keyup on the input\n   * @param ev - the keyboard event that was fired\n   */\n  @autobind\n  private _onInputKeyUp(ev: React.KeyboardEvent<HTMLElement | BaseAutoFill>) {\n    let {\n      disabled,\n      allowFreeform,\n      autoComplete\n    } = this.props;\n\n    if (disabled) {\n      this._handleInputWhenDisabled(ev);\n      return;\n    }\n\n    switch (ev.which) {\n      case KeyCodes.space:\n        // If we are not allowing freeform and are not autoComplete\n        // make space expand/collapse the comboBox\n        // and allow the event to propagate\n        if (!allowFreeform && autoComplete === 'off') {\n          this.setState({\n            isOpen: !this.state.isOpen\n          });\n          return;\n        }\n        break;\n\n      default:\n        return;\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  }\n\n  /**\n   * Handle dismissing the menu and\n   * eating the required key event when disabled\n   * @param ev - the keyboard event that was fired\n   */\n  private _handleInputWhenDisabled(ev: React.KeyboardEvent<HTMLElement | BaseAutoFill> | null) {\n    // If we are disabled, close the menu (if needed)\n    // and eat all keystokes other than TAB or ESC\n    if (this.props.disabled) {\n      if (this.state.isOpen) {\n        this.setState({ isOpen: false });\n      }\n\n      // When disabled stop propagation and prevent default\n      // of the event unless we have a tab, escape, or function key\n      if (ev !== null &&\n        ev.which !== KeyCodes.tab &&\n        ev.which !== KeyCodes.escape &&\n        (ev.which < 112 /* F1 */ || ev.which > 123 /* F12 */)) {\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  }\n\n  /**\n   * Click handler for the button of the comboBox\n   * and the input when not allowing freeform. This\n   * toggles the expand/collapse state of the comboBox (if enbled)\n   */\n  @autobind\n  private _onComboBoxClick() {\n    let { disabled } = this.props;\n    let { isOpen } = this.state;\n\n    if (!disabled) {\n      this.setState({\n        isOpen: !isOpen\n      });\n    }\n  }\n\n  /**\n * Get the styles for the current option.\n * @param item Item props for the current option\n */\n  private _getCaretButtonStyles() {\n    const { caretDownButtonStyles: customCaretDownButtonStyles } = this.props;\n    return getCaretDownButtonStyles(this.props.theme!, customCaretDownButtonStyles);\n  }\n\n  /**\n   * Get the styles for the current option.\n   * @param item Item props for the current option\n   */\n  private _getCurrentOptionStyles(item: IComboBoxOption) {\n    const { comboBoxOptionStyles: customStylesForAllOptions } = this.props;\n    const { styles: customStylesForCurrentOption } = item;\n\n    return getOptionStyles(this.props.theme!, customStylesForAllOptions, customStylesForCurrentOption);\n  }\n}\n"]}