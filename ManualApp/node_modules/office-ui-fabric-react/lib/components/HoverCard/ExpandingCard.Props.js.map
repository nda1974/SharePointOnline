{"version":3,"file":"ExpandingCard.Props.js","sourceRoot":"../src/","sources":["components/HoverCard/ExpandingCard.Props.ts"],"names":[],"mappings":";;AA2FA,IAAY,iBAUX;AAVD,WAAY,iBAAiB;IAC3B;;OAEG;IACH,+DAAW,CAAA;IAEX;;OAEG;IACH,iEAAY,CAAA;AACd,CAAC,EAVW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAU5B","sourcesContent":["import * as React from 'react';\nimport { ExpandingCard } from './ExpandingCard';\nimport { IRenderFunction } from '../../Utilities';\nimport { IStyle, ITheme } from '../../Styling';\nimport { DirectionalHint } from '../../common/DirectionalHint';\n\nexport interface IExpandingCard {\n\n}\n\n/**\n * ExpandingCard component props.\n */\nexport interface IExpandingCardProps extends React.HTMLAttributes<HTMLDivElement | ExpandingCard> {\n  /**\n   * Optional callback to access the IExpandingCard interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: IExpandingCard) => void;\n\n  /**\n   *  Item to be returned with onRender functions\n   */\n  renderData?: any;\n\n  /**\n   *  Render function to populate compact content area\n   */\n  onRenderCompactCard?: IRenderFunction<IExpandingCardProps>;\n\n  /**\n   *  Render function to populate expanded content area\n   */\n  onRenderExpandedCard?: IRenderFunction<IExpandingCardProps>;\n\n  /**\n   * Element to anchor the ExpandingCard to.\n   */\n  targetElement?: HTMLElement;\n\n  /**\n   * Callback upon focus or mouse enter event\n   */\n  onEnter?: (ev?: any) => void;\n\n  /**\n   * Callback upon blur or mouse leave event\n   */\n  onLeave?: (ev?: any) => void;\n\n  /**\n   * Height of compact card\n   * @default 156\n   */\n  compactCardHeight?: number;\n\n  /**\n   * Height of expanded card\n   * @default 384\n   */\n  expandedCardHeight?: number;\n\n  /**\n   * Use to open the card in expanded format and not wait for the delay\n   * @default ExpandingCardMode.compact\n   */\n  mode?: ExpandingCardMode;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * How the element should be positioned\n   * @default DirectionalHint.bottomLeftEdge\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * The gap between the card and the target\n   * @default 0\n   */\n  gapSpace?: number;\n\n  /**\n   * Custom styles for this component\n   */\n  styles?: IExpandingCardStyles;\n}\n\nexport enum ExpandingCardMode {\n  /**\n   * To have top compact card only\n   */\n  compact = 0,\n\n  /**\n   * To have both top compact and bottom expanded card\n   */\n  expanded = 1\n}\n\nexport interface IExpandingCardStyles {\n  /**\n   * Style for the root element in the default enabled, non-toggled state.\n   */\n  root?: IStyle;\n\n  /**\n   * Style for the main card element.\n   */\n  compactCard?: IStyle;\n\n  /**\n   * Base Style for the expanded card content\n   */\n  expandedCard?: IStyle;\n\n  /**\n   * Style for the expanded card scroll content\n   */\n  expandedCardScroll?: IStyle;\n}"]}