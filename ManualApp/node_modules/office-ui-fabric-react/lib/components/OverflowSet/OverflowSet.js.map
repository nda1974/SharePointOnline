{"version":3,"file":"OverflowSet.js","sourceRoot":"../src/","sources":["components/OverflowSet/OverflowSet.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,6CAIyB;AAEzB,6CAAgE;AAEhE,iDAAmD;AACnD,IAAM,MAAM,GAAQ,YAAY,CAAC;AAEjC;IAAiC,uCAAoC;IAArE;;IAyCA,CAAC;IAnCQ,4BAAM,GAAb;QACM,IAAA,eAKU,EAJZ,gBAAK,EACL,gCAAa,EACb,kDAAsB,EACtB,wBAAS,CACI;QAEf,MAAM,CAAC,CACL,oBAAC,qBAAS,IAAC,GAAG,EAAC,WAAW,EAAC,SAAS,EAAG,eAAG,CAAC,gBAAgB,EAAE,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,EAAG,SAAS,EAAG,8BAAkB,CAAC,UAAU,EAAG,IAAI,EAAC,SAAS;YAC7I,KAAK,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YACnC,aAAa,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,IAAI,sBAAsB,CAAC,aAAa,CAAC,CAC1E,CACb,CAAC;IACJ,CAAC;IAEM,2BAAK,GAAZ;QACE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IAC9B,CAAC;IAGO,oCAAc,GAAtB,UAAuB,KAAY;QADnC,iBAaC;QAXC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,CAAC;YACvB,IAAI,eAAe,GAAoC,EAAE,SAAS,EAAE,eAAG,CAAC,qBAAqB,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;YAC9G,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gBACb,eAAe,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;YACjC,CAAC;YACD,MAAM,CAAC,CACL,gDAAS,eAAe,GACpB,KAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAC3B,CACP,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAZD;QADC,oBAAQ;qDAaR;IAEH,kBAAC;CAAA,AAzCD,CAAiC,yBAAa,GAyC7C;AAzCY,kCAAW","sourcesContent":["import * as React from 'react';\nimport {\n  css,\n  autobind,\n  BaseComponent\n} from '../../Utilities';\nimport { IOverflowSet, IOverflowSetProps } from './OverflowSet.Props';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\n\nimport * as stylesImport from './OverflowSet.scss';\nconst styles: any = stylesImport;\n\nexport class OverflowSet extends BaseComponent<IOverflowSetProps, {}> implements IOverflowSet {\n\n  public refs: {\n    focusZone: FocusZone;\n  };\n\n  public render() {\n    let {\n      items,\n      overflowItems,\n      onRenderOverflowButton,\n      className\n    } = this.props;\n\n    return (\n      <FocusZone ref='focusZone' className={ css('ms-OverflowSet', styles.root, className) } direction={ FocusZoneDirection.horizontal } role='menubar' >\n        { items && this._onRenderItems(items) }\n        { overflowItems && overflowItems.length > 0 && onRenderOverflowButton(overflowItems) }\n      </FocusZone>\n    );\n  }\n\n  public focus() {\n    this.refs.focusZone.focus();\n  }\n\n  @autobind\n  private _onRenderItems(items: any[]): JSX.Element[] {\n    return items.map((item, i) => {\n      let wrapperDivProps: React.HTMLProps<HTMLDivElement> = { className: css('ms-OverflowSet-item', styles.item) };\n      if (item.key) {\n        wrapperDivProps.key = item.key;\n      }\n      return (\n        <div {...wrapperDivProps}>\n          { this.props.onRenderItem(item) }\n        </div>\n      );\n    });\n  }\n\n}"]}