{"version":3,"file":"Popup.Props.js","sourceRoot":"../src/","sources":["components/Popup/Popup.Props.ts"],"names":[],"mappings":"","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport * as React from 'react';\n/* tslint:enable:no-unused-variable */\nimport { Popup } from './Popup';\n\nexport interface IPopup {\n\n}\n\nexport interface IPopupProps extends React.HTMLAttributes<Popup> {\n  /**\n   * Optional callback to access the IPopup interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: (component: IPopup) => void;\n\n  /**\n   * Aria role for popup\n   */\n  role?: string;\n\n  /**\n   * Accessible label text for the popup.\n   */\n  ariaLabel?: string;\n\n  /**\n   *  Defines the element id referencing the element containing label text for popup.\n   */\n  ariaLabelledBy?: string;\n\n  /**\n    * Defines the element id referencing the element containing the description for the popup.\n    */\n  ariaDescribedBy?: string;\n\n  /**\n   * A callback function for when the popup is dismissed from the close button or light dismiss. If provided, will\n   * handle escape keypresses and call this. The event will be stopped/canceled.\n   */\n  onDismiss?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => any;\n\n  /**\n   *  Optional class name for the root popup div.\n   */\n  className?: string;\n\n  /**\n   * If true, the unmounting of this component will cause focus to be restored to the element that had focus when first mounted.\n   * @default true\n   */\n  shouldRestoreFocus?: boolean;\n}"]}