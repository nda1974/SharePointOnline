{"version":3,"file":"BaseButton.js","sourceRoot":"../src/","sources":["components/Button/BaseButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BaseComponent,\n  IRenderFunction,\n  anchorProperties,\n  assign,\n  autobind,\n  buttonProperties,\n  getId,\n  getNativeProps,\n  KeyCodes,\n  css,\n} from '../../Utilities';\nimport { mergeStyles, hideText } from '../../Styling';\nimport { Icon, IIconProps } from '../../Icon';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ContextualMenu, IContextualMenuProps } from '../../ContextualMenu';\nimport { IButtonProps, IButton } from './Button.Props';\nimport { IButtonClassNames, getClassNames } from './BaseButton.classNames';\nimport { getClassNames as getSplitButtonClassNames } from './SplitButton/SplitButton.classNames';\n\nexport interface IBaseButtonProps extends IButtonProps {\n  baseClassName?: string;\n  variantClassName?: string;\n}\n\nexport interface IBaseButtonState {\n  menuProps?: IContextualMenuProps | null;\n}\n\nexport class BaseButton extends BaseComponent<IBaseButtonProps, IBaseButtonState> implements IButton {\n\n  private get _isSplitButton(): boolean {\n    return (!!this.props.menuProps && !!this.props.onClick) && this.props.split === true;\n  }\n\n  private get _isExpanded(): boolean {\n    return !!this.state.menuProps;\n  }\n\n  public static defaultProps = {\n    baseClassName: 'ms-Button',\n    classNames: {},\n    styles: {},\n    split: false\n  };\n\n  private _buttonElement: HTMLElement;\n  private _labelId: string;\n  private _descriptionId: string;\n  private _ariaDescriptionId: string;\n  private _classNames: IButtonClassNames;\n\n  constructor(props: IBaseButtonProps, rootClassName: string) {\n    super(props);\n\n    this._warnConditionallyRequiredProps(\n      ['menuProps', 'onClick'],\n      'split',\n      this.props.split!\n    );\n\n    this._warnDeprecations({\n      rootProps: undefined,\n      icon: 'iconProps',\n      menuIconName: 'menuIconProps',\n      toggled: 'checked'\n    });\n\n    this._labelId = getId();\n    this._descriptionId = getId();\n    this._ariaDescriptionId = getId();\n    this.state = {\n      menuProps: null\n    };\n  }\n\n  public render(): JSX.Element {\n    const {\n      ariaDescription,\n      ariaLabel,\n      className,\n      description,\n      disabled,\n      href,\n      iconProps,\n      styles,\n      text,\n      checked,\n      variantClassName\n         } = this.props;\n\n    this._classNames = getClassNames(\n      styles!,\n      className!,\n      variantClassName!,\n      iconProps && iconProps.className,\n      disabled!,\n      checked!,\n      !!this.state.menuProps && !this.props.split\n    );\n\n    const { _ariaDescriptionId, _labelId, _descriptionId } = this;\n    // Anchor tag cannot be disabled hence in disabled state rendering\n    // anchor button as normal button\n    const renderAsAnchor: boolean = !disabled && !!href;\n    const tag = renderAsAnchor ? 'a' : 'button';\n    const nativeProps = getNativeProps(\n      assign(\n        renderAsAnchor ? {} : { type: 'button' },\n        this.props.rootProps,\n        this.props),\n      renderAsAnchor ? anchorProperties : buttonProperties,\n      [\n        'disabled' // Let disabled buttons be focused and styled as disabled.\n      ]);\n\n    // Check for ariaDescription, description or aria-describedby in the native props to determine source of aria-describedby\n    // otherwise default to null.\n    let ariaDescribedBy;\n    if (ariaDescription) {\n      ariaDescribedBy = _ariaDescriptionId;\n    } else if (description) {\n      ariaDescribedBy = _descriptionId;\n    } else if ((nativeProps as any)['aria-describedby']) {\n      ariaDescribedBy = (nativeProps as any)['aria-describedby'];\n    } else {\n      ariaDescribedBy = null;\n    }\n\n    // If an explicit ariaLabel is given, use that as the label and we're done.\n    // If an explicit aria-labelledby is given, use that and we're done.\n    // If any kind of description is given (which will end up as an aria-describedby attribute),\n    // set the labelledby element. Otherwise, the button is labeled implicitly by the descendent\n    // text on the button (if it exists). Never set both aria-label and aria-labelledby.\n    let ariaLabelledBy = null;\n    if (!ariaLabel) {\n      if ((nativeProps as any)['aria-labelledby']) {\n        ariaLabelledBy = (nativeProps as any)['aria-labelledby'];\n      } else if (ariaDescribedBy) {\n        ariaLabelledBy = text ? _labelId : null;\n      }\n    }\n\n    const tabIndex = (this.props.tabIndex === undefined) ? (this._isSplitButton ? -1 : 0) : this.props.tabIndex;\n\n    const buttonProps = assign(\n      nativeProps,\n      {\n        className: this._classNames.root,\n        ref: this._resolveRef('_buttonElement'),\n        'disabled': disabled,\n        tabIndex: tabIndex,\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledBy,\n        'aria-describedby': ariaDescribedBy,\n        'data-is-focusable': ((this.props as any)['data-is-focusable'] === false || disabled) ? false : true,\n        'aria-pressed': checked\n      }\n    );\n\n    if (this._isSplitButton) {\n      return (\n        this._onRenderSplitButtonContent(tag, buttonProps)\n      );\n    } else if (this.props.menuProps) {\n      assign(\n        buttonProps,\n        {\n          'onClick': this._onToggleMenu,\n          'aria-expanded': this._isExpanded,\n          'aria-owns': this.state.menuProps ? this._labelId + '-menu' : null,\n          'aria-haspopup': true\n        }\n      );\n    }\n\n    return this._onRenderContent(tag, buttonProps);\n  }\n\n  public focus(): void {\n    if (this._buttonElement) {\n      this._buttonElement.focus();\n    }\n  }\n\n  private _onRenderContent(tag: any, buttonProps: IButtonProps): JSX.Element {\n    let props = this.props;\n    let {\n      menuIconName,\n      menuIconProps,\n      menuProps,\n      onRenderIcon = this._onRenderIcon,\n      onRenderText = this._onRenderText,\n      onRenderDescription = this._onRenderDescription,\n      onRenderAriaDescription = this._onRenderAriaDescription,\n      onRenderChildren = this._onRenderChildren,\n      onRenderMenu = this._onRenderMenu,\n      onRenderMenuIcon = this._onRenderMenuIcon\n    } = props;\n\n    return React.createElement(\n      tag,\n      buttonProps,\n      React.createElement(\n        'div' as any,\n        { className: this._classNames.flexContainer },\n        onRenderIcon(props, this._onRenderIcon),\n        onRenderText(props, this._onRenderText),\n        onRenderDescription(props, this._onRenderDescription),\n        onRenderAriaDescription(props, this._onRenderAriaDescription),\n        onRenderChildren(props, this._onRenderChildren),\n        !this._isSplitButton && (menuProps || menuIconName || menuIconProps || this.props.onRenderMenuIcon) && onRenderMenuIcon(this.props, this._onRenderMenuIcon),\n        this.state.menuProps && onRenderMenu(menuProps, this._onRenderMenu)\n      ));\n  }\n\n  @autobind\n  private _onRenderIcon(buttonProps?: IButtonProps, defaultRender?: IRenderFunction<IButtonProps>): JSX.Element | null {\n    let {\n      icon,\n      iconProps\n       } = this.props;\n\n    if (icon || iconProps) {\n      iconProps = iconProps || {\n        iconName: icon\n      } as IIconProps;\n    }\n\n    if (iconProps) {\n      return Icon({\n        ...iconProps,\n        className: this._classNames.icon\n      });\n    }\n    return null;\n  }\n\n  @autobind\n  private _onRenderText(): JSX.Element | null {\n    let {\n      children,\n      text\n            } = this.props;\n\n    // For backwards compat, we should continue to take in the text content from children.\n    if (text === undefined && typeof (children) === 'string') {\n      text = children;\n    }\n\n    if (text) {\n      return (\n        <span\n          className={ this._classNames.label }\n          id={ this._labelId }\n        >\n          { text }\n        </span>\n      );\n    }\n\n    return null;\n  }\n\n  @autobind\n  private _onRenderChildren(): JSX.Element | null {\n    const { children } = this.props;\n\n    // If children is just a string, either it or the text will be rendered via onRenderLabel\n    // If children is another component, it will be rendered after text\n    if (typeof (children) === 'string') {\n      return null;\n    }\n\n    return children as any;\n  }\n\n  @autobind\n  private _onRenderDescription(props: IButtonProps) {\n    const {\n    description\n    } = this.props;\n\n    // ms-Button-description is only shown when the button type is compound.\n    // In other cases it will not be displayed.\n    return description ? (\n      <span className={ this._classNames.description } id={ this._descriptionId }>\n        { description }\n      </span>\n    ) : (\n        null\n      );\n  }\n\n  @autobind\n  private _onRenderAriaDescription() {\n    const {\n     ariaDescription,\n      styles\n     } = this.props;\n\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\n    // otherwise it will be assigned to descriptionSpan.\n    return ariaDescription ? (\n      <span className={ `${styles!.screenReaderText || mergeStyles(hideText)}` } id={ this._ariaDescriptionId }>{ ariaDescription }</span>\n    ) : (\n        null\n      );\n  }\n\n  @autobind\n  private _onRenderMenuIcon(props: IButtonProps): JSX.Element | null {\n    let {\n      menuIconName,\n      menuIconProps\n       } = this.props;\n\n    if (menuIconProps === undefined) {\n      menuIconProps = {\n        iconName: menuIconName === undefined ? 'ChevronDown' : menuIconName\n      };\n    }\n\n    return (\n      menuIconProps ?\n        <Icon\n          { ...menuIconProps }\n          className={ this._classNames.menuIcon }\n        />\n        :\n        null\n    );\n  }\n\n  @autobind\n  private _onRenderMenu(menuProps: IContextualMenuProps): JSX.Element {\n    return (\n      <ContextualMenu\n        id={ this._labelId + '-menu' }\n        directionalHint={ DirectionalHint.bottomLeftEdge }\n        {...menuProps}\n        className={ 'ms-BaseButton-menuhost ' + menuProps.className }\n        target={ this._buttonElement }\n        labelElementId={ this._labelId }\n        onDismiss={ this._onToggleMenu }\n      />\n    );\n  }\n\n  @autobind\n  private _onToggleMenu(): void {\n    const { menuProps } = this.props;\n    let currentMenuProps = this.state.menuProps;\n\n    this.setState({ menuProps: currentMenuProps ? null : menuProps });\n  }\n\n  private _onRenderSplitButtonContent(tag: any, buttonProps: IButtonProps): JSX.Element {\n    const {\n      styles,\n      disabled\n    } = this.props;\n\n    return (\n      <div\n        aria-labelledby={ buttonProps.ariaLabel }\n        aria-disabled={ disabled }\n        aria-haspopup={ true }\n        aria-expanded={ this._isExpanded }\n        aria-pressed={ this.props.checked }\n        aria-describedby={ buttonProps.ariaDescription }\n        className={ css(disabled ? styles!.splitButtonContainerDisabled : styles!.splitButtonContainer) }\n        tabIndex={ 0 }\n        onKeyDown={ this.props.disabled ? undefined : this._onSplitButtonKeyDown }\n      >\n        <span aria-hidden={ true } style={ { 'display': 'flex' } }>\n          { this._onRenderContent(tag, buttonProps) }\n          { this._onRenderSplitButtonMenuButton() }\n        </span>\n      </div >\n    );\n  }\n\n  private _onRenderSplitButtonMenuButton(): JSX.Element {\n    let {\n      menuIconName,\n      menuIconProps,\n      styles,\n      disabled,\n      checked\n    } = this.props;\n\n    if (menuIconProps === undefined) {\n      menuIconProps = {\n        iconName: menuIconName === undefined ? 'ChevronDown' : menuIconName\n      };\n    }\n\n    const classNames = styles ? getSplitButtonClassNames(styles!, disabled || false, !!this.state.menuProps, checked || false) : undefined;\n\n    return (\n      <BaseButton\n        tabIndex={ -1 }\n        styles={ classNames }\n        checked={ this.props.checked }\n        disabled={ this.props.disabled }\n        onClick={ this._onToggleMenu }\n        menuProps={ undefined }\n        iconProps={ menuIconProps } />\n    );\n  }\n\n  @autobind\n  private _onSplitButtonKeyDown(ev: React.KeyboardEvent<HTMLElement>) {\n    switch (ev.which) {\n      case KeyCodes.enter:\n      case KeyCodes.space:\n        (this.props.onClick as any)(null);\n        return;\n    }\n\n    if (ev.altKey) {\n      switch (ev.which) {\n        case KeyCodes.down:\n          this._onToggleMenu();\n          return;\n      }\n    }\n  }\n}\n"]}